(this["webpackJsonp@ibm-app-connect/toolkit-tutorials"]=this["webpackJsonp@ibm-app-connect/toolkit-tutorials"]||[]).push([[0],{152:function(e){e.exports=JSON.parse('{"Getting started - Creating a very simple message flow":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Creating a very simple message flow","shortDescription":"Learn how to quickly create a very simple message flow","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"SimpleFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating a message flow"},{"title":"Testing a message flow"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Understand the concept of a message flow"},{"title":"Understand how to create a message flow from scratch"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial helps you to create a message flow for the first time. Message flows are created in the IBM App Connect Enterprise Toolkit."},{"section":"Once you have created the flow, you will learn how to use the Toolkit to run the message flow and test it by sending data through it."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Create the Message Flow","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"<b>Create an Application project to hold the new message flow</b>","steps":{"type":"ordered","details":[{"details":"Message flows are created in the Toolkit using a drag and drop editor. The actions of this editor are executed on a file which has a .msgflow extension. Saving your changes causes this file to be updated in your workspace. Before creating the message flow, you will need to create a project which will be used to store it. The Toolkit offers several different types of project which can be used to store message flows. Users who are familiar with older versions of App Connect Enterprise might be familiar with using Integration Projects for this purpose. Although these projects still exist, a better choice particularly if you are entirely new to App Connect Enterprise would be to use an Application project."},{"details":"As is common with Eclipse based tools, there are several handy shortcuts and alternate ways to make navigation as easy as possible; but all these options will take you to the same New Application wizard. For example, if you\'ve just launched a new workspace for the first time you will see a <span class=\'uicontrol\'>Quick Starts</span> page with a link to <span class=\'uicontrol\'>Start by creating an application</span>. Regardless of your starting point, you will be able to use the menus at the top of the Toolkit and select <span class=\'uicontrol\'>File - New - Application</span>"},{"details":"When the wizard launches, provide an Application name such as <span class=\'uicontrol\'>ExampleApplication</span> and click Finish."}]}},{"section":"<b>Create the message flow</b>","steps":{"type":"ordered","details":[{"details":"In the Application Development view (normally in the top left corner of your Toolkit) you will see that the application has been created. Underneath <span class=\'uicontrol\'>ExampleApplication</span>, click where it says <span class=\'uicontrol\'>(New...)</span>. If you can\'t see where this is, you can also go to the top menu and choose <span class=\'uicontrol\'>File - New - Message flow</span>. When the wizard launches, ensure that the Container selection is set to <span class=\'uicontrol\'>ExampleApplication</span>. Note that the term Container, is just another word for project. Provide a Message Flow name such as <span class=\'uicontrol\'>ExampleMessageFlow</span>, then click Finish."},{"details":"<span class=\'uicontrol\'>ExampleMessageFlow.msgflow</span> will open in an editor. The flow starts off empty, but down the left side of the flow editor you will see a palette with a large number of labelled drawers, each with its own icon. A message flow node is a processing step in a message flow. You can wire message flow nodes together to define the order of processing. Each message flow node receives a message, performs a set of actions, and typically passes on the message to the next node in the message flow."},{"details":"Expand the HTTP drawer, and drag and drop two message flow nodes - an HTTPInput and an HTTPReply - on to the canvas. You will see four terminals on the right side of the HTTPInput message flow node. Wire the two message flow nodes together by clicking on the second terminal down (labelled <span class=\'uicontrol\'>Out</span> if you hover over it) on the HTTPInput and then click on the HTTPReply node. If you find it easier, you could right-click on the HTTPInput node and select <span class=\'uicontrol\'>Create connections</span> and use the menu which pops up. Save the message flow using the keyboard shortcut Ctrl-S, or from the top menu <span class=\'uicontrol\'>File - Save</span>"}]}},{"section":"<b>Edit the properties of the HTTPInput node</b>","steps":{"type":"ordered","details":[{"details":"You will now see a small red cross displayed on the HTTPInput node. If you hover over it you will see an error telling you there is an unset, yet mandatory, property. To fix this, right-click on the HTTPInput node and select <span class=\'uicontrol\'>Properties</span>. Focus will shift to the Properties tab which is found below the picture of the message flow itself, a few tabs to the left of the Tutorial Steps view where you are reading this text! Fill out the <span class=\'uicontrol\'>Path suffix for URL</span> property with the value <span class=\'uicontrol\'>/ExampleMessageFlow</span> being careful to include the leading slash character. Save the message flow again and the error should be resolved and the red cross on the HTTPInput node should disappear."},{"details":"Congratulations, you have just created your first message flow. Move to the Prepare section of the tutorial and we will prepare to test the flow."}]}}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Next we will test the message flow using a local integration server, which we can create from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The message flow you created should still be open in the main window. At the top of the flow canvas, click on the circular red record button (just to the right of the <span class=\'uicontrol\'>Flow Exerciser</span> text) to start the Flow Exerciser. Agree to the confirmation dialog which warns that the message flow is owned by an Application, and after a few seconds the background of the flow canvas will change to a grey colour. Another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon to create an input message."},{"details":"The Send Message dialog will open with instructions for how to create an input message. Click the New button, type some text (such as the classic <b>Hello world</b> for example!) in the Main window and click Send."},{"details":"A Progress Information dialog will appear showing the message has been sent, and a reply received. The same data should be echoed back in the reply."},{"details":"Congratulations, you have just successfully tested your first message flow! Click on the Close button and a blue line should show the path the message took between the HTTPInput and HTTPReply nodes. Use the Flow Exerciser buttons at the top of the message flow to either send more test data or to return the flow to editting mode."}]}}]}}}}},"Getting started - Creating an Integration Server":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Creating an Integration Server","shortDescription":"Learn some basics about integration servers and how to use them","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"SimpleFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating a Standalone Integration Server"},{"title":"Creating Integration Servers which are owned by an Integration Node"},{"title":"Connecting to an Integration Server"},{"title":"Deploying to an Integration Server"}],"outcomesName":"Learning outcomes","_outcomesComment":"Learn how to use Integration Servers","outcomeList":[{"title":"Understand the use of, and concepts behind, Integration Servers"},{"title":"Understand how to create, connect to and deploy a simple flow to an Integration Server"}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"An Integration Server provides an isolated runtime environment for a set of deployed message flows and resources. Each integration server runs as a unique operating system process in a separate address space. Previous versions of this software product (IBM App Connect Enterprise 11, IBM Integration Bus 10, IBM Integration Bus 9, WebSphere Message Broker 8 etc.) have had a similar concept.  IBM App Connect Enterprise 11 was the first version to allow Integration Server processes to be entirely stand-alone, and defined independently from an integration node. An integration node provides a higher level operating system process, as part of a wider process hierarchy, which is designed to look after the integration servers which are associated with the integration node.  In the past integration nodes have also taken on other responsibilities such as executing new deployments, configuring updates to the server processes and serving the product\'s administrative REST API."},{"section":"If you are planning to run the IBM App Connect Enterprise software directly on a physical machine or within a virtual machine image, then you are advised to define Integration Servers under an Integration Node."},{"section":"If you are planning to run the IBM App Connect Enterprise software in conjunction with a container framework such as Kubernetes or OpenShift, then it is the responsibility of this framework to ensure that the servers remain running (or are restarted appropriately) so in this situation using independent integration servers would be the better choice."},{"section":"Independent Integration Servers can also be very useful to quickly get up and running with the software, especially if you are working in a development phase of your project or trying out the product for the first time. This tutorial will demonstrate how to create an Integration Server under an Integration Node and as an independent process."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click  <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>SimpleApp</span> application will be imported into your workspace."},{"section":"This simple application contains a message flow which simply receives HTTP data and echoes it back to the requesting client. Once we have created an Integration Server we will deploy this example flow later in the tutorial."}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare your Integration Servers","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog. Well done, you\'ve just created a standalone Integration Server hosted locally on your own machine!"}]}},{"section":"<b>Create a second Integration Server which is owned by an Integration Node</b>","steps":{"type":"ordered","details":[{"details":"Open a new App Connect Enterprise Command Console and create an integration node using the following command:<br><code>mqsicreatebroker MyNode</code> <br>"},{"details":"Start the Integration Node using the following command:<br><code>mqsistart MyNode</code><br>"},{"details":"Create an Integration Server which is owned by the Integration Node using the following command:<br><code>mqsicreateexecutiongroup MyNode -e MyNodeOwnedServer</code><br>"},{"details":"Make a note of the administration port which the Integration Node has opened using the <code>mqsilist</code> command.<br>The response should report something like:<br><code>BIP1325I: Integration node \'MyNode\' with administration URI \'http://YourHostName:4414\' is running.</code><br>"}]}}]}},"run":{"overview":{"name":"Run","heading":"Connect your App Connect Enterprise Toolkit to your Integration Servers","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Connect to the Integration Server MyServer</b>","steps":{"type":"ordered","details":[{"details":"When using a local Integration Server created in your Toolkit, ike the one you created in this tutorial, then you don\'t need to do anything further in order to display it in the Toolkit. It is already displayed to you without you needing to explicitly connect to it. In the Toolkit, find the Integration Explorer view, and you should see the server there. By default, this is located directly below the Application Development tab in the bottom left corner."},{"details":"In future, if you ever create an Integration Server outside the Toolkit (either on your local machine, or on another machine) then in order to display it in the Toolkit, you wlil need to right click on the <span class=\'uicontrol\'>Integration Servers</span> label and select <span class=\'uicontrol\'>Connect to an Integration Server</span>. You would then enter the <span class=\'uicontrol\'>Host Name</span> and the <span class=\'uicontrol\'>port</span>. This port is the \'--admin-rest-api\' port which was used when starting the server. Your server would then appear with a green arrow showing that the server is currently running."}]}},{"section":"<b>Connect to the Integration Node MyNode</b>","steps":{"type":"ordered","details":[{"details":"Local Integration Nodes defined on the same machine as your Toolkit (like the one we created in this tutorial) will already be displayed in your Toolkit automatically! If the runtime you are using is on a different machine to your Toolkit, or if you are using the previous major version of this product on App Connect Enterprise v11.0.0.4 or earlier then you will need to follow the next three instructions to connect to an integration node."},{"details":"Still in the Integration Explorer view in the Toolkit, right click on the <span class=\'uicontrol\'>Integration Nodes</span> label and select <span class=\'uicontrol\'>Connect to an Integration Node</span>"},{"details":"Enter the <span class=\'uicontrol\'>Host Name</span> as <span class=\'uicontrol\'>localhost</span> and the <span class=\'uicontrol\'>port</span> number which was reported to you using the <span class=\'uicontrol\'>mqsilist</span> command which you ran in the Prepare section."},{"details":"Your node labelled <span class=\'uicontrol\'>MyNode</span>, and its server labelled <span class=\'uicontrol\'>MyNodeOwnedServer</span> should appear with green arrows showing that they are currently running."}]}},{"section":"<b>Deploy a simple message flow to your server</b>","steps":{"type":"ordered","details":[{"details":"Locate the Broker Archive file named <span class=\'uicontrol\'>SimpleDeploy.bar</span> inside the Application project which you imported earlier named <span class=\'uicontrol\'>SimpleApp</span>, then drag and drop it onto your standalone server named <span class=\'uicontrol\'>MyServer</span>."},{"details":"Try testing the message flow SimpleFlow by sending it data using an HTTP client such as cURL: <br><code>curl -X POST http://localhost:7800/Echo -d HelloWorld</code><br>"}]}}]}}}}},"Getting started - Creating a Simple Unit Test":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Creating a Simple Unit Test","shortDescription":"Learn how IBM App Connect Enterprise unit tests help you with rapid Test Driven Development by creating and executing a simple Java Unit Test.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MyMessageFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java Unit Testing"},{"title":"Test Projects"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to create a test case for a Mapping node in a message flow."}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial uses a simple message flow in an application that receives an XML input message over HTTP and converts the data into JSON using a Mapping node. The output JSON data is returned to the requesting client using an HTTPReply node. An example input message is provided."},{"section":"The tutorial provides the user with the message flow already constructed and describes the step-by-step instructions for writing and executing a unit test for the flow. The new test is created in a Test Project (a new project type added for the first time in IBM App Connect Enterprise 12) using the New Java Unit Test wizard. When created the unit test is run inside an independent integration server which is configured as part of the tutorial."},{"section":"In IBM App Connect Enterprise, a Test Project (which has a reference to the application under test) is a container for all the resources that are required to run unit tests. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing unit tests using Test Projects","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import a project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> to add the required project to your workspace:"},{"section":"The application named <span class=\'application\'>MyApplication</span> will be imported into your workspace."},{"section":"<span class=\'application\'>MyApplication</span> provides a single message flow named <span class=\'resource\'>MyMessageFlow</span> which receives data over HTTP."},{"section":"The HTTPInput node is configured to expect an XML message which conforms to <span class=\'resource\'>MyModel.xsd</span> although the HTTPInput node itself is not set up to validate the message immediately. The next node in the flow is a graphical mapping node which transforms the message into a JSON output. The HTTPReply node at the end of the flow returns the JSON to the requester."},{"section":"Now move to the Prepare section where we describe how to create a unit test for the flow we have just imported."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create a unit test for the mapping node in the message flow</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}},{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The imported message flow <span class=\'application\'>MyMessageFlow</span> should still be open. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and then click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>&lt;Message&gt;&lt;Child&gt;hello world&lt;/Child&gt;&lt;/Message&gt;</code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The XML will have been transformed into a JSON message and the data will have been converted to upper case:<br><code>{\\"Output\\": \\"HELLO WORLD\\"}</code>. Click close on the testing dialog"}]}},{"section":"<b>Creating the Test Case</b>","steps":{"type":"ordered","details":[{"details":"With the flow still showing in recording mode, right-click the node in the message flow named <span class=\'application\'>Mapping</span> and choose the menu option to <span class=\'application\'>Create Test Case</span>. The Create test case wizard will launch. Note that the Node location fields will already have been populated with the name of the Application, Flow, Node, Input terminal and Output terminal."},{"details":"In the section labelled <span class=\'application\'>Generated input file for constructing an input message assembly to invoke the node</span>, you will see that the recorded input message will be used when the test is generated. If you had more than one recorded message you could choose which one to use."},{"details":"In the section labelled <span class=\'application\'>Generated output file to compare against the actual output message</span>, you will see that the recorded output message will be used when the test is generated."},{"details":"In the section labelled <span class=\'application\'>Select matchers to be included in the generated test</span>, options are ticked for <span class=\'application\'>Assert node call count</span> and <span class=\'application\'>Assert terminal propagate count</span>.In the section labelled <span class=\'application\'>Select message trees to compare in the generated test</span>, the <span class=\'application\'>Message body</span> will have been selected. You can scroll through the preview pane to see what the generated unit test will look like. The preview is updated when you change the selected options on the left, but for this tutorial leave everything as the defaults, and click the <span class=\'Application\'>Finish</span> button to generate the test."},{"details":"You will find that a Test Project named <span class=\'application\'>MyApplication_Test</span> is generated for you. The generated java unit test is opened for you (you can also find it in <span class=\'application\'>MyApplication_MyMessageFlow_Mapping_0001_Test.java</span>). The project has a resources folder where your input and output data files will have been created. The generated Test Project has a project reference configured which points the Test Project at the application <span class=\'application\'>MyApplication</span>. In the next section we will describe how to run the unit test you have just created."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Run the Unit Test","steps":{"type":"ordered","details":[{"details":"In the <span class=\'Application\'>Application Development</span> view (by default in the top left of the Toolkit), locate the Test Project which you just created."},{"details":"Right click the Test Project named <span class=\'application\'>MyApplication_Test</span> and choose the option  <span class=\'application\'>Run Test Project</span>."},{"details":"After a few seconds, the Console view should be opened, which will show an independent integration server  being started in order to run the unit test. There is no deployment step required - This is taken care of for you so that the application under test, and the Test Project which we just created are automatically available to the server."},{"details":"The JUnit view will open in the top left corner (just to the right of the Application Development view and the Patterns Explorer) and will show that the test which was generated ran successfully and passed."}]}},{"section":"This tutorial has shown how to create and excute a simple Unit Test."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Unit Testing your message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Getting Started - Cloning a GitHub repository in the Toolkit":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting Started - Cloning a GitHub repository in the Toolkit","shortDescription":"Learn how to clone a repository from GitHub which contains an IBM App Connect Enterprise Toolkit project.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"ExampleRouterFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Cloning a Github repository"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"The IBM App Connect Enterprise Toolkit can be connected to a standard GitHub account from https://github.com or an Enterprise GitHub account"},{"title":"After connecting to Github, the tutorial will clone a repository containing IBM App Connect Enterprise Toolkit projects."}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial assumes you are familiar with the basic operations of GitHub version control. You are encouraged to begin by exploring https://github.com or your company\'s Enterprise GitHub capabilities before embarking on the tutorial. Note that a public repository on the standard GitHub website allows you to create public repositories, and it is also possible to create private repositories if you have a paid account.  Your company may also have its own Enterprise GitHub installation. To make the tutorial as accessible as possible, it addresses an example GitHub public repository which you can connect to and clone, but if you wish to go beyond the tutorial and push your own committed changes then you will need to research creating your own organization and repository. The tutorial describes how to clone a repository which contains a single IBM App Connect Enterprise application. You can explore the files which make up the application using a web browser to view it on the GitHub website at https://github.com/ot4i/mygitrepo"}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing an application","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"There are no creation steps for this tutorial! The purpose of this tutorial will be to connect to a Git repository and clone it by following the instructions in the <b>Prepare</b> section, and then view the results in the Application Development perspective of the Toolkit using the instructions in the <b>Run</b> section. Please move straight to the <b>Prepare</b> tab and we will begin!"}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Connect the IBM App Connect Enterprise Toolkit to a GitHub repository</b>","steps":{"type":"ordered","details":[{"details":"In the Toolkit, go to the menu <b>Window > Perspective > Open Perspective > Other</b> and in the resulting dialog, select the <b>Git</b> perspective and click Open."},{"details":"On the left side of the Toolkit screen you should see links to add a repository to the view of Git Repositories in several ways:<br><b>Add an existing local Git Repository</b><br><b>Clone a Git Repository</b><br><b>Create a new local Git repository</b><br>  In this tutorial we will choose to select the option to <b>Clone a Git repository</b>"},{"details":"It is assumed you have your own Git repository already, but just in case you don\'t, the following instructions describe how you can clone an existing Git repository from the Open Technologies for Integration organization (http://ot4i.github.io/). This repo holds an example IBM App Connect Enterprise application. You won\'t be authorized to make changes to the application (which is preserved in a known state in order to allow anyone following this tutorial to follow these steps!) but you will be able to clone a copy of the application to your machine. Fill out the fields to describe the Git Repository which you would like to clone:<br><br><b>URI:</b> <code>https://git@github.com/ot4i/mygitrepo.git</code><br><b>Host:</b> <code>github.com</code><br><b>Repository path:</b> <code>ot4i/mygitrepo.git</code><br><b>Protocol:</b> <code>https</code><br><b>User:</b> <code>Leave this blank</code><br><b>Password:</b> <code>Leave this blank</code><br><br>Click Next."},{"details":"The <b>Branch Selection</b> page will be displayed which enables you to select which branches to clone from the repository. In our example there is a single branch named <b>main</b>, whose checkbox should already be selected. Leave all the settings on this page the way they are, and click Next."},{"details":"The <b>Local Destination</b> page will be displayed which configures the local storage location for the repository on your machine. You can stick with the suggested directory location or make your own choice, for example <code>C:\\\\Users\\\\YourUserName\\\\git\\\\mygitrepo</code>. Select the option to <b>Import all existing Eclipse projects after clone finishes</b>. This option will not be selected by default, but it is stronly recommended otherwise you won\'t see anything added to your workspace once the clone finishes! Click the Finish button."},{"details":"Now move to the <b>Run</b> section of the tutorial where we will explore the results of cloning the repository."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Explore the results of cloning the GitHub repository in the Toolkit","steps":{"type":"ordered","details":[{"details":"Still in the Git perspective of the IBM App Connect Enterprise Toolkit, you should now see a tree view of the mygitrepo repository in the view of Git Repositories in the top left corner of the Toolkit. In the tree view underneath <b>mygitrepo</b> you should see children like <b>Branches</b>, <b>Tags</b>, <b>References</b>, <b>Remotes</b> and <b>Working Tree</b>. Expand <b>Working Tree</b> and locate the <b>MyExampleApplication</b> folder. Within this folder you should see the application\'s <b>.project</b> and <b>application.descriptor</b> files but we will focus on the message flow in the application which is named <b>MyExampleMessageFlow.msgflow</b>. Double click the message flow file and it will open and display an HTTP Input node wired directly to an HTTP Reply node."},{"details":"Go to the menu <b>Window > Perspective > Open Perspective > Other</b> and in the resulting dialog, select the <b>Integration Development (default)</b> perspective and click Open. In the Application Development view in the top left corner, you should see the project <b>MyExampleApplication</b>. The application will have an overlaid icon showing its associateion with a github repository. After the project name, the name of the git repository will be shown in square brackets."},{"details":"Congratulations, you have successfully connected the IBM App Connect Enterprise Toolkit to a Git repository! If you would like to fully explore the capabilities in this area, you are encouraged to now interact with a repository where you have authority to add and commit changes."}]}},{"section":"This tutorial has shown how to clone a repository from Github which contains an IBM App Connect Enterprise Toolkit project."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Unit Testing your message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Getting started - Exploring the Web UI":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Exploring the Web UI","shortDescription":"Learn some basics about administration using the Web UI","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"EventRoutingFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Connecting to the Web UI for an Integration Node"},{"title":"Connecting to the Web UI for an Integration Server (which is defined independently from an Integration Node)"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Become familiar with the key similarities and differences in the Web UI views, depending on whether you are connected to an Integration Node, or an Integration Server."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial helps you explore the App Connect Enterprise Web UI which is used for administering installations of the software product. If you are not already familiar with the concept of an Integration Node and an Integration Server, you should start by looking through another tutorial named Getting Started - Creating an Integration Server, which will help explain these concepts."},{"section":"The App Connect Enterprise Web UI contains slightly different options depending on whether you connect to an Integration Node, or an Integration Server (which is defined independently from an Integration Node). This example uses a few simple flows to populate the WebUI enough to demonstrate the basics of it."},{"section":"In this tutorial you will deploy several message flows to Integration Servers (both those associated with an Integration Node and those which are independent) and you will then use the Web UI to view what has been deployed."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, the following projects will be created in your workspace:","steps":{"type":"unordered","details":[{"details":"The Application <span class=\'application\'>Transformation_Map</span> provides a simple HTTP driven message flow which transforms an XML message."},{"details":"The Integration Service <span class=\'application\'>TemperatureConverter</span> provides an HTTP web service (based on a WSDL definition) which offers two operations for converting temperatures in celsius to fahrenheit and vice versa."},{"details":"The REST API <span class=\'application\'>CustomerDatabaseV1</span> provides a REST interface for managing a set of customer records."}]}},{"section":"These three types of project provide examples of the main kinds of integration which users deploy to the runtime. Later in the tutorial we will deploy them and view them in the Web UI. The import process also provides a Broker Archive file named <span class=\'application\'>Everything.bar</span> inside the project named <span class=\'application\'>BARfiles</span>"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an example environment","_prepareComment":"Enable resource statistics tracking:","sections":[{"section":"<b>Prepare a server to host the Web UI for administering an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Open an App Connect Enterprise Command Console and create a working directory by running the mqsicreateworkdir command:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\\\MyServer</code></li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/MyServer</code></li></ul>"},{"details":"Edit the <code>server.conf.yaml</code> file which the above command will have created in the directory <code>C:\\\\MyServer</code> on Windows, or <code>/home/exampleuser/MyServer</code> on UNIX. To turn on Basic Authentication for users logging in to the Web UI, find the line <code>&nbsp;&nbsp;#basicAuth: true</code> and uncomment the line by removing the leading # symbol. Remember to save the <code>server.conf.yaml</code> file."},{"details":"Use the mqsiwebuseradmin command to specify a web userid and password which will be used to login to the Web UI:<br><ul><li>If you are using a Windows platform: <code>mqsiwebuseradmin -w C:\\\\MyServer -c -u webuser -a password123</code></li><li>If you are using a UNIX platform: <code>mqsiwebuseradmin -w /home/exampleuser/MyServer -c -u webuser -a password123</code></li></ul>"},{"details":"Start an integration server using the following command: <br><ul><li>If you are using a Windows platform: <code>IntegrationServer --name MyServer --work-dir C:\\\\MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --name MyServer --work-dir /home/exampleuser/MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li></ul>"},{"details":"We will use a web browser to explore the Web UI in the Run section of this tutorial."}]}},{"section":"<b>Prepare a server to host the Web UI for administering an Integration Node</b>","steps":{"type":"ordered","details":[{"details":"Now create an Integration Node and create three integration servers which will be owned by it. Open a new Command Console and type:<br><code>mqsicreatebroker MyNode -P 4414</code><br><code>mqsistart MyNode</code><br><code>mqsicreateexecutiongroup MyNode -e MyNodeOwnedServer1</code><br>Repeat the final command and replace the \'MyNodeOwnedServer1\' to create a \'MyNodeOwnedServer2\', and \'MyNodeOwnedServer3\'."},{"details":"We will use a web browser to explore the Web UI in the Run section of this tutorial."}]}}]}},"run":{"overview":{"name":"Run","heading":"Explore the Web UI","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"Open a tab in a web browser and connect to the URL <code>http://localhost:7600</code>. This will present the WebUI for your standalone integration server, which we configured to use Basic Authentication.  When challenged type the username <code>webuser</code> and password <code>password123</code>.  Log-in should succeed and you should see several tabs along the top of the page (eg Contents), and a Deploy button on the right."},{"details":"Now we\'ll deploy the example BAR file using the Web UI. Click the \'Deploy\' button on the right of the page. Click on \'Select a BAR file\' and navigate to your toolkit\'s workspace. Select <code>Everything.bar</code> inside the <code>BARfiles</code> directory, and deploy it."},{"details":"Under the Contents tab you should now see the Application called Transformation_Map, the Integration Service called TemperatureConverter and the REST API called CustomerDatabaseV1. "},{"details":"Explore the other areas of the Web UI yourself.  Separate tutorials on the topic of Policies and Statistics are also provided in the Tutorials Gallery."},{"details":"Open another tab in your web browser and connect to the URL <code>http://localhost:4414</code>. This will show you information about the Integration Node named MyNode, and its three servers MyNodeOwnedServer1, MyNodeOwnedServer2 and MyNodeOwnedServer3 which you created earlier. You should see a tile representing each server, which you can click into to display their content, which will be empty to start with until you deploy something, which you might like to try!"},{"details":"In the server view of the Integration Node Web UI, on the right you will find a button labelled \'Create a Server\'. You can use this option to create another integration server which is owned by the node."}]}}]}}}}},"Getting started - Exploring the Admin REST API":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Exploring the Admin REST API","shortDescription":"Learn some basics about administration using the Admin REST API","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"EventRoutingFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Using the administrative REST API to interact with a standalone Integration Server"},{"title":"Using the administrative REST API to interact with an Integration Node and its child Integration Servers"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Learning how to find the administrative REST API and use its interactive features to directly invoke the API."},{"title":"Understand the available features of the administrative REST API"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial shows how to find the documentation for the App Connect Enterprise administrative REST API and use it to interact with Integration Servers which are associated with an Integration Node, and those which are defined independently."},{"section":"We will access the documentation which is served directly from the App Connect Enterprise runtime. The tutorial will guide you through the similarities and differences depending on whether you are communicating with an Integration Node or Integration Server. Example REST API invocations will be used to accomplish some basic tasks like creation of servers, deployment of a BAR file, and viewing descriptive information about what is running."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click Import and the <span class=\'application\'>ExampleApp</span> application project will be imported into your workspace. It contains three message flows <span class=\'application\'>HTTPEcho1</span>, <span class=\'application\'>HTTPEcho2</span> and <span class=\'application\'>HTTPEcho3</span>, and the BAR file named <span class=\'application\'>ExampleDeploy.bar</span>."}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Enable resource statistics tracking:","sections":[{"steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog. Well done, you\'ve just created a standalone Integration Server hosted locally on your own machine!"},{"details":"You can deploy the provided BAR file to your Integration Server using the Toolkit. This technique is described in several other tutorials, but to demonstrate the administrative REST API (which the App Connect Enterprise Toolkit and administrative Web UI both utilise), in this example we will deploy using the following cURL command:<br><ul><li>If you are using a Windows platform: <code>curl -X POST http://localhost:7600/apiv2/deploy --data-binary @C:\\\\YourToolkitWorkspace\\\\ExampleApp\\\\ExampleDeploy.bar  -H \\"Content-Type: application/octet-stream\\" </code> where <b>C:\\\\YourToolkitWorkspace</b> is the directory location of your App Connect Enterprise Toolkit\'s workspace.</li><li>If you are using a UNIX platform: <code>curl -X POST http://localhost:7600/apiv2/deploy --data-binary /YourToolkitWorkspace/ExampleApp/ExampleDeploy.bar</code> where <b>/YourToolkitWorkspace</b> is the directory location of your App Connect Enterprise Toolkit\'s workspace.</li></ul>"},{"details":"Open up your preferred web browser and go to this URL:<br><code>http://localhost:7600/apidocs</code><br>You will be presented a page containing comprehensive documentation on the administrative REST API, which can be used to control your Integration Server."},{"details":"Launch a separate App Connect Enterprise Command Console.  Create and start an Integration Node by typing the following commands:<br><code>mqsicreatebroker MyNode<br>&nbsp;mqsistart MyNode<br>&nbsp;mqsilist</code><br>The last mqsilist command should return a message like this:<br><code>BIP1325I: Integration node \'MyNode\' with administration URI \'http://YourHostName:YourPortNumber\' is running.</code> where YourHostName is your machine\'s hostname and YouPortNumber is an available port, starting from 4414."},{"details":"Back in your preferred web browser, open a new tab and go to your URL which will be similar to this:<br><code>http://localhost:4414/apidocs</code><br>You will be presented a similar documentation page, however there are a few key differences in the actions provided by the administrative REST API when dealing with a node as opposed to a server, which we will explore in the Run stage of the tutorial."}]}}]}},"run":{"overview":{"name":"Run","heading":"Exercise the administrative REST API","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Interact with the Integration Server:</b>","steps":{"type":"ordered","details":[{"details":"In the web browser tab for your Integration Server (http://localhost:7600/apidocs), on the left side you will see all the available actions in the API. In this part of the tutorial we will view the details for this server, view details about the deployed application, stop the deployed application and then start it again; all from within the interactive documentation."},{"details":"Click on the <code>GET /apiv2</code> tab in the list of actions. The body of the docs should change to present you with all the details on this particular action. You\'ll be presented with the description of the action, its parameters (and their structure), example requests from different languages (curl, python etc.) and examples of the standard responses. At the top of the web page, select the \'Try it\' tab."},{"details":"Here you can run the action against your server as an example. Don\'t change anything from the defaults, and just click \'Send\' in the bottom right. You will see the real request to your server and its response."},{"details":"Scroll down and inspect the JSON response, and you will see a few sections:<br> - The name and type of your server at the very top<br> - A section called \'actions\' which shows you all the valid actions which can be conducted on the server<br> - Further sections showing content which has been deployed to the server, such as \'applications\', \'restApis\', \'services\' and \'policies\', with details on whether they contain any further children."},{"details":"Run a <code>GET /apiv2/applications</code> to view the currently deployed applications. You will see the application which you deployed earlier, named \'ExampleApp\'"},{"details":"Run a <code>GET /apiv2/applications/{application}</code> (changing the Application parameter to be \'ExampleApp\') to view details about a particular deployed application."},{"details":"Run a <code>POST /apiv2/applications/{application}/stop</code> (changing the Application parameter to be \'ExampleApp\') to stop the ExampleApp application."},{"details":"Run a <code>POST /apiv2/applications/{application}/start</code> (changing the Application parameter to be \'ExampleApp\') to start the ExampleApp application."}]}},{"section":"<b>Interact with the Integration Node:</b>","steps":{"type":"ordered","details":[{"details":"In the web browser tab for your Integration Node (http://localhost:4414/apidocs) for your integration node, on the left side you will see all the available actions in the API. In this part of the tutorial we will create a server under the node, view the server\'s properties and then delete the server; all from within the interactive documentation."},{"details":"Navigate to <code>GET /apiv2/servers</code> and proceed to the \'Try it\' section. Send the request to the Integration Node and you will receive a response, showing that there are currently no child Integration Servers."},{"details":"Navigate to <code>POST /apiv2/servers</code> and proceed to the \'Try it\' section. In the Body field use the following JSON to specify the name of an integration server which will be created: <code>{\\"name\\":\\"MyNodeOwnedServer\\"}</code>. Click \'Send\' and then run another <code>GET /servers</code> to see the updated list of servers."},{"details":"Navigate to <code>GET /apiv2/servers/{server}</code> and the \'Try it\' section. Copy the name <code>MyNodeOwnedServer</code> of your newly created server into the \'Path\' field and click \'Send\'. The response at the bottom of the page will show all the properties of the newly created server."},{"details":"Navigate to <code>POST /apiv2/servers/{server}/stop</code> and the \'Try it\' section. Copy the name <code>MyNodeOwnedServer</code> of your newly created server into the \'Path\' field and click \'Send\'. This may take a while, so please be patient."},{"details":"Navigate to <code>DELETE /apiv2/servers/{server}</code> and the \'Try it\' section. Input the name of the stopped server, <code>MyNodeOwnedServer</code> and click \'Send\' to delete it."},{"details":"Run one last <code>GET /apiv2/servers</code> request to check that the server has been successfully deleted."}]}}]}}}}},"Getting started - Policy Projects and Policies":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Policy Projects and Policies","shortDescription":"Learn about configuring behavior using Policies","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"EventRoutingFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating a Policy Project"},{"title":"Creating a Policy within a Policy Project"},{"title":"Configuring a simple Policy"},{"title":"Deploying and seeing the effects of a Policy"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to create a Policy within a Policy Project, configure it and then build it into a Bar file for deployment."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to create a simple Policy within a Policy Project. The example guides you through the creation of an Activity Log Policy which is deployed alongside a simple flow. The Activity Log Policy specifies how IBM App Connect Enterprise should log activity associated with the deployed flow, saved directly to a local file."},{"section":"IBM App Connect Enterprise uses a Policy Project, which can be created in the Toolkit, to hold one or more policies. Policies are used to control connection properties and operational properties which are required by the runtime. A policy can be used by an administrator to override or abstract some specific property values. For example sensitive data  which might differ between runtime environments such as Dev / Test / Production."},{"section":"Policies can also be used to provide global properties that have wider scope than a message flow node, such as the Activity Log example in this tutorial.  To understand more about policy overrides, a separate specific tutorial on this topic has been provided."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'application\'>SimpleApp</span> application and the <span class=\'application\'>SimplePolicyProject</span> policy project will be imported into your workspace"},{"section":"This simple application contains a single messageflow named <span class=\'application\'>HTTPEcho</span> which listens for HTTP data and just echoes the same data back in response. <span class=\'application\'>SimplePolicyProject</span> contains a single policy which is of type <span class=\'application\'>Activity Log</span>. "},{"section":"Activity Log information helps you to understand what your message flows are doing by providing a high-level overview of interactions with external resources. Activity Log messages are concise and avoid technical complexity, although more information is provided in the message detail. Because the log entries are short, uncomplicated, and focused on single activities, they can be quickly scanned and understood. Patterns of behavior and changes to such patterns are easier to identify than in more extensive product trace. Activity Logs can be written to a circular file system. The ActivityLog policy is used to set up file logging if you want continuous logging of activities over a long period. In the next section we will deploy the policy and message flow and observe their behavior."}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Enable resource statistics tracking:","sections":[{"steps":{"type":"ordered","details":[{"details":"Open the policy named <span class=\'application\'>MyActivityLogPolicy.policyxml</span> inside the <span class=\'application\'>SimplePolicyProject</span>. If you are using ACE 12.0.2.0 or higher, you will see a pop-up message which informs you that new policy properties have been added to the product since this policy was first created. Click OK so that the new properties will be added to the policy. The new properties relate to sending Activity Log to ELK, so are not directly used by this tutorial, but it does no harm to have them present in the policy just in case you wish to go beyond the tutorial and try out these aspects for yourself!"},{"details":"Edit the <code>File name</code> property of the policy:<br><ul><li>If you are using a Windows platform, set the <code>File name</code> property value to <code>C:\\\\MyServer\\\\ActivityLog.txt</code> and save the policy.</li><li>If you are using a UNIX platform, set the <code>File name</code> property value to <code>/MyServer/ActivityLog.txt</code> and save the policy.</li></ul>"},{"details":"Create a Broker Archive file named <span class=\'application\'>SimpleDeploy.bar</span>"},{"details":"Build the application and policy projects into the BAR file:<br> - Select the Applications radio button and select the <span class=\'application\'>SimpleApp</span> application<br> - Select the Policies radio button and select the <span class=\'application\'>SimplePolicyProject</span><br> - Click the \'Build and Save\' button to generate the contents in the BAR file."},{"details":"<b>(OPTIONAL)</b> Create a local integration server in the Toolkit ready for testing the scenario (scroll down for a documentation link in the <b>Find out more</b> section). Then move to the Run part of the tutorial, or alternatively if you prefer to use an integration server outside of the Toolkit you can open an IBM App Connect Enterprise Command Console and keep following the instructions on this Prepare tab to create a server outside the Toolkit."},{"details":"<b>(OPTIONAL ALTERNATIVE. Do this step if you did not run step 5)</b> Create a working directory by running the mqsicreateworkdir command:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\\\MyServer</code></li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/MyServer</li></ul>"},{"details":"<b>(OPTIONAL ALTERNATIVE. Do this step if you did not run step 5)</b> Start an Integration Server by typing the following command into the Command Console:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --name MyServer --work-dir C:\\\\MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --name MyServer --work-dir /home/exampleuser/MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li></ul>"},{"details":"Connect to the Integration Server from the Integration Explorer view in the Toolkit, then drag and drop deploy the <span class=\'application\'>SimpleDeploy.bar</span>"}]}}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Creating and starting a local, independent integration server by using the Toolkit","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn04040_.html","type":"web"},{"title":"IBM Documentation link to ","description":"Creating a BAR file","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/af03870_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Adding resources to a BAR file","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/af03880_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Starting an integration server","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/be10140_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Follow the following steps to complete the tutorial.","steps":{"type":"ordered","details":[{"details":"Test the message flow by sending HTTP data to it using a client such as cURL:<br><code>curl -X POST http://localhost:7900/HTTPEcho -d HelloWorld</code><br>The message flow should echo back the same HelloWorld message to the HTTP client. Repeat this test a few times."},{"details":"Navigate to the directory location which was specified when editting the Activity Log policy:<br><ul><li>If you are using a Windows platform, navigate to <code>C:\\\\MyServer</code> and you should see a text file with the name ActivityLog.txt</li><li>If you are using a UNIX platform, navigate to <code>/MyServer</code> and you should see a text file with the name ActivityLog.txt</li></ul>"},{"details":"Open this file in your preferred text editor and you should see log entries formatted as comma separated data. Each log line corresponds to one of the curl requests which you just made."},{"details":"This concludes our simple example demonstrating how to use an Activity Log Policy."}]}}]}}}}},"Getting started - Policy Projects and Policies with Overrides":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Policy Projects and Policies with Overrides","shortDescription":"Learn about configuring behavior using Policies and the hierarchy of policy overrides","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"SimpleFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating a Policy Project and a simple Policy"},{"title":"Deploying policies in a BAR file"},{"title":"Overriding behavior by copying policies directlty on to the runtime file system"}],"outcomesName":"Learning outcomes","_outcomesComment":"Learn how to use Integration Servers effectively in ACE v11","outcomeList":[{"title":"Understand the use of policies"},{"title":"Understand the hierarchy of policy overrides and the concept of a default policy project"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"App Connect Enterprise uses a Policy Project, which can be created in the Toolkit, to hold one or more policies. Policies are used to control connection properties and operational properties which are required by the ACE runtime."},{"section":"A policy can be used to provide values which override the properties of message flow nodes. This is helpful for properties which are likely to differ across different runtime environments such as Dev / Test / Production as it avoids having to change the message flow itself when promoting it between environments."},{"section":"A policy can be used to abstract the definition of message flow node properties which may include sensitive data that a developer (unlike an administrator) may not have access to."},{"section":"Policies can be used to provide global properties that have wider scope than a message flow node. For example, a user can define an Activity Log policy which defines the name of a file to which activity log records should be written."},{"section":"This tutorial uses a simple message flow which receives data over HTTP and sends an Email output. The EmailOutput message flow node is configured to use an SMTP Policy which is deployed using a BAR file. The tutorial demonstrates how to refer to the policy from the EMailOutput message flow node, how you can override policies, and the concept of a default policy project."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import an application and create a policy project with an SMTP policy","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"Click  <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>HTTPInputEmailOutput</span> application will be imported into your workspace."},{"details":"Open the HTTPInputEmailOutput message flow and look at the EmailOutput node\'s properties. Note that the Basic property tab has a property named <span class=\'uicontrol\'>SMTP Server and Port</span> which addresses <code>{MyPolicyProject}:MySMTPPolicy</code>"},{"details":"On the Email property tab, note that the property named <span class=\'uicontrol\'>To Addresses</span> specifies a value of <code>anyobscurenameyouwant@mailinator.com</code>. You can optionally change this if you want. This is the email address to which an email will be sent (from your SMTP email provider)"},{"details":"On the Email property tab, change the property named <span class=\'uicontrol\'>From Address</span> to be your email address from which you intend the email to be sent (when ACE connects to your SMTP server)"},{"details":"Create a Policy project named <span class=\'uicontrol\'>MyPolicyProject</span> using the New link in the top right corner of the Application Development view."},{"details":"Create a Policy named <span class=\'uicontrol\'>MySMTPPolicy</span> of type SMTP (click the New link which appeared inside the empty project you just created).  Set the <span class=\'uicontrol\'>SMTP server name</span> to be your SMTP server. For example, smtp.hursley.ibm.com:25 Set the <span class=\'uicontrol\'>Security identity</span> to be the hardcoded string <code>GoodIdentity</code> (this value will be mapped to your actual identity using the mqsisetdbparms command in the later steps)"}]}}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create and Configure an Integration Server","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"Open an App Connect Enterprise Command Console and run the mqsicreateworkdir command to prepare a work directory for an integration server:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\\\MyServer</code></li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/MyServer</li></ul>"},{"details":"Run the mqsisetdbparms command to define the identity which ACE will use when communicating with your SMTP server:<br><ul><li>If you are using a Windows platform: <code>mqsisetdbparms -w C:\\\\MyServer -n smtp::GoodIdentity -u YourSMTPUserId -p YourSMTPPassword</code><br>where <b>C:\\\\MyServer</b> is a folder on your file system, created in the command above, that the server will use for its working directory.</li><li>If you are using a UNIX platform: <code>mqsisetdbparms -w /home/exampleuser/MyServer -n smtp::GoodIdentity -u YourSMTPUserId -p YourSMTPPassword</code><br>where <b>/home/exampleuser/MyServer</b> is a folder on your file system, created in the command above, that the server will use for its working directory.</li></ul>"},{"details":"Now, start the integration server using the following command:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\\\MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li></ul>"},{"details":"After a few seconds the server should report that it has finished initialization and that its HTTP Listener has started listening for connections."}]}}]}},"run":{"overview":{"name":"Run","heading":"Run three separate examples to demonstrate policy identification and overrides","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Learn how the {PolicyProject}:Policy syntax can address a deployed policy</b>","steps":{"type":"ordered","details":[{"details":"In the App Connect Enterprise Toolkit, connect to your Integration Server <span class=\'uicontrol\'>MyServer</span> on localhost:7600. Create a Broker Archive file, for example named <span class=\'uicontrol\'>HTTPInputEmailOutput.bar</span> inside the <span class=\'uicontrol\'>HTTPInputEmailOutput</span> application project which you imported earlier.  Once you have created the BAR file, you need to add to it both the <span class=\'uicontrol\'>HTTPInputEmailOutput</span> application and the <span class=\'uicontrol\'>MyPolicyProject</span> policy project. Remember to click the <span class=\'uicontrol\'>Build and Save</span> button on the BAR editor\'s prepare tab."},{"details":"Drag and drop deploy the <span class=\'uicontrol\'>HTTPInputEmailOutput.bar</span> BAR file onto <span class=\'uicontrol\'>MyServer</span>."},{"details":"Test the message flow by sending HTTP data to it using a client such as cURL: <br><code>curl -X POST http://localhost:7900/HTTPInputEmailOutput -d HelloWorld</code><br>"},{"details":"The message flow should echo back the same message to the HTTP client, but you should find that the flow\'s email Output node has successfully found the SMTP policy you deployed, which in turn used the abstracted userid and password which was defined using mqsisetdbparms, and an email will have been successfully sent. Check this is the case. If you are using mailinator for this purpose, you can open the public mailbox using a web browser and a URL like this:<br><code>http://www.mailinator.com/v2/inbox.jsp?zone=public&query=anyobscurenameyouwant</code>"}]}},{"section":"<b>Learn how unqualified policy names won\'t be resolved, if you haven\'t defined a default policy project</b>","steps":{"type":"ordered","details":[{"details":"Delete all resources which have previously been deployed. Open the HTTPInputEmailOutput message flow and on the EmailOutput node\'s Basic property tab edit the property named <span class=\'uicontrol\'>SMTP Server and Port</span> to take the value <code>MySMTPPolicy</code> (so it is no longer qualified by the name of the policy project)."},{"details":"Open the  <span class=\'uicontrol\'>HTTPInputEmailOutput.bar</span> BAR file and click the <span class=\'uicontrol\'>Build and Save</span> button on the BAR editor\'s prepare tab. Drag and drop deploy the updated BAR file."},{"details":"Repeat the test of the message flow by sending HTTP data to it using a client such as cURL, and this time you will note that an exception is reported in the command console window where the IntegrationServer is running. This exception occurs because having deleted the Policy Project qualifier, the EmailOutput node\'s policy can no longer be located. In this circumstance, the <span class=\'uicontrol\'>SMTP Server and Port</span> property has been interpreted as a literal hard-coded SMTP server hostname, which of course cannot be connected to."}]}},{"section":"<b>Learn how unqualified policy names will be resolved, if you have defined a default policy project</b>","steps":{"type":"ordered","details":[{"details":"Delete all resources which have previously been deployed and then stop the Integration Server using CTRL-C in the command console window where it is running."},{"details":"Look inside your integration server\'s work directory on the file system (at <code>C:\\\\MyServer</code> on Windows and at <code>/home/exampleuser/MyServer</code> on UNIX) and edit the <code>server.conf.yaml</code> file. Find this line:<br><code>  #policyProject: \'DefaultPolicies\'   # Name of the Policy project that will be used for unqualified Policy references</code><br>... and change it to become ...<br><code>  policyProject: \'MyPolicyProject\'   # Name of the Policy project that will be used for unqualified Policy references </code>"},{"details":"From your App Connect Enterprise Toolkit\'s workspace directory on the file system, copy the <code>MyPolicyProject</code> project (which is a directory on your file system) into your Integration Server\'s overrides directory. If you have followed this tutorial\'s suggested naming conventions then this directory will end up at <code>C:\\\\MyTestServer\\\\overrides\\\\MyPolicyProject</code> on Windows and at <code>/home/exampleuser/MyServer/overrides/MyPolicyProject</code> on UNIX. Restart your integration server."},{"details":"Back in the App Connect Enterprise Toolkit, create a new BAR file, for example named  <span class=\'uicontrol\'>HTTPInputEmailOutput2.bar</span>, and build it to <strong>just</strong> contain the application <span class=\'uicontrol\'>HTTPInputEmailOutput</span> and NOT the policy project   <span class=\'uicontrol\'>MyPolicyProject</span>. Deploy the new BAR file."},{"details":"Retest the message flow using cURL just as you have done before and note that it will now send the email again successfully. This has demonstrated the fact that on message flow node properties, App Connect Enterprise will look for unqualified policies in the default policy project which you can configure for your server using the server.conf.yaml file."}]}}]}}}}},"Getting started - Message Flow Statistics":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Message Flow Statistics","shortDescription":"Learn how to view performance information using Message Flow Statistics","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"EventRoutingFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Finding and editing the server\'s configuration file"},{"title":"Accessing the WebUI"},{"title":"Viewing the message flow statistics panels"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to locate the server\'s configuration file, turn on message flow statistics and view them in real-time using the Web UI."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial shows how to turn on message flow statistics and then view the statistics information in real-time using the IBM App Connect Enterprise administrative Web UI. This tutorial uses a simple message flow deployed to an integration server in order to demonstrate these concepts."},{"section":"A configuration file, known as \'server.conf.yaml\', is used to control the integration server\'s statistics settings. In this example we will only focus on the statistics settings in this file, but many other options are available in order to control the server\'s configuration."},{"section":"Once an integration server has been created with statistics enabled, a simple flow will be deployed. A few messages will be sent to the message flow over HTTP, before launching the product\'s administrative Web UI where the statistics can be viewed in real-time."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'application\'>StatsApp</span> application will be imported into your workspace."},{"section":"This simple application contains a message flow which receives HTTP data and echoes it back to the requesting client. Once we have created an Integration Server we will deploy this example flow later in the tutorial. This flow will enable us to respond to some small load on the integration server as we view the server\'s performance statistics in the Web UI."}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Enable message flow statistics","sections":[{"steps":{"type":"ordered","details":[{"details":"Open an App Connect Enterprise Command Console and run the mqsicreateworkdir command to create a working directory which will be used to store the files which the runtime integration server needs:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\\\StatsServer</code><br> where <b>C:\\\\StatsServer</b> will be the working directory for your integration server.</li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/StatsServer</code><br> where <b>/home/exampleuser/StatsServer</b> will be the working directory for your integration server.</li></ul>"},{"details":"Navigate to your server\'s working directory (<code>C:\\\\StatsServer</code> in Windows and <code>/home/exampleuser/StatsServer</code> on UNIX) and locate the file <span class=\'uicontrol\'>server.conf.yaml</span>. Open it using your preferred text editor, locate the Statistics section and edit the settings (the comments in the sample help with allowed values, and you will need to remove some # comment characters). Prior to IBM App Connect Enterprise 11.0.0.8, statistics settings were not turned on by default, but now they are:<br><code>Statistics:&nbsp;<br>&nbsp;&nbsp;Snapshot:&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;accountingOrigin: \'basic\'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;nodeDataLevel: \'advanced\'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;outputFormat: \'json\'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;publicationOn: \'active\'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;threadDataLevel: \'basic\'&nbsp;</code><br> Save and close the file."},{"details":"Back in the App Connect Enterprise Command Console window, start the server:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\\\StatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/StatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li></ul>"},{"details":"In the App Connect Enterprise Toolkit, locate the Integration Explorer view (by default this is located in the bottom left corner), right click on the <span class=\'uicontrol\'>Integration Servers</span> label and select <span class=\'uicontrol\'>Connect to an Integration Server</span>. Enter the <span class=\'uicontrol\'>Host Name</span> as <span class=\'uicontrol\'>localhost</span> and the <span class=\'uicontrol\'>port</span> as <span class=\'uicontrol\'>7600</span> and click <span class=\'uicontrol\'>Finish</span>."},{"details":"Locate the Broker Archive file named <span class=\'uicontrol\'>StatsBar.bar</span> inside the Application project which you imported earlier named <span class=\'uicontrol\'>StatsApp</span>, then drag and drop it onto your server named <span class=\'uicontrol\'>StatsServer</span>."},{"details":"Right click on the server in the Toolkit and select <span class=\'uicontrol\'>Start Web User Interface</span>"}]}}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Send some messages to the message flow and view statistics in the Web User Interface","steps":{"type":"ordered","details":[{"details":"Navigate to a Command Prompt and run this command a handful of times:<br><code>curl -X POST http://localhost:7800/request -d HelloWorld</code><br>Each execution should receive the same fixed reply message:<br><code>{\\"OutputMessage\\":\\"This is a fixed reply message!\\"}</code>"},{"details":"Return to the administrative WebUI for the server which you opened in the Prepare stage."},{"details":"When you first open the WebUI you will be looking at information at the Server level. Select the <span class=\'uicontrol\'>Flow Statistics</span> tab on the navigation bar at the top."},{"details":"After a brief pause you should see a tabular <span class=\'uicontrol\'>Message flow statistics</span> view which summarises activity at the flow level. Notice that the value in the <span class=\'uicontrol\'>Total input messages</span> column corresponds to the number of curl requests you made to the server."},{"details":"To get a more detailed view of how data is passing through your flows, change to the <span class=\'uicontrol\'>Flow node statistics</span> view to see a breakdown for each node in the flow. To navigate to this view, click on the <span class=\'uicontrol\'>StatsFlow</span> link in the <span class=\'uicontrol\'>Flow name</span> column, and the UI will show the message flow\'s properties. Next click on the <span class=\'uicontrol\'>Flow statistics</span> tab and you will see some graphs which you may like to explore."},{"details":"When you\'re ready to conclude this tutorial, stop the Integration Server in the Command Console and close your browser."}]}}]}}}}},"Getting started - Resource Statistics":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Getting started - Resource Statistics","shortDescription":"Learn how to view performance information using Resource Statistics","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"EventRoutingFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Finding and editing the server\'s configuration file"},{"title":"Accessing the WebUI"},{"title":"Viewing the resource statistics graphs"},{"title":"Configuring the FileInput and FileOutput message flow nodes"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to locate the server\'s configuration file, turn on resource statistics and view them in real time using the Web UI. "}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial shows how to turn on resource statistics and then view the statistics information in real-time using the IBM App Connect Enterprise administrative Web UI. This tutorial uses a message flow containing a FileInput and FileOutput message flow node to demonstrate these concepts."},{"section":"A configuration file, known as \'server.conf.yaml\', is used to control the integration server\'s resource statistics settings. In this example we will only focus on the resource statistics settings in this file, but many other options are available in order to control the server\'s configuration. "},{"section":"Once an integration server has been created with resource statistics enabled, a simple message flow will be deployed and sent an input file for processing. The resource statistics regarding the file transfer inbound and outbound (statistics for Files Read, Records Read, Bytes Read, Files Created, Records Written, Bytes Written) will be viewed in real-time using the product\'s administrative Web UI. "}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDL Schemas","link":"http://github.com/DFDLSchemas","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'application\'>Import</span> and the <span class=\'application\'>ResourceStatsApp</span> application will be imported into your workspace. The project contains a message flow named <span class=\'application\'>FileRecordSplitter</span>, and the BAR file <span class=\'application\'>ResourceStatsDeploy.bar</span>."},{"section":"The message flow is designed to read in a file, record by record, splitting the records from one another using the end of line character.  Each record contains either a JSON or XML structure. The message flow examines the first character of the line in order to decide which one it is, and routes it to the relevant FileOutput node. Each output file name is provided a number which reflects the line number of the record in the input file. This scenario lets us view varying File resource statistics in the web UI."}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Enable resource statistics tracking:","sections":[{"section":"You can use resource statistics with node owned integration servers and also independent integration servers. In this tutorial we will use an independent integration server.","steps":{"type":"ordered","details":[{"details":"Open an App Connect Enterprise Command Console and create a working directory for an Integration Server using the following command: :<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\\\ResourceStatsServer</code><br> where <b>C:\\\\ResourceStatsServer</b> will be the working directory for your integration server.</li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/ResourceStatsServer</code><br> where <b>/home/exampleuser/ResourceStatsServer</b> will be the working directory for your integration server.</li></ul>"},{"details":"Navigate to your working directory and locate the file \'server.conf.yaml\' (following the above suggestion, this will be <code>C:\\\\ResourceStatsServer</code> on Windows and <code>/home/exampleuser/ResourceStatsServer</code> on UNIX). Open it using your preferred text editor, locate the Resource Statistics section and edit the settings (the comments in the sample help with allowed values, and you may need to remove some # comment characters). Prior to IBM App Connect Enterprise 11.0.0.8, statistics settings were not turned on by default, but now they are:<br><code>Statistics<br>&nbsp;&nbsp;Resource:<br>&nbsp;&nbsp;&nbsp;&nbsp;reportingOn: true</code><br>Save and close the file."},{"details":"In the Command Console, start an Integration Server:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\\\ResourceStatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/ResourceStatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li></ul> Connect to the integration server from your Toolkit\'s Integration Explorer view (in the bottom left corner by default)."},{"details":"In the Toolkit, open the message flow <span class=\'application\'>FileRecordSplitter</span>. Examine the FileInput node properties, and on the Basic properties tab edit the <code>Input Directory</code> property to a local directory on your file system. By default this has been set to <code>C:\\\\ResourceStatsInput</code>, but on UNIX for example you might choose <code>/home/exampleuser/ResourceStatsInput</code>. Do the same thing for the two FileOutput nodes, whose output directory has been defaulted to <code>C:\\\\ResourceStatsOutput</code>, but on UNIX for example you might choose <code>/home/exampleuser/ResourceStatsOutput</code>. From the Application Development view in the Toolkit, drag and drop deploy the project <span class=\'application\'>ResourceStatsApp</span>, to the server."},{"details":"Right click on the server in the Toolkit and select <span class=\'application\'>Start Web User Interface</span>."}]}}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Follow the following steps to complete the tutorial.","steps":{"type":"ordered","details":[{"details":"Open a web browser to view the Web UI for the server (http://localhost:7600) and navigate to the display of \'Resource Statistics\'. For detailed navigation help, please refer to the <a href=\\"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bj43320_.html\\">IBM Documentation</a> tab on the top navigation bar. When statistics start to appear, view the \'File\' statistics."},{"details":"From your Toolkit workspace, look inside the <span class=\'application\'>ResourceStatsApp</span> project and copy the provided input file <span class=\'application\'>InputData.txt</span> and paste it into the input directory on your file system."},{"details":"Check the output file directory, and you should find several JSON output files and several XML output files. Open these and view the contents if you wish."},{"details":"Return to the Web UI for the server, and after a moment you should see several graphs with file statistics (such as Files Read, Records Read, Bytes Read, Files Created, Records Written, Bytes Written) begin to rise with direct correlation to the amount of data read, processed and written by the server."}]}}]}}}}},"Optimizing the startup time of an independent Integration Server":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Optimizing the startup time of an independent Integration Server","shortDescription":"Learn how to optimize the startup time of an independent integration server using the ibmint command (requires v12.0.4.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Command: ibmint optimize server"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Speed up the start time for an independent integration server running in a container, by determining functions of the server which are not required using the ibmint optimize command."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"","sections":[{"section":"This tutorial demonstrates how the ibmint command can be used to optimize the startup time for an independent integration server. The purpose of optimization is to speed up server startup in cloud container environments. The techniques discussed here only apply to independent integration servers and are not suitable for integration servers that are managed by an integration node. Server optimization is suitable when the server content is fixed and it is desireable to reduce the startup time of the process to be as short as possible based upon the server\'s current settings and content. The tutorial provides a simple example message flow which will be deployed and tested using a local independent integration server, initially created in the Toolkit. The tutorial then switches to a Command Console where the ibmint command will be used to demonstrate the process of optimizing startup. The tutorial deliberately breaks down the optimization task into two separate stages, in order to better identify and explain some of the most frequently used options. The first optimization stage demonstrates how the server itself can decide which components are unnecessary (based upon the server\'s configuration and deployed content). The second optimization stage goes a step further and demonstrates the impact of switching off the server\'s use of NodeJS, which causes a further speeding of startup, at the cost of switching off administrative API (and therefore Web UI) access to the server."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Optimizing the startup time for an independent integration server","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=solutions-optimizing-startup-time-independent-integration-server","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleApplication</span>"},{"section":"<span class=\'application\'>ExampleApplication</span> provides a single message flow named <span class=\'application\'>ExampleFlow</span> which is driven by an HTTP input, converts a JSON format message into an XML format message using a Compute node, and then sends the data back to the requesting HTTP client. The main purpose of the tutorial is not focussed around the development or function of the flow, but rather the process of optimizing an independent integration server which has had the message flow deployed."},{"section":"<span class=\'uicontrol\'>HTTP Input</span>: An Input node that receives an input message across HTTP in JSON format."},{"section":"<span class=\'uicontrol\'>Compute</span>: A Compute node that converts the JSON data into the XMLNSC domain, and reformats its data to be uppercase."},{"section":"<span class=\'uicontrol\'>HTTP Reply</span>: A Reply node that returns the XML message across HTTP."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and testedusing the Toolkit\'s built-in Flow Exerciser. Once tested, the server will be optimized and we will observe the impact on the process startup time."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Optimizing the startup time for an independent integration server","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=solutions-optimizing-startup-time-independent-integration-server","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"The following steps help you to prepare your environment ready for running the message flow.","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values."},{"details":"<b>It is important to select the default options for this wizard</b>, because we will be comparing the start-up times with these default options to the optimized server configuration later in the tutorial.Click Finish on the dialog and the local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."},{"details":"Right-click the integration server you just created (named TEST_SERVER) and choose the option to <code>Open Console Log</code>. The console will show several messages for the starting of the server, similar to the following output:<br><br><code>2022-03-28 14:55:56.064716: BIP1990I: Integration server \'TEST_SERVER\' starting initialization; version \'12.0.4.0\' (64-bit)<br>2022-03-28 14:55:56.091108: BIP9905I: Initializing resource managers. <br>Listening for transport dt_socket at address: 9997<br>2022-03-28 14:56:02.801710: BIP9906I: Reading deployed resources. <br>2022-03-28 14:56:03.641175: BIP2866I: IBM App Connect Enterprise administration security is inactive. <br>2022-03-28 14:56:03.655721: BIP3132I: The HTTP Listener has started listening on port \'7600\' for \'RestAdmin http\' connections. <br>2022-03-28 14:56:03.661341: BIP1991I: Integration server has finished initialization.</code><br>In this example, on the particular machine this was captured from, note that the integration server started up relatively slowly, in approximately 7.5 seconds. Of course, precise timings may vary dependent on the speed of your hardware. This startup time will reduce significantly when we optimize the server later in the tutorial."},{"details":"Next you will use the Flow exerciser to send HTTP requests to the message flow."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the message flow","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ExampleFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. One saved message is provided, named InputJSON, which can be used to invoke the HTTP Input node..."},{"details":"The input message <span class=\'resource\'>Input1</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"message\\": \\"hello world\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive an XML reply message structured like this:<br><code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;&lt;Message&gt;HELLO WORLD&lt;Message&gt;<br></code><br>After you close the dialog, the path taken through the message flow will be highlighted."},{"details":"Now we have tested the message flow, we will optimize the server startup to match the content of the configured integration server. Before progressing to the next set of instructions, please STOP your integration server from the Toolkit. Click the Return Flow to Edit mode button, and then righ-click TEST_SERVER and select Stop. The next stages involve interacting with the integration server\'s work directory and ensuring the server is stopped will avoid any of the files being locked by another process."}]}},{"section":"<h4>Open a Command Console","steps":{"type":"ordered","details":[{"details":"Open an IBM App Connect Enterprise command console and execute the following command, using the file system location of your Toolkit workspace in place of &lt;Your Toolkit Workspace Location&gt;<br><code>ibmint optimize server --work-directory &lt;Your Toolkit Workspace Location&gt;\\\\TEST_SERVER --verbose</code><br><br>The response should look like this:<br><code>BIP15243I: Analyzing server configuration.<br>BIP15257I: The component \'NodeJS\' is required for YAML configuration setting \'RestAdminListener/port\' with value \'7600\'.<br>BIP15244I: Analyzing application \'ExampleApplication\'.<br>BIP15250I: Analyzing message flow \'ExampleFlow\'.<br>BIP15251I: Analyzing message flow node \'HTTP Input\'.<br>BIP15251I: Analyzing message flow node \'HTTP Reply\'.<br>BIP15251I: Analyzing message flow node \'Compute\'.<br>BIP15254I: The component \'Nodes/ESQL\' is required for message flow node \'Compute\' of type \'ComIbmCompute\'.<br>BIP15255I: The component \'Nodes/ESQL\' is required for deployed resource \'ExampleFlow_Compute.esql\'.<br>BIP15237I: The components file \'&lt;Your Toolkit Workspace Location&gt;\\\\TEST_SERVER\\\\server.components.yaml\' was created. It may be further edited if required.<br>BIP8071I: Successful command completion.</code><br>"},{"details":"The optimization process generates a configuration file named <code>server.components.yaml</code> <b>(not to be confused with server.conf.yaml!)</b> which is written to the root of the server\'s working directory. Locate this file and explore its contents. For reference, it should look like this:<br><code>---<br>optimizeComponents: 40<br>optimizeVersion: \'12.0.4.0\'<br>reportExcludedComponents: true<br>serverComponentsVersion: 1<br>CLR: false<br>Deploy: false<br>JVM: false<br>NodeJS: true<br>Nodes: <br>&nbsp;&nbsp;.NET: false<br>&nbsp;&nbsp;Aggregation: false<br>&nbsp;&nbsp;Basic: false<br>&nbsp;&nbsp;CallableFlow: false<br>&nbsp;&nbsp;Connector: false<br>&nbsp;&nbsp;ESQL: true<br>&nbsp;&nbsp;Group: false<br>&nbsp;&nbsp;JMSTransform: false<br>&nbsp;&nbsp;MQ: false<br>&nbsp;&nbsp;REST: false<br>&nbsp;&nbsp;SecurityPEP: false<br>&nbsp;&nbsp;Timer: false<br>JavaNodes: <br>&nbsp;&nbsp;Adapters: false<br>&nbsp;&nbsp;CICS: false<br>&nbsp;&nbsp;CORBA: false<br>&nbsp;&nbsp;Collection: false<br>&nbsp;&nbsp;Email: false<br>&nbsp;&nbsp;File: false<br>&nbsp;&nbsp;IMS: false<br>&nbsp;&nbsp;JDBC: false<br>&nbsp;&nbsp;JMS: false<br>&nbsp;&nbsp;JavaCompute: false<br>&nbsp;&nbsp;Kafka: false<br>&nbsp;&nbsp;MQTT: false<br>&nbsp;&nbsp;Mapping: false<br>&nbsp;&nbsp;ODM: false<br>&nbsp;&nbsp;TCPIP: false<br>&nbsp;&nbsp;WSRR: false<br>&nbsp;&nbsp;XSLT: false<br>JavaScriptNodes: <br>&nbsp;&nbsp;LoopBack: false<br>&nbsp;&nbsp;Salesforce: false<br>ResourceManagers: <br>&nbsp;&nbsp;FTE: false<br>&nbsp;&nbsp;GlobalCache: false<br>FlowSecurityProviders: <br>&nbsp;&nbsp;LDAP: false<br>&nbsp;&nbsp;TFIM: false<br>&nbsp;&nbsp;WS-Trust: false</code><br>As you can see, in this particular example there are many parts of the integration server which do not need to be started, hence many entries with the value false in the list! In real-life scenarios, the greater the diversity of artifacts which you have deployed to an integration server, the larger the number of its capabilities which will need to be left switched on.  In particular, note that the list above has top level settings which apply to the <code>CLR</code>, <code>Deploy</code>, <code>JVM</code> and <code>NodeJS</code>. Each of these capabilities has been switched off apart from NodeJS. NodeJS is required in order to support the integration server\'s administrative web UI. We will discuss this further in the second optimization stage."},{"details":"We will now observe the impact of optimization. Staying in the Command console session, start up the integration server using the following command:<br><code>IntegrationServer --work-directory &lt;Your Toolkit Workspace Location&gt;\\\\TEST_SERVER</code><br><br>The output of the command will look like this:<br><code>2022-03-28 15:17:16.387726: The components file \'server.components.yaml\' is being loaded from the workpath \'&lt;Your Toolkit Workspace Location&gt;\\\\TEST_SERVER\'.<br>2022-03-28 15:17:16.503410: BIP1990I: Integration server \'TEST_SERVER\' starting initialization; version \'12.0.4.0\' (64-bit)<br>2022-03-28 15:17:16.535048: BIP9905I: Initializing resource managers.<br>2022-03-28 15:17:16.538193: BIP9397I: The runtime component \'JVM\' has not been created.<br>2022-03-28 15:17:16.707109: BIP9397I: The runtime component \'GlobalCache\' has not been created.<br>2022-03-28 15:17:16.715311: BIP9397I: The runtime component \'.NET CLR\' has not been created.<br>2022-03-28 15:17:16.740501: BIP9398I: The resources from \'imbcallableflow.lil\' have not been loaded.<br>2022-03-28 15:17:16.748163: BIP9398I: The resources from \'imbdfagg.lil\' have not been loaded.<br>2022-03-28 15:17:16.752472: BIP9398I: The resources from \'imbdfbas.lil\' have not been loaded.<br>2022-03-28 15:17:16.756865: BIP9398I: The resources from \'imbdfcon.lil\' have not been loaded.<br>2022-03-28 15:17:16.828112: BIP9398I: The resources from \'imbdfdotnet.lil\' have not been loaded.<br>2022-03-28 15:17:16.834870: BIP9398I: The resources from \'imbdfjmt.lil\' have not been loaded.<br>2022-03-28 15:17:16.842722: BIP9398I: The resources from \'imbdfmqm.lil\' have not been loaded.<br>2022-03-28 15:17:16.849632: BIP9398I: The resources from \'imbdftcpip.lil\' have not been loaded.<br>2022-03-28 15:17:16.863560: BIP9398I: The resources from \'imbfte.lil\' have not been loaded.<br>2022-03-28 15:17:16.876128: BIP9398I: The resources from \'imbgroupnodes.lil\' have not been loaded.<br>2022-03-28 15:17:16.930120: BIP9398I: The resources from \'imbpep.lil\' have not been loaded.<br>2022-03-28 15:17:16.935818: BIP9398I: The resources from \'imbrestlil.lil\' have not been loaded.<br>2022-03-28 15:17:16.944274: BIP9398I: The resources from \'imbtimer.lil\' have not been loaded.<br>2022-03-28 15:17:16.954804: BIP9397I: The runtime component \'Salesforce\' has not been created.<br>2022-03-28 15:17:16.963460: BIP9397I: The runtime component \'Loopback\' has not been created.<br>2022-03-28 15:17:16.967450: BIP9397I: The runtime component \'MQTT\' has not been created.<br>2022-03-28 15:17:16.982356: BIP9397I: The runtime component \'KAFKA\' has not been created.<br>2022-03-28 15:17:16.999242: BIP9397I: The runtime component \'CICS XA\' has not been created.<br>2022-03-28 15:17:17.013116: BIP9398I: The resources from \'ldapSecurityProvider.lsl\' have not been loaded.<br>2022-03-28 15:17:17.025392: BIP9398I: The resources from \'tfimSecurityProvider.lsl\' have not been loaded.<br>2022-03-28 15:17:17.029930: BIP9398I: The resources from \'wstrustSecurityProvider.lsl\' have not been loaded.<br>2022-03-28 15:17:17.606684: BIP9906I: Reading deployed resources.<br>2022-03-28 15:17:17.619090: BIP9907I: Initializing deployed resources.<br>2022-03-28 15:17:17.625452: BIP2155I: About to \'Initialize\' the deployed resource \'ExampleApplication\' of type \'Application\'.<br>2022-03-28 15:17:17.638108: BIP2155I: About to \'Start\' the deployed resource \'ExampleApplication\' of type \'Application\'.<br>An http endpoint was registered on port \'7800\', path \'/ExampleFlow\'.<br>2022-03-28 15:17:17.745996: BIP3132I: The HTTP Listener has started listening on port \'7800\' for \'http\' connections.<br>2022-03-28 15:17:17.750722: BIP1996I: Listening on HTTP URL \'/ExampleFlow\'.<br>Started native listener for HTTP input node on port 7800 for URL /ExampleFlow<br>2022-03-28 15:17:17.764856: BIP2269I: Deployed resource \'ExampleFlow\' (uuid=\'ExampleFlow\',type=\'MessageFlow\') started successfully.<br>2022-03-28 15:17:18.711392: BIP2866I: IBM App Connect Enterprise administration security is inactive.<br>2022-03-28 15:17:18.735096: BIP3132I: The HTTP Listener has started listening on port \'7600\' for \'RestAdmin http\' connections.<br>2022-03-28 15:17:18.744878: BIP1991I: Integration server has finished initialization.<br></code><br><b>In this example, note that the integration server started up significantly quicker than normal, in less than 2.5 seconds!</b> Of course, precise timings may vary dependent on the speed of your hardware and the degree to which your deployments can be optimized."},{"details":"Now, stop the server. For example on Windows platforms, you can do this using the Ctrl-C key combination in your Command Console session. Open the <code>server.components.yaml</code> file in the root of your integration server\'s work directory (&lt;Your Toolkit Workspace Location&gt;\\\\TEST_SERVER) with a text editor and change the setting to now also turn off NodeJS. You can do this by changing the property <code>NodeJS: true</code> to become <code>NodeJS: false</code>. Resave the <code>server.components.yaml</code> file."},{"details":"We will now observe the impact of this second stage of optimization. Staying in the Command console session, start up the integration server using the following command:<br><code>IntegrationServer --work-directory &lt;Your Toolkit Workspace Location&gt;\\\\TEST_SERVER</code><br><br>The output of the command will look like this:<br><code>2022-03-28 15:30:22.281892: The components file \'server.components.yaml\' is being loaded from the workpath \'&lt;Your Toolkit Workspace Location&gt;\\\\TEST_SERVER\'.<br>2022-03-28 15:30:22.394812: BIP1990I: Integration server \'TEST_SERVER\' starting initialization; version \'12.0.4.0\' (64-bit)<br>2022-03-28 15:30:22.427674: BIP9905I: Initializing resource managers.<br>2022-03-28 15:30:22.432956: BIP9397I: The runtime component \'JVM\' has not been created.<br>2022-03-28 15:30:22.438894: BIP9397I: The runtime component \'NodeJS\' has not been created.<br>2022-03-28 15:30:22.616908: BIP9397I: The runtime component \'GlobalCache\' has not been created.<br>2022-03-28 15:30:22.622128: BIP9397I: The runtime component \'.NET CLR\' has not been created.<br>2022-03-28 15:30:22.645140: BIP9398I: The resources from \'imbcallableflow.lil\' have not been loaded.<br>2022-03-28 15:30:22.649840: BIP9398I: The resources from \'imbdfagg.lil\' have not been loaded.<br>2022-03-28 15:30:22.654376: BIP9398I: The resources from \'imbdfbas.lil\' have not been loaded.<br>2022-03-28 15:30:22.668790: BIP9398I: The resources from \'imbdfcon.lil\' have not been loaded.<br>2022-03-28 15:30:22.737942: BIP9398I: The resources from \'imbdfdotnet.lil\' have not been loaded.<br>2022-03-28 15:30:22.743498: BIP9398I: The resources from \'imbdfjmt.lil\' have not been loaded.<br>2022-03-28 15:30:22.753254: BIP9398I: The resources from \'imbdfmqm.lil\' have not been loaded.<br>2022-03-28 15:30:22.770536: BIP9398I: The resources from \'imbdftcpip.lil\' have not been loaded.<br>2022-03-28 15:30:22.778526: BIP9398I: The resources from \'imbfte.lil\' have not been loaded.<br>2022-03-28 15:30:22.786524: BIP9398I: The resources from \'imbgroupnodes.lil\' have not been loaded.<br>2022-03-28 15:30:22.821906: BIP9398I: The resources from \'imbpep.lil\' have not been loaded.<br>2022-03-28 15:30:22.829522: BIP9398I: The resources from \'imbrestlil.lil\' have not been loaded.<br>2022-03-28 15:30:22.840446: BIP9398I: The resources from \'imbtimer.lil\' have not been loaded.<br>2022-03-28 15:30:22.854860: BIP9397I: The runtime component \'MQTT\' has not been created.<br>2022-03-28 15:30:22.868124: BIP9397I: The runtime component \'KAFKA\' has not been created.<br>2022-03-28 15:30:22.874736: BIP9397I: The runtime component \'CICS XA\' has not been created.<br>2022-03-28 15:30:22.886930: BIP9398I: The resources from \'ldapSecurityProvider.lsl\' have not been loaded.<br>2022-03-28 15:30:22.895040: BIP9398I: The resources from \'tfimSecurityProvider.lsl\' have not been loaded.<br>2022-03-28 15:30:22.905736: BIP9398I: The resources from \'wstrustSecurityProvider.lsl\' have not been loaded.<br>2022-03-28 15:30:22.920132: BIP9906I: Reading deployed resources.<br>2022-03-28 15:30:22.935340: BIP9907I: Initializing deployed resources.<br>2022-03-28 15:30:22.942242: BIP2155I: About to \'Initialize\' the deployed resource \'ExampleApplication\' of type \'Application\'.<br>2022-03-28 15:30:22.958816: BIP2155I: About to \'Start\' the deployed resource \'ExampleApplication\' of type \'Application\'.<br>An http endpoint was registered on port \'7800\', path \'/ExampleFlow\'.<br>2022-03-28 15:30:23.048384: BIP3132I: The HTTP Listener has started listening on port \'7800\' for \'http\' connections.<br>2022-03-28 15:30:23.053708: BIP1996I: Listening on HTTP URL \'/ExampleFlow\'.<br>Started native listener for HTTP input node on port 7800 for URL /ExampleFlow<br>2022-03-28 15:30:23.068254: BIP2269I: Deployed resource \'ExampleFlow\' (uuid=\'ExampleFlow\',type=\'MessageFlow\') started successfully.<br>2022-03-28 15:30:23.085772: BIP1991I: Integration server has finished initialization.<br></code><br><b>In this example, note that the integration server started up in less than a second!</b> Again, of course precise timings may vary dependent on the speed of your hardware and the degree to which your deployments can be optimized, but you should at least observe that the integration server start time has reduced even further than in the last test."}]}},{"section":"<h4>Optional: Return to the Toolkit","steps":{"type":"ordered","details":[{"details":"Right-click the TEST_SERVER integration server from the Integration Explorer view (by default located in the bottom left corner of the Toolkit) and start the server. Attempt to drag and drop deploy the same application with which we have been testing (or any other BAR file which you have handy!) and you will be met with this exception message:<br><code>BIP2377E Integration server \'TEST_SERVER\' has been optimized. It is not possible to deploy to an integration server that has been optimized.</code><br><br>This behaviour is implemented for the user\'s own protection, because optimizations which have been applied to a server are sensitive to the deployed content. This is not typically a problem for independent integration servers in containers because in situations where you wish to deploy something new, the container should be torn down and replaced with the new configuration. We deliberately highlight this behaviour here, just so that users bear it in mind if experimenting with this new capability!"},{"details":"Also in the Toolkit, right-click the TEST_SERVER integration server from the Integration Explorer view and choose the option to <code>Start Web User Interface</code>. Your browser will attempt to open a view of the integration server but the admin port will not be open, so the browser will report that it is unable to connect."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Optimizing the startup time for an independent integration server","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=solutions-optimizing-startup-time-independent-integration-server","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using the Java IBM Integration API - Strategic classes":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using the Java IBM Integration API - Strategic classes","shortDescription":"Learn how to use the Java IBM Integration API\'s strategic com.ibm.integration.admin.proxy.* classes","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainJava","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java IBM Integration API"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use the com.ibm.integration.admin.proxy.* classes in a Java application to discover details about what\'s deployed to an integration server."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple java application executing stand-alone (in a JVM but outside of the IBM App Connect Enterprise runtime itself). The application uses the Java Integration API\'s com.ibm.integration.admin.proxy.* classes. These classes are strategic for the product so should be used when writing any new administrative Java application. Separate tutorials are provided which also showcase other packages in the API."},{"section":"The tutorial requires an integration node owned server, and provides an example application which can be deployed to the server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution.  The Java application can then be run to report information about the deployed application."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleApplication</span> and a Java project name <span class=\'application\'>ExampleACEAdminProgram</span>."},{"section":"<span class=\'application\'>NOTE:</span> You may see errors with the imported <span class=\'application\'>ExampleACEAdminProgram</span> project, which requires some dependent jar files which it expects to find in the default installation location for IBM App Connect Enterprise 12 on Windows. You may be on a different platform, or install version, or have a system using a non-default location for the product installation. Don\'t be concerned - instructions are provided later on the Prepare tab to help with this."},{"section":"<span class=\'application\'>ExampleApplication</span> provides a single message flow named <span class=\'resource\'>ExampleFlow</span>. This message flow is not important - it simply provides an HTTPInput node wired to an HTTPReply. The only purpose for providing this flow is so that when the Java program is executed, there are some deployed artifacts to report on."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExampleApplication</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node owned server, deploy the message flow and inspect the Java program","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>DeployApplication.bar</span> which you will find inside the <span class=\'application\'>ExampleApplication</span> application."},{"details":"Inspect the provided java application. Switch to the Java perspective and then open <span class=\'application\'>ExampleACEAdminProgram.java</span> which you will find inside the Java project named <span class=\'application\'>ExampleACEAdminProgram</span>. If required by your runtime environment, update the values of the two variables, <span class=\'resource\'>nodeHostName</span> and <span class=\'resource\'>nodePortNumber</span> which enable the Java program to communicate with your integration node. By default the code is configured to expect to use port 4414, but depending whether you are using a pre-existing integration node and also on the available ports on your machine, this may need to be changed. Have a look through the rest of the Java."},{"details":"Check the Java Build Path for the provided java application. Right-click the project <span class=\'application\'>ExampleACEAdminProgram</span>, select <span class=\'application\'>Properties</span> and choose the Java Build Path. You will see that the project has been configured to expect several jar files to be available from the default installation location on Windows at <span class=\'resource\'>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.2.0</span>. If you are using a different platform or install location you will need to use the <span class=\'resource\'>Remove</span> and <span class=\'resource\'>Add External JARs</span> buttons to satisfy the required dependencies. <span class=\'application\'>The precise names and versions of these files may change in future (periodically updates will occur to pick up security fixes etc.), but at IBM App Connect Enterprise 12.0.2.0 the required libraries are as follows</span>:","substeps":{"type":"unordered","details":[{"details":"From <code>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.2.0\\\\common\\\\classes</code>: IntegrationAPI.jar"},{"details":"From <code>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.2.0\\\\common\\\\jackson\\\\lib</code>: jackson-annotations-2.12.4.jar, jackson-core-2.12.4.jar, jackson-databind-2.12.4.jar, jackson-dataformat-yaml-2.12.4.jar, snakeyaml-1.29.jar"},{"details":"From <code>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.1.0\\\\common\\\\jnr\\\\lib</code>: asm-7.0.jar, jffi-1.2.19.jar, jffi-1.2.19-native.jar, jnr-a64asm-1.0.0.jar, jnr-constants-0.9.12.jar, jnr-enxio-0.21.jar, jnr-ffi-2.1.10.jar, jnr-posix-3.0.50.jar, jnr-unixsocket-0.23.jar, jnr-x86asm-1.0.2.jar"}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Run the provided Java application from within Toolkit and view the Console to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ExampleACEAdminProgram.java</span> which is located inside project <span class=\'resource\'>ExampleACEAdminProgram</span>.","substeps":{"type":"unordered","details":[{"details":"Right-click <span class=\'resource\'>ExampleACEAdminProgram.java</span> and select <span class=\'resource\'>Run As > Java application</span>."},{"details":"The Console view should open at the base of the screen and as the Java application runs, you should see logging like this:<br><code>(12/08/19 12:47:54) =============================================================================================</code><br><code>(12/08/19 12:47:54) This admin program shows the use of com.ibm.integration.admin.proxy.* classes (STRATEGIC)</code><br><code>(12/08/19 12:47:54) =============================================================================================</code><br><code>(12/08/19 12:47:54) Connecting to host localhost and port 4414</code><br><code>(12/08/19 12:47:55) TESTNODE is running</code><br><code>(12/08/19 12:47:55)   TESTNODE,default is running</code><br><code>(12/08/19 12:47:55)     TESTNODE,default,ExampleApplication is running</code><br><code>(12/08/19 12:47:55)       TESTNODE,default,ExampleApplication,ExampleFlow is running</code>"}]}}]}},{"section":"This tutorial has shown how to use the Java IBM Integration API\'s strategic com.ibm.integration.admin.proxy.* classes to discover details about what\'s deployed to an integration server."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"IBM Integration API","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/be43410_.htm","type":"web"}]}}}}},"Using the Java IBM Integration API - HTTP classes":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using the Java IBM Integration API - HTTP classes","shortDescription":"Learn how to use the Java IBM Integration API\'s strategic com.ibm.integration.admin.http.* classes","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainJava","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java IBM Integration API"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use the com.ibm.integration.admin.http.* classes in a Java application to discover details about what\'s deployed to an integration server."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple java application executing stand-alone (in a JVM but outside of the IBM App Connect Enterprise runtime itself). The application uses the Java Integration API\'s com.ibm.integration.admin.http.* classes. These classes are strategic for the product. Users may find them more generalized than the classes provided in the package com.ibm.integration.admin.proxy The proxy package provides proxy objects for each item in the runtime hierarchy i.e. integration server proxy, application proxy, message flow proxy etc. The http package is structured to expect from the developer a URL (matching the administrative REST API) to describe a particular resource in the runtime hierarchy. Which of these approaches you prefer may vary from developer to developer. For existing IBM Integration Bus users, the proxy package approach may be most familiar. To entirely new users the http package approach may be most easily understood. It is also possible to use classes from both packages within the same program, because the com.ibm.integration.admin.model.* classes can be used to help developers parse responses to requests in both styles. This tutorial focuses on the com.ibm.integration.admin.http package."},{"section":"The tutorial requires an integration node owned server."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"IBM Integration API","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/be43410_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: A Java project name <span class=\'application\'>ExampleACEAdminProgram_HTTPClient</span>."},{"section":"This tutorial does not provide any other example applications or message flows for deployment. The java example simply connects to an integration server and reports its properties, so no other assets are needed for this trivial example."},{"section":"Once imported using the link on the right, the Java program is ready to be tested. Before doing so, we will set up the runtime integration node and server, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"IBM Integration API","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/be43410_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node owned server and inspect the Java program","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e default</span></code>"},{"details":"Inspect the provided java application. Switch to the Java perspective and then open <span class=\'application\'>ExampleACEAdminProgram_HTTPClient.java</span> which you will find inside the Java project named <span class=\'application\'>ExampleACEAdminProgram_HTTPClient</span>. If required by your runtime environment, update the value of the variable, <span class=\'resource\'>nodeName</span>. By default this is set to the value <span class=\'resource\'>TESTNODE</span> to match to the naming convention used in the instructions above. <span class=\'application\'>You will need to change this if you are planning on communicating with a node of a different name!</span> Also, note the parameter which is passed to <span class=\'application\'>getMethod</span> in the code <code>getMethod(\\"/apiv2/servers/default?depth=4\\")</code>. This includes the value <span class=\'application\'>default</span> to also match the name of the Integration Server used in the instructions above. Have a look through the rest of the Java. You will see that once the initial response has been returned, the IntegrationServerModel class is used to parse the reply and make various properties of the integration server easily accessible by the code."},{"details":"Check the Java Build Path for the provided java application. Right-click the project <span class=\'application\'>ExampleACEAdminProgram_HTTPClient</span>, select <span class=\'application\'>Properties</span> and choose the Java Build Path. You will see that the project has been configured to expect several jar files to be available from the default installation location on Windows at <span class=\'resource\'>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.2.0</span>. If you are using a different platform or install location you will need to use the <span class=\'resource\'>Remove</span> and <span class=\'resource\'>Add External JARs</span> buttons to satisfy the required dependencies.<span class=\'application\'>The precise names and versions of these files may change in future (periodically updates will occur to pick up security fixes etc.), but at IBM App Connect Enterprise 12.0.2.0 the required libraries are as follows</span>:","substeps":{"type":"unordered","details":[{"details":"From <code>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.2.0\\\\common\\\\classes</code>: IntegrationAPI.jar"},{"details":"From <code>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.2.0\\\\common\\\\jackson\\\\lib</code>: jackson-annotations-2.12.4.jar, jackson-core-2.12.4.jar, jackson-databind-2.12.4.jar, jackson-dataformat-yaml-2.12.4.jar, snakeyaml-1.29.jar"},{"details":"From <code>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.2.0\\\\common\\\\jnr\\\\lib</code>: asm-7.0.jar, jffi-1.2.19.jar, jffi-1.2.19-native.jar, jnr-a64asm-1.0.0.jar, jnr-constants-0.9.12.jar, jnr-enxio-0.21.jar, jnr-ffi-2.1.10.jar, jnr-posix-3.0.50.jar, jnr-unixsocket-0.23.jar, jnr-x86asm-1.0.2.jar"}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Run the provided Java application from within Toolkit and view the Console to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ExampleACEAdminProgram_HTTPClient.java</span> which is located inside project <span class=\'resource\'>ExampleACEAdminProgram_HTTPClient</span>.","substeps":{"type":"unordered","details":[{"details":"Right-click <span class=\'resource\'>ExampleACEAdminProgram_HTTPClient.java</span> and select <span class=\'resource\'>Run As > Java application</span>."},{"details":"The Console view should open at the base of the screen and as the Java application runs, you should see logging like this:<br><code>(12/08/19 15:45:23) ==========================================================================================</code><br><code>(12/08/19 15:45:23) This admin program shows the use of com.ibm.integration.admin.http classes (STRATEGIC)</code><br><code>(12/08/19 15:45:23) ==========================================================================================</code><br><code>(12/08/19 15:45:23) Connecting locally to the integration node named TESTNODE</code><br><code>(12/08/19 15:45:23) URL: /apiv2/servers/default?depth=4</code><br><code>(12/08/19 15:45:23) StatusCode: 200</code><br><code>(12/08/19 15:45:23) ReasonCode: OK</code><br><code>(12/08/19 15:45:23) BuildLevel: ib000-L190627.16880 (S000-L190627.15920)</code><br><code>(12/08/19 15:45:23) PlatformArchitecture: AMD64</code><br><code>(12/08/19 15:45:23) PlatformName: Windows 10 Enterprise</code><br><code>(12/08/19 15:45:23) PlatformVersion: 6.3 build 17763</code><br><code>(12/08/19 15:45:23) ProductName: IBM App Connect Enterprise</code><br><code>(12/08/19 15:45:23) ProductVersion: 11.0.0.5</code>"}]}}]}},{"section":"This tutorial has shown how to use the Java IBM Integration API\'s strategic com.ibm.integration.admin.http.* classes to show details about an integration server."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"IBM Integration API","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/be43410_.htm","type":"web"}]}}}}},"OpenAPI Specification v3 - Using an example REST API":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"OpenAPI Specification v3 - Using an example REST API","shortDescription":"Learn how to use an IBM App Connect Enterprise REST API, which has been built to conform to the OpenAPI Specification","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"CountryAPI","helpLink":{"text":"IBM Knowledge Center","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.ace.home.doc/help_home.htm"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"IBM App Connect Enterprise REST API"},{"title":"Subflows"},{"title":"Transformation using graphical data mapping, Compute and Java Compute nodes."}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Understand how a REST API is defined, implemented, deployed, and invoked."},{"title":"Learn how to implement REST API operations by using subflows."},{"title":"Review how Java Compute, Compute and Mapping nodes can handle messages based on JSON objects."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"IBM App Connect Enterprise provides a specific type of project to support REST API implementations, which can either be based upon a Swagger (v2) specification document or an OpenAPI (v3) specification document. REST APIs can be authored and deployed from the IBM App Connect Enterprise Toolkit. This tutorial provides a simple example REST API built upon an OpenAPI v3 specification document. Several operations are implemented which provide basic information about countries such as their name, an abbreviated name format, capital city and population size. Queries can be made for a single or multiple countries, and data about new countries can also be added."},{"section":"IBM App Connect Enterprise 12 provides a new OpenAPI Editor for OpenAPI v3 REST APIs. This editor enables you to easily add new operations and message structures to your REST API, and just like the long-standing editor for Swagger v2 REST APIs, links the REST interface with the required subflow definitions which dictate what happens in the App Connect Enterprise runtime when the REST API is invoked. An operation can make use of a JSON input object and URL parameters. The operations are implemented as subflows that use different transformation nodes. The nodes demonstrate how you can use ESQL, Java, or Graphical Mapping to process an incoming JSON message. The subflows also show you how to construct a response message that includes a JSON response object. The tutorial explores the example provided REST API and describes how it can be deployed and tested."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the following projects will be imported into your workspace:<br>The REST API named <span class=\'uicontrol\'>CountryAPI</span><br>An associated java project named <span class=\'uicontrol\'>CountryAPIJava</span><br>Next, move to the Prepare section to see the steps that you complete to deploy the REST API."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Explore the provided integration artifacts","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server and deploy the REST API</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."},{"details":"In the <b>Independent Resources</b> section of the Application Development view in the top left corner of the Toolkit, you will find the project named <b>TEST_SERVER</b> which holds the working directory for the local Integration Server which you just started. Open the server.conf.yaml file in this project and edit the settings in the HTTPConnector section in order to enable the settings required to enable the server to respond to valid HTTP CORS requests. These alterations will enable you to test the deployed REST API from the App Connect Enterprise Web UI, should you wish to later in the tutorial:<br><br><code>&nbsp;&nbsp;HTTPConnector:<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSEnabled: true<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowOrigins: \'*\'<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowMethods: \'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS\'<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowHeaders: \'Accept,Accept-Language,Content-Language,Content-Type\'<br></code><br><br>Save the changes to the <b>server.conf.yaml</b> file. For the changes to take effect, the server must be restarted. Right click <b>TEST_SERVER</b> in the Integration Explorer view in the bottom left and stop the server. Once it stops, right-click the server again and start it."},{"details":"To deploy the REST API named <b>CountryAPI</b>, drag and drop it from the Application Development view on to the <b>TEST_SERVER</b> Integration Server"}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"If you wish, you can test the deployed REST API using your own preferred HTTP or REST client. From the Integration Explorer view, right-click <b>TEST_SERVER</b> and choose the option to <b>Start Web User Interface</b>. When your browser opens, you should see a square tile representing the CountryAPI REST API. Click on the tile and you will be taken to an Overview page. Note the main page provides an option to <b>Download OpenAPI Document</b> to get hold of a yaml representation of the deployed REST API. The Endpoint is also displayed - take a note of this as it will be helpful later when we use cURL to invoke the REST API. Select the operation <b>GET /countries</b> and on the resulting page, click on the <b>Try It</b> tab and click <b>Send</b>. You should receive a JSON response message which looks like this:<br><br><code>[<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"United Kingdom\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"abbreviation\\": \\"UK\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"capital\\": \\"London\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"population\\": 67530172<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"France\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"abbreviation\\": \\"FR\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"capital\\": \\"Paris\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"population\\": 65129728<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Germany\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"abbreviation\\": \\"DE\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"capital\\": \\"Berlin\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"population\\": 83517045<br>&nbsp;&nbsp;}<br>]</code><br><br>"},{"details":"Now launch a command console and use cURL to invoke the available operations. Start by creating the data for a new country using a command like this (you will need to use your own host name and port, which you captured earlier from the Endpoint advertised in the Web User Interface):<br><br><code>curl -X POST http://yourhostname:7800/countryapi/v1/countries --data \\"{\\\\\\"name\\\\\\":\\\\\\"USA\\\\\\",\\\\\\"abbreviation\\\\\\":\\\\\\"US\\\\\\",\\\\\\"capital\\\\\\":\\\\\\"Washington DC\\\\\\",\\\\\\"population\\\\\\":329064917}\\"</code><br><br>You should receive a response like this:<br><br><code>{\\"message\\":\\"A new country with name \'USA\' was successfully added to the database.\\"}</code>"},{"details":"Next, query the data for a specific country using a request like this:<br><br><code>curl -X GET http://yourhostname:7800/countryapi/v1/countries/Germany</code><br><br>You should receive a response like this:<br><br><code>{\\"name\\":\\"Germany\\",\\"abbreviation\\":\\"DE\\",\\"capital\\":\\"Berlin\\",\\"population\\":83517045}</code>"},{"details":"This tutorial has shown how to use an IBM App Connect Enterprise REST API, which has been built to conform to the OpenAPI Specification"}]}}]}}}}},"OpenAPI Specification v3 - Creating a REST API from a document import":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"OpenAPI Specification v3 - Creating a REST API from a document import","shortDescription":"Learn how to create an IBM App Connect Enterprise REST API, by importing a document which conforms to the OpenAPI Specification v3","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Knowledge Center","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.ace.home.doc/help_home.htm"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"IBM App Connect Enterprise REST API"},{"title":"Subflows"},{"title":"Transformation using Compute nodes."}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Understand how a REST API is defined, implemented, deployed, and invoked."},{"title":"Learn how to implement REST API operations by using subflows."},{"title":"Review how Compute nodes can handle messages based on JSON objects and set HTTP Reply Status codes."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"IBM App Connect Enterprise provides a specific type of project to support REST API implementations, which can either be based upon a Swagger (v2) specification document or an OpenAPI (v3) specification document. REST APIs can be authored and deployed from the IBM App Connect Enterprise Toolkit. This tutorial describes how to create a simple example REST API by importing an existing OpenAPI v3 specification document (which is provided for you). The example provides examples of all the common operations - POST, GET, PUT, and DELETE. The scenario is built around the concept of a shopping list from which items can be queried, added or deleted."},{"section":"IBM App Connect Enterprise 12 provides a new OpenAPI Editor for OpenAPI v3 REST APIs. This editor enables you to easily add new operations and message structures to your REST API, and just like the long-standing editor for Swagger v2 REST APIs, links the REST interface with the required subflow definitions which dictate what happens in the App Connect Enterprise runtime when the REST API is invoked. An operation can make use of a JSON input object and URL parameters. The operations are implemented as subflows. In this example, all of the subflows will use Compute nodes for their transformation logic (ESQL code is provided to make it really easy to implement!). The subflows also show you how to construct JSON response messages. The tutorial explores the example provided REST API and describes how it can be deployed and tested."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a single simple project named <span class=\'uicontrol\'>TutorialHelperFiles</span> will be imported into your workspace. Next, move to the Prepare section which will describe the development steps for creating a REST API by importing a document which conforms to the OpenAPI Specification v3."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create the REST API","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"From the <b>Application Development</b> view click the <code>New...</code> hyperlink at the top right and from the menu which appears, click on <b>REST API</b>. The Create a REST API dialog will open. Type the <b>Name</b> <code>ShoppingListAPI</code>, and switch the radio button to the option labelled <b>Import resources and operations defined in a REST API document</b> then click Next."},{"details":"You will be asked to import an OpenAPI 3 document either from the file system or your workspace. Using the radio button to <b>Select from your workspace</b>, select <b>ShoppingListAPI.json</b> from the <b>json</b> folder in the <b>TutorialHelperFiles</b> project. Click Next and you will be shown a Review page with five operations listed. Click Finish."},{"details":"The REST API will be created and a summary page will open displaying details about the API such as its title and base URL. The next section down entitled <b>Resources and Operations</b> will list the operations in bright colors. They should be easy to spot, but on some screen resolutions you may wish to maximise the view (double click on its title) to make it easy to scroll through them. You should see a button named <b>Create subflow</b> next to each operation. Click on the one next to GET /shoppinglist and a subflow implementation will be created named <b>getShoppinglist</b> which initially will have just an Input and Output node. In the subflow, wire the Input node to the Output node and then drag and drop a Compute node (from the Transformation drawer in the palette) on to the wire and its terminals will be connected up for you (the out terminal of the Input node will be wired to the in terminal of the Compute node, and the out terminal of the Compute node will be wired to the in terminal of the Output node). On the Compute node\'s properties change the Compute mode to be <b>LocalEnvironment and Message</b>. Save and close the subflow (you can safely ignore the red crosses on the Compute node - we will fix these up in the next step!)."},{"details":"Right click the <b>ShoppingListAPI</b> and choose New > Broker Schema. Type the Schema name <b>utils</b> and click Finish. A Broker Schema is like a package or folder which provides a scoping to hold artifacts such as ESQL files. Switch to the Resource perspective using the menu Window > Perspective > Open Perspective > Other ... then choose Resource and click Open. Using the Project Explorer view in the top left corner, copy the file <b>Compute.esql</b> from the folder named <b>utils</b> in the project named <b>TutorialHelperFiles</b> into the <b>utils</b> folder in the project <b>ShoppingListAPI</b>. Switch back to the Application Development perspective using the Window > Perspective > Open Perspective menu. Return to the getShoppingList subflow and on the Compute node\'s properties update the ESQL module property to the valye <code>{utils}:getItem_Compute</code>. Save the subflow and the red error on the Compute node should disappear."},{"details":"Back on the ShoppingListAPI descriptor page you will notice that the <b>Create subflow</b> button will have turned into an <b>Edit subflow</b> button. Repeat the same steps we just went through for the remaining four operations. Each operation subflow will use a Compute node, each of which will need the Compute mode of <b>LocalEnvironment and Message</b>. Configure each ESQL Module to point to the one with the matching name in the provided ESQL file. When you\'re done you should have five subflows all completed - one for each of the five operations, and there should be no remaining errors reported."}]}},{"section":"<b>Create an integration server and deploy the REST API</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."},{"details":"In the <b>Independent Resources</b> section of the Application Development view in the top left corner of the Toolkit, you will find the project named <b>TEST_SERVER</b> which holds the working directory for the local Integration Server which you just started. Open the server.conf.yaml file in this project and edit the settings in the HTTPConnector section in order to enable the settings required to enable the server to respond to valid HTTP CORS requests. These alterations will enable you to test the deployed REST API from the App Connect Enterprise Web UI, should you wish to later in the tutorial:<br><br><code>&nbsp;&nbsp;HTTPConnector:<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSEnabled: true<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowOrigins: \'*\'<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowMethods: \'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS\'<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowHeaders: \'Accept,Accept-Language,Content-Language,Content-Type\'<br></code><br><br>Save the changes to the <b>server.conf.yaml</b> file. For the changes to take effect, the server must be restarted. Right click <b>TEST_SERVER</b> in the Integration Explorer view in the bottom left and stop the server. Once it stops, right-click the server again and start it."},{"details":"Deploy the REST API which we created earlier named <b>ShoppingListAPI</b>, by dragging and dropping it from the Application Development view on to the <b>TEST_SERVER</b> Integration Server"}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"If you wish, you can test the deployed REST API using your own preferred HTTP or REST client, but we will describe using the IBM App Connect Enterprise Web User Interface. From the Integration Explorer view in the Toolkit, right-click <b>TEST_SERVER</b> and choose the option to <b>Start Web User Interface</b>. When your browser opens, you should see a square tile representing the <b>ShoppingListAPI</b> REST API. Click on the tile and you will be taken to an <b>Overview</b> page. On the left side of the main page there will be a list of all the available operations:<br><br><code>GET /shoppinglist</code><br><code>POST /shoppinglist</code><br><code>PUT /shoppinglist/{item}</code><br><code>DELETE /shoppinglist/{item}</code><br><code>GET /shopppinglist/{item}</code><br><br>When you select any of these operations in the following steps, you will see a <b>Try It</b> tab with boxes for parameters and the body of request data to be provided and a <b>Send</b> button for submitting requests. You can experiment for yourself, or try out the operations as in the order suggested below ..."},{"details":"Use <b>getShoppingList</b> without typing anything in the Limit parameter, and note that the following three shopping list entries are returned:<br><br><code>[<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Chocolates\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Confectionery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The most chocolate-y of chocolates\\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Crisps\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Snacks\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"Crisps not chips (because chips are fries)\\"<br>&nbsp;&nbsp;}<br>]</code><br>"},{"details":"Use <b>getShoppingList</b> with a value for the Limit parameter of 2, and note that the following two shopping list entries are returned:<br><br><code>[<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Chocolates\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Confectionery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The most chocolate-y of chocolates\\"<br>&nbsp;&nbsp;}<br>]</code><br>"},{"details":"Use <b>postShoppingList</b> with the body message as follows:<br><br><code>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Merlot\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Beverages\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"A nice red\\"<br>&nbsp;&nbsp;}</code><br>"},{"details":"Use <b>getItem</b> and note that the details for the item we just created are returned."},{"details":"Use <b>putItem</b> with the body message as follows:<br><br><code>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Merlot\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Beverages\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The finest of wines\\"<br>&nbsp;&nbsp;}</code><br>"},{"details":"Use <b>getItem</b> and note that the details for the item which are returned have now been updated."},{"details":"Use <b>deleteItem</b> and note that the return status code demonstrates a successful deletion."},{"details":"Use <b>getShoppingList</b> without typing anything in the Limit parameter, and note that we are back to the following three shopping list entries being returned:<br><br><code>[<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Chocolates\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Confectionery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The most chocolate-y of chocolates\\"<br>&nbsp;&nbsp;},<br>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Crisps\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Snacks\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"Crisps not chips (because chips are fries)\\"<br>&nbsp;&nbsp;}<br>]</code><br>"},{"details":"This tutorial has shown how to create an IBM App Connect Enterprise REST API by importing an OpenAPI Specification v3 document, and then implement and test its subflow operations."}]}}]}}}}},"OpenAPI Specification v3 - Adding an operation to a REST API using the API Editor":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"OpenAPI Specification v3 - Adding an operation to a REST API using the API Editor","shortDescription":"Learn how to use the API Editor to add an operation to an IBM App Connect Enterprise REST API which conforms to the OpenAPI Specification v3","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"TutorialHelperFiles","helpLink":{"text":"IBM Knowledge Center","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.ace.home.doc/help_home.htm"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"IBM App Connect Enterprise REST API"},{"title":"Subflows"},{"title":"Transformation using Compute nodes."}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Understand how a REST API is defined, implemented, deployed, and invoked."},{"title":"Learn how to implement REST API operations by using subflows."},{"title":"Learn how to use the API Editor"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"IBM App Connect Enterprise provides a specific type of project to support REST API implementations, which can either be based upon a Swagger (v2) specification document or an OpenAPI (v3) specification document. REST APIs can be authored and deployed from the IBM App Connect Enterprise Toolkit. This tutorial provides a simple example Open API v3 REST API and guides you through the process of opening the API specification document in the API Editor, adding an extra operation to the API and then developing a subflow which provides its implementation. The scenario is built around the concept of a shopping list from which items can be queried, added or deleted."},{"section":"IBM App Connect Enterprise 12 provides a new OpenAPI Editor for OpenAPI v3 REST APIs. This editor enables you to easily add new operations and message structures to your REST API, and just like the long-standing editor for Swagger v2 REST APIs, links the REST interface with the required subflow definitions which dictate what happens in the App Connect Enterprise runtime when the REST API is invoked. An operation can make use of a JSON input object and URL parameters. The operations are implemented as subflows. In this example, all of the subflows use Compute nodes for their transformation logic. The tutorial explores the example provided REST API and describes how it can be deployed and tested."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a single REST API project named <span class=\'uicontrol\'>ShoppingListAPI</span> will be imported into your workspace. Next, move to the Prepare section which will describe the development steps for adding an operation to the REST API using the API Editor."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Add an operation to the REST API","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"After importing the <b>ShoppingListAPI</b> project, you should already have open the REST API Description page in the main window of the Toolkit. At the top of the page, in the API Details section you will find a link to <b>Edit API Document in OpenAPI Editor</b>. Click the link. If you haven\'t used the OpenAPI Editor before you will receive a pop-up warning you that the OpenAPI Editor will be displayed in a separate Window (as this mode of operation may not be familiar to Toolkit users from earlier versions of the product). Click OK to the warning (noting that you have a checkbox opportunity if you don\'t want the warning to pop up in future) and after a second or two, the OpenAPI Editor will open."},{"details":"The OpenAPI Editor has a navigation menu on the left side of the window, which has a Seach function, and below that it has separate sections for each top-level part of the document named Components, General and Paths. Expand the section Components > Schemas and click on the first child under <b>Schemas</b> which is named <b>Item</b>. Scroll down the Item Schema definition using the scroll bar on the right, and you will see the object has properties defined for its <b>name</b>, <b>department</b> and <b>description</b>. These three properties are provided for each item on the shopping list. In the next set of instructions we will add an operation for retrieving an Item using a GET verb, which will reuse this schema definition."},{"details":"Using the left navigation tree, expand <b>Paths</b> and then expand <b>/shoppinglist/{item}</b>  and <b>Operations</b>. You will see that currently the /shoppinglist/{item} resource has two operations defined - PUT and DELETE. We will add a third GET operation now. Next to where the tree shows Operations (2) you will see a blue plus sign inside a blue circle. Click this icon and in the pop-up:<br>select <b>get</b> from the <b>Verb (Key)</b> dropdown<br>Type the summary of <code>Retrieve a specific item</code><br>Click the <b>Create</b> button. You will see that GET is now added to the Operations in the left menu, but it will be marked with an error because we have not yet added a required response property. Click the blue plus sign icon next to the child of GET named <b>Responses (0)</b>. In the pop-up, keep the provided default <b>Response name</b> of <code>200</code><br>Type the description of <code>Expected response to a valid request</code><br>Click the <b>Create</b> button and then scroll to the top of the page. Do not save the document yet, but instead, just beneath the save button you will see two other buttons - if you hover over them you will see one is named <b>Form</b> and the other <b>Source</b>. Up to now we have been using the <b>Form</b> view, but if you click on <b>Source</b>, you will see that you can also edit the API document. You should be able to find the part we have been adding so far between lines 76 and 81. In the <b>Source</b> layout, it will currently look like this:<br><br><code>&nbsp;&nbsp;&nbsp;&nbsp;get:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;summary: Retrieve a specific item<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description: The name of the item<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responses:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\'200\':<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description: Expected response to a valid request</code><br><br>Edit this section of the code so that it looks like this:<br><br><code>&nbsp;&nbsp;&nbsp;&nbsp;get:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;summary: Retrieve a specific item<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;parameters:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- name: item<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;in: path<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;required: true<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description: The name of the item<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ref: \'#/components/schemas/ItemName\'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;responses:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\'200\':<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description: Expected response to a valid request<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application/json:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ref: \'#/components/schemas/Item\'<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;description: unexpected error<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;content:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;application/json:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;schema:<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$ref: \'#/components/schemas/Error\'<br></code><br>Click the Save button at the top of the screen and switch back to the Form layout again. Beneath the <b>Form</b> and <b>Source</b> buttons you will find another button named <b>Create Subflow</b>. Click this button and a message will start that the subflow has been created. Close the API Editor and you will be returned back to the Toolkit where we will implement the operation subflow."},{"details":"Switch to the <b>getItem.subflow</b> which will have been initialised with an Input node and an Output node. In the subflow, wire the Input node to the Output node and then drag and drop a Compute node (from the Transformation drawer in the palette) on to the wire and its terminals will be connected up for you (the out terminal of the Input node will be wired to the in terminal of the Compute node, and the out terminal of the Compute node will be wired to the in terminal of the Output node). On the Compute node\'s properties change the <b>Compute mode</b> to be <b>LocalEnvironment and Message</b> and edit the <b>ESQL module</b> property to take the value <code>{Utils}:getItem_Compute</code>. Save the subflow (ignore the red cross as we\'re just about to resolve this!), and then double click the Compute node. Template code for the Compute Module named getItem_Compute will be generated. To start with it will contain the following two lines of commented code:<br><br><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- CALL CopyMessageHeaders();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-- CALL CopyEntireMessage();</code><br><br>Replace these lines with the following code:<br><br><code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF Initialised=FALSE THEN<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALL Initialise();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END IF;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;CALL CopyMessageHeaders();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET OutputLocalEnvironment = InputLocalEnvironment;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 404;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DECLARE NewItemRef REFERENCE TO ShoppingList;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVE NewItemRef FIRSTCHILD;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WHILE LASTMOVE(NewItemRef) DO<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IF NewItemRef.name = InputLocalEnvironment.REST.Input.Parameters.item THEN<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET OutputRoot.JSON.Data.name = NewItemRef.name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET OutputRoot.JSON.Data.department = NewItemRef.department;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET OutputRoot.JSON.Data.description = NewItemRef.description;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 200;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END IF;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVE NewItemRef NEXTSIBLING;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;END WHILE;</code><br><br>Save the ESQL file."}]}},{"section":"<b>Create an integration server and deploy the REST API</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."},{"details":"In the <b>Independent Resources</b> section of the Application Development view in the top left corner of the Toolkit, you will find the project named <b>TEST_SERVER</b> which holds the working directory for the local Integration Server which you just started. Open the server.conf.yaml file in this project and edit the settings in the HTTPConnector section in order to enable the settings required to enable the server to respond to valid HTTP CORS requests. These alterations will enable you to test the deployed REST API from the App Connect Enterprise Web UI, should you wish to later in the tutorial:<br><br><code>&nbsp;&nbsp;HTTPConnector:<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSEnabled: true<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowOrigins: \'*\'<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowMethods: \'GET,HEAD,POST,PUT,PATCH,DELETE,OPTIONS\'<br>&nbsp;&nbsp;&nbsp;&nbsp;CORSAllowHeaders: \'Accept,Accept-Language,Content-Language,Content-Type\'<br></code><br><br>Save the changes to the <b>server.conf.yaml</b> file. For the changes to take effect, the server must be restarted. Right click <b>TEST_SERVER</b> in the Integration Explorer view in the bottom left and stop the server. Once it stops, right-click the server again and start it."},{"details":"Deploy the REST API which we created earlier named <b>ShoppingListAPI</b>, by dragging and dropping it from the Application Development view on to the <b>TEST_SERVER</b> Integration Server"}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"If you wish, you can test the deployed REST API using your own preferred HTTP or REST client, but we will describe using the IBM App Connect Enterprise Web User Interface. From the Integration Explorer view in the Toolkit, right-click <b>TEST_SERVER</b> and choose the option to <b>Start Web User Interface</b>. When your browser opens, you should see a square tile representing the <b>ShoppingListAPI</b> REST API. Click on the tile and you will be taken to an <b>Overview</b> page. On the left side of the main page there will be a list of all the available operations:<br><br><code>GET /shoppinglist</code><br><code>POST /shoppinglist</code><br><code>PUT /shoppinglist/{item}</code><br><code>DELETE /shoppinglist/{item}</code><br><code>GET /shopppinglist/{item}</code><br><br>When you select any of these operations in the following steps, you will see a <b>Try It</b> tab with boxes for parameters and the body of request data to be provided and a <b>Send</b> button for submitting requests. You can experiment for yourself, but lets start by trying out the operation we just added to the API ..."},{"details":"Use <b>getItem</b> and for the item parameter, type the value <code>Bread</code> and the returned message will look like this:<br><br><code>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>&nbsp;&nbsp;}</code>"},{"details":"This tutorial has shown how to use the API Editor to add an operation to an IBM App Connect Enterprise REST API which conforms to the OpenAPI Specification v3, and then implement and test its subflow operation."}]}}]}}}}},"Using a REST API to manage a set of records":{"version":"0.6","pageContent":{"comments":"Must use underscore for en-us.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a REST API to manage a set of records","shortDescription":"Learn how to use a REST API with a simple example managing a set of records.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","resourceToOpen":"CustomerDatabaseV1","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","topicList":[{"title":"IBM App Connect Enterprise REST API."},{"title":"Subflows."},{"title":"Transformation using graphical data mapping, Compute and Java Compute nodes."}],"outcomesName":"Learning outcomes","outcomeList":[{"title":"Understand how a REST API is defined, implemented, deployed, and invoked."},{"title":"Learn how to implement REST API operations by using subflows."},{"title":"Review how Java Compute, Compute and Mapping nodes can handle messages based on JSON objects."}],"summary":{"comments":"","overviewName":"OVERVIEW","sections":[{"section":"IBM App Connect Enterprise provides a specific REST API project for developing RESTful web service implementations. These services help you define and implement a RESTful service based on the existing Swagger document. These services, which can be invoked from other standard REST or HTTP clients, allow you to send REST requests and receive responses over HTTP. This tutorial shows a simple example where a REST API service implements several functions to query and manage a sample customer registry."},{"section":"The REST API description allows you to view the RESTful interface that is defined in the imported Swagger document, and allows easy navigation between the REST API interface editor and the subflows that implement the interface operations. In this example, the REST API defines five operations. Each operation can be invoked by a unique combination of the URL path and HTTP method. An operation can make use of a JSON input object and URL parameters. The operations are implemented as subflows that use different transformation nodes. The nodes demonstrate how you can use ESQL, Java, or Graphical Mapping to process an incoming JSON message. The subflows also show you how to construct a response message that includes a JSON response object. You can also generate subflows to handle errors that might occur while processing the REST requests and responses."},{"section":"You will see how you can deploy and test the REST API on the integration node by using a REST client. As you run the example, you will see how the REST API is deployed as a single entity, which packages your solution."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using REST APIs","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12016_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Manipulating messages in the JSON domain","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc28410_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import the REST API project","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> to add a REST API project called <span class=\'application\'>CustomerDatabaseV1</span> to your workspace."},{"section":"The <span class=\'application\'>CustomerDatabaseV1</span> application consists of a REST API description and other resources, including a number of subflows. You can explore these resources later in the tutorial. The REST API description is opened in the REST API editor."},{"section":"Next, click the <span class=\'uicontrol\'>Prepare</span> tab to see the steps that you complete to deploy the REST API."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using REST APIs","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12016_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"comment":"","name":"Prepare","heading":"Deploy the REST API","sections":[{"section":"Create an integration node by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start a console window, and create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"section":"Deploy the <span class=\'application\'>CustomerDatabaseV1</span> REST API service by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Drag and drop the <span class=\'application\'>CustomerDatabaseV1</span> application on the integration server to deploy the REST API."},{"details":"Check that the application deployed with no errors. Your REST API HTTP endpoints should be up and running, waiting for HTTP REST requests to arrive."},{"details":"Find and record the Base URL of the REST API. The way to discover this information varies slightly on different installed ACE fix pack versions. In recent fix packs, find and select the deployed <span class=\'application\'>CustomerDatabaseV1</span> REST API in the <span class=\'uicontrol\'>Integration Explorer</span> view of the Toolkit (by default this is shown in the bottom left corner of the Toolkit), then select the <span class=\'uicontrol\'>Properties</span> view and find the <span class=\'uicontrol\'>REST API Base URL</span> property.<br>Alternatively, right click  your integration node in the <span class=\'uicontrol\'>Integration Explorer</span> view of the Toolkit and choose <span class=\'uicontrol\'>Start Web User Interface</span>. From the web page that opens, select the correct integration server, select the deployed <span class=\'application\'>CustomerDatabaseV1</span> REST API, and find the <span class=\'uicontrol\'>REST API Base URL</span> property. For example, the value you are looking for will be something like this: <span class=\'userinput\'>http://localhost:7800/customerdb/v1</span>"}]}},{"section":"Next, click the <span class=\'uicontrol\'>Run</span> tab to see the steps that you complete to run the REST API."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using REST APIs","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12016_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Run the REST API","sections":[{"section":"To run the REST API, you need a REST client. If you do not have a dedicated REST client, most browsers, for example Google Chrome or Mozilla Firefox, have REST client extensions or add-ons that you can install in the browser."},{"section":"Call the REST API from a REST client to complete the following tasks:"},{"section":"<b>Add a customer</b>","steps":{"type":"ordered","details":[{"details":"Enter the following URL in your REST client:<br/><span class=\'userinput\'><span class=\'varname\'>baseURL</span>/customers</span><br/> where <span class=\'varname\'>baseURL</span> is the base URL of the REST API that you found in the previous section. For example:<br/><span class=\'userinput\'>http://localhost:7800/customerdb/v1/customers</span>"},{"details":"For the input object, specify the customer details in the following format:<br/><code>{<br/>\\"firstname\\" : \\"John\\",<br/>\\"lastname\\" : \\"Doe\\",<br/>\\"address\\" : \\"123 Main Street\\"<br/>}</code>"},{"details":"Select the POST method, and initiate the call. You should see the following response:<br/><span class=\'msgph\'>A new customer with ID <span class=\'varname\'>customerID</span> was successfully added to the database.</span>"}]}},{"section":"<b>List all customers</b>","steps":{"type":"ordered","details":[{"details":"Enter the following URL in your REST client:<br/><span class=\'userinput\'><span class=\'varname\'>baseURL</span>/customers</span>"},{"details":"Select the GET method, and initiate the call. You should see a list of all the customers in the database.<br/>"}]}},{"section":"<b>Get the details for a customer</b>","steps":{"type":"ordered","details":[{"details":"Enter the following URL in your REST client:<br/><span class=\'userinput\'><span class=\'varname\'>baseURL</span>/customers/<span class=\'varname\'>customerID</span></span><br/> where <span class=\'varname\'>customerID</span> is the ID of the customer whose details you want to get. For example:<br/><span class=\'userinput\'>http://localhost:7800/customerdb/v1/customers/3</span>"},{"details":"Select the GET method, and initiate the call. The response should contain the details of the customer. For example:<br/><span class=\'msgph\'>{\\"id\\":3,\\"firstname\\":\\"Lyle\\",\\"lastname\\":\\"Longino\\",\\"address\\":\\"3 The Street, The Town\\"}</span>"}]}},{"section":"<b>Update the details for a customer</b>","steps":{"type":"ordered","details":[{"details":"Enter the following URL in your REST client:<br/><span class=\'userinput\'><span class=\'varname\'>baseURL</span>/customers/<span class=\'varname\'>customerID</span></span>"},{"details":"For the input object, specify the customer details in the following format:<br/><code>{<br/>\\"firstname\\" : \\"Lyle\\",<br/>\\"lastname\\" : \\"Longino\\",<br/>\\"address\\" : \\"123 New Address, New Town\\"<br/>}</code><br/> Note: You must specify all fields in the customer record, not just the field that you want to update."},{"details":"Select the PUT method, and initiate the call. You should see the following response:<br/><span class=\'msgph\'>An existing customer with ID <span class=\'varname\'>customerID</span> was successfully updated in the database.</span>."}]}},{"section":"<b>Delete a customer</b>","steps":{"type":"ordered","details":[{"details":"Enter the following URL in your REST client:<br/><span class=\'userinput\'><span class=\'varname\'>baseURL</span>/customers/<span class=\'varname\'>customerID</span></span>"},{"details":"For the header, enter <code>Authorization : secr3t</code>."},{"details":"Select the DELETE method, and initiate the call. You should see the following response:<br/><span class=\'msgph\'>The customer with the specified ID was successfully deleted from the database.</span>."}]}},{"section":"<b>The following optional steps help you explore and understand the application</b>","steps":{"type":"ordered","details":[{"details":"In the Toolkit, a REST API is created from a Swagger document. To see the Swagger document that was used to create this REST API, double-click the <span class=\'filepath\'>swagger.json</span> file under <span class=\'application\'>CustomerDatabaseV1/Other Resources</span> in the <span class=\'uicontrol\'>Application Development</span> view. The file is opened in a text editor."},{"details":"When you use the Toolkit to create a REST API from a Swagger document, a REST API description is created. From the <span class=\'application\'>CustomerDatabaseV1</span> project, open the REST API Description for the REST API  (if it is not already open). Each URL path/HTTP Method combination is mapped to a logical operation name. From each operation, you can click a link to create a subflow where the operation functionality is defined."},{"details":"Click the <span class=\'uicontrol\'>/customers</span> and <span class=\'uicontrol\'>/customers/{customerId}</span> headers to expand and collapse the sections that show all the HTTP methods and operations that are defined for each URL path in this REST API."},{"details":"Click the <span class=\'uicontrol\'>Open the operation</span> links in the header of each operation to open the subflow that implements the operation.","substeps":{"type":"unordered","details":[{"details":"In the subflow that implements the <span class=\'resource\'>addCustomer</span> operation, double-click the Mapping node to see the transformation of the JSON input data using a custom Java class that simulates adding a customer to the registry. Select a Custom Java element in the mapping editor, and look at the Properties view to see the class name and operation that is responsible for performing the task. Click the <span class=\'uicontrol\'>Edit</span> button to view the Java code."},{"details":"In the subflow that implements the <span class=\'resource\'>getAllCustomers</span> operation, double-click the Compute node to see the ESQL code that handles the message created based on the JSON request object and creates the response message for the JSON response object."},{"details":"In the subflow that implements the <span class=\'resource\'>deleteCustomer</span> operation, double-click the Java Compute node to see the code that processes the REST API request and response messages."}]}},{"details":"In the <span class=\'uicontrol\'>Error Handling</span> section, click <span class=\'uicontrol\'>Implement the Catch handler</span>, <span class=\'uicontrol\'>Implement the Failure handler</span>, or <span class=\'uicontrol\'>Implement the Timeout handler</span> to create and open a subflow where you can implement error handling logic."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using REST APIs","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12016_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Manipulating messages in the JSON domain","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc28410_.htm","type":"web"}]}}}}},"Using a HTTP Input to drive a message flow":{"version":"0.6","pageContent":{"comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a HTTP Input to drive a message flow","shortDescription":"Learn how to use HTTPInput and HTTPReply nodes to expose an http URL that can drive a message flow","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"HTTP Input node"},{"title":"JSON parsing and writing"},{"title":"Transformation using graphical data mapping"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Develop a message flow which handles HTTP requests"},{"title":"Learn how HTTP endpoints are hosted in IBM App Connect Enterprise"},{"title":"Learn how to map JSON documents"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"In IBM App Connect Enterprise, you have several options on how to create an HTTP interface to external programs."},{"section":"If you want to use a standard interface definition, there are specialised development artefacts which simplify that process.  If you use WSDL for Web Service interactions then create an Integration Service, and if you use Swagger to define REST-style actions over a set of resources then create a REST API."},{"section":"However there are some http interactions which don\'t fit either of these categories. This tutorial shows how to create an RPC-style interaction over raw HTTP, where all requests to a particular URL are routed to a message flow for processing. In this case, the processing is a transformation step using a Mapping node."},{"section":"You will import the message flow to your Toolkit workspace, and send an HTTP request to the message flow by using the Flow exerciser."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Processing HTTP messages","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac56650_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click on the Import link to create and open the <span class=\'application\'>HTTPInputApplication</span> project in your workspace. Then click on the Prepare tab to see a description of what has been imported."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Imported projects","sections":[{"section":"You now have a project in your workspace called <span class=\'application\'>HTTPInputApplication</span>, which is shown under the Application Development section of your workbench. Inside that project is one message flow called <span class=\'application\'>HTTPInputMessageFlow</span>, which has been opened for you. There is also a mapping file called <span class=\'application\'>HTTPInputMessageFlow_Mapping.map</span>."},{"section":"Look at the Properties view for the HTTP Input node. The Basic tab configures the Path suffix for URL, which forms the endpoint that is exposed by this flow. The exact URL exposed to external applications depends on the listener port which has been configured for HTTP nodes on that Integration Node. Note also that the Input Message Parsing tab has been configured with JSON, because this message flow expects to receive JSON data on that URL."},{"section":"Double-click on the Mapping node to show the transformation which this flow performs on its requests. The example here shows that both input and outputs are both JSON format, and the input has been modelled as containing two input fields which are mapped to two output fields of different labels. A Move transform has been used, so the data is unchanged, but the field names will change. There is no separate message model file for these input and output types; the map itself has been refined to specify these fields by adding user-defined elements under the JSONObject type."},{"section":"Next, you will use the Flow exerciser to deploy the message flow, send an HTTP request to it, and observe the transformation. Click Run to see those steps."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Processing HTTP messages","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac56650_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"HTTP listeners","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc43700_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Creating or transforming a JSON message with a message map","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/sm12035_.html","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Create a local Integration Server for testing the flow:</b>","steps":{"type":"ordered","details":[{"details":"Next we will test the message flow using a local integration server, which we can create from within the Toolkit. From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'application\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}},{"section":"<b>Test the message flow using the Flow Exerciser:</b>","steps":{"type":"ordered","details":[{"name":"","details":"The <span class=\'application\'>HTTPInputApplication</span> application is shown in the Application Development view of your workspace. Open the <span class=\'application\'>HTTPInputMessageFlow</span>, and click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow."},{"name":"","details":"Click the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow."},{"name":"","details":"Choose the ExampleInputMessage1 and click Send. Your request message is sent to the HTTP input node."}]}},{"section":"After the request message is processed, the message path is automatically highlighted on the message flow."},{"section":"Click on any connection to see the data that passed through that connection. You can see that the request (input) message data has two fields named InputField1 and InputField2. The response (output) message has converted this to fields named OutputField1 and OutputField2."},{"section":"To stop recording the message path through the flow, click the Return flow to edit mode icon."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Mapping node to access a Lookup table that is stored in the Global Cache":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Mapping node to access a Lookup table that is stored in the Global Cache","shortDescription":"Learn how to use a Mapping node to access a Lookup table that is stored in the Global Cache by exploring this simple example.","durationText":"This tutorial takes approximately","durationTime":"6 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Cache Get and Cache Put transforms in a Mapping node"},{"title":"Global Cache"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use IBM App Connect Enterprise Mapping node Cache Get and Cache Put transforms to graphically access and load a Lookup table stored in the Global Cache.","outcomeList":[{"title":"Use IBM App Connect Enterprise to graphically access a Lookup table stored in the Global Cache using a Mapping node."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates graphically accessing the Global Cache. It shows the use of a Mapping node to replace an abbreviated value in a message with an associated full name from a Lookup table that is held in the Global Cache. Another Mapping node shows the loading of the Lookup table.","sections":[{"section":"This tutorial demonstrates how to graphically access the Global Cache in a Mapping node by using the Cache Get and Cache Put transforms."},{"section":"One Mapping node demonstrates the use of a Cache Get transform to replace an abbreviated value in the input message with the associated full name from a Lookup table that is in the Global Cache."},{"section":"Another Mapping node demonstrates the use of a Cache Put transform to populate a Lookup table in the Global Cache with data that is read from a comma-separated-values file."},{"section":"In IBM App Connect Enterprise, message flows can be used to transform and enrich input data structures into output data structures. Several transformation options are provided including a Mapping node, which allows the transformation and enrichment to be completed graphically. The Global Cache is a repository for data that you want to reuse regularly. The Mapping node can get, put, and remove data from the Global Cache."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Data caching overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn23730_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Accessing a global cache by using a Mapping node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/br26101_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Global cache scenario: Caching static data","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn23732_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import the application","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'application\'>Import</span> to import the application into your workspace."},{"section":"The <span class=\'application\'>LookupTable_UsingMappingGlobalCache</span> application is now shown in the Application Development view of your workspace. The <span class=\'msgflow\'>LookupCountyFullName</span> message flow is opened in the Message Flow editor."},{"section":"The <span class=\'msgflow\'>LookupCountyFullName</span> message flow contains a number of nodes:","steps":{"type":"unordered","details":[{"details":"<span class=\'uicontrol\'>HTTP Input</span>: An Input node that receives an input message that contains an abbreviated county name."},{"details":"<span class=\'uicontrol\'>LookupCountyFullName</span>: A Mapping node that accesses the global cache to interrogate the Lookup table for the full county name."},{"details":"<span class=\'uicontrol\'>FoundCountyFullName</span>: A Route node that determines the path that the message should take depending on whether the full county name was retrieved from the global cache."},{"details":"<span class=\'uicontrol\'>File Read</span>: A FileRead node that reads the file that contains the Lookup table data."},{"details":"<span class=\'uicontrol\'>LoadCache</span>: A Mapping node that loads the Lookup table data into the global cache."},{"details":"<span class=\'uicontrol\'>HTTP Reply</span>: A Reply node that returns a message that contains the full county name."}]}},{"section":"You can explore the configuration of these nodes later in the tutorial."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Data caching overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn23730_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Accessing a global cache by using a Mapping node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/br26101_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Accessing user-defined properties from a Mapping node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/br34267_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Preparing to run the application","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Perform the following steps to prepare your environment to run the <span class=\'application\'>LookupTable_UsingMappingGlobalCache</span> application.","steps":{"type":"ordered","details":[{"name":"Enable the default Global Cache","details":"Enable the embedded global cache by copying the GlobalCache entry in the <code>basic_1_catalog_1_container\\\\server.conf.yaml</code> found in the <code>ace-install-directory\\\\server\\\\sample\\\\globalcache</code> directory into your integration server server.conf.yaml file and following the instructions in this directory."},{"name":"Setup the location of the lookup table initialization data file","details":"Setup the location of the lookup table initialization data file by completing one of the following steps:","substeps":{"type":"unordered","details":[{"details":"On Windows: Create the input directory <code>C:\\\\temp</code>."},{"details":"On Linux: Change the Input directory property of the \'File Read\' node to a Linux path."}]}},{"name":"Copy the lookup table initialization data file","details":"Copy the <span class=\'filepath\'>CountyAbbrNames.csv</span> file from the \'Other Resources\' folder in the <span class=\'application\'>LookupTable_UsingMappingGlobalCache</span> application to the input directory that you created in step 2."},{"details":"Drag and drop deploy the shared library <span class=\'application\'>LookupTableCSVdata</span> on to your integration server."}]}},{"section":"Next you will use the Flow exerciser to send HTTP requests to the message flow."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileRead node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc34090_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to run the application","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Open the <span class=\'uicontrol\'>LookupCountyFullName</span> message flow from the application and complete the following steps:","steps":{"type":"ordered","details":[{"details":"Click the <span class=\'icon\'>Flow Exerciser</span> icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow."},{"details":"Click the <span class=\'icon\'>Send Message</span> icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> to select the first message to send to the flow."},{"details":"Select the \'Berks\' input message, and click <span class=\'uicontrol\'>Send</span>.<br/>The request message is sent to the HTTP Input node, and the response message containing the full name, \'Berkshire\', is received."},{"details":"Close the Send message dialog. <br/>The message path is automatically highlighted on the message flow. Note: The message path shows that the message was sent through the \'File Read\' and \'LoadCache\' Mapping nodes. Because the Lookup table was not in the Global Cache, the \'LookupCountyFullName\' Mapping node cannot find a match."},{"details":"Click on any connection to see the data that passed through that connection."},{"details":"Click the <span class=\'icon\'>Send Message</span> icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> again, to select the \'Hants\' message and send it to the flow by clicking <span class=\'uicontrol\'>Send</span>."},{"details":"Review the received message and close the Send message dialog to see the message path.<br/>Note: The message path shows that the message was sent directly to the \'HTTP Reply\' node. Because the Lookup table is in the Global Cache, the \'LookupCountyFullName\' Mapping node found a match and set the \'CountyFullName\'."}]}},{"section":"If you restart the integration node or integration server, or issue a <span class=\'cmdname\'>mqsicacheadmin</span> command to clear the Global Cache, the next message is sent through the \'File Read\' and \'LoadCache\' Mapping nodes again. (For example: <code>mqsicacheadmin --admin-host localhost --admin-port 7600 -c clearGrid -m CountyAbbrNames</code>)"},{"section":"<span class=\'uicontrol\'>The following optional steps help you explore and understand the application</span>"},{"section":"The <span class=\'msgflow\'>LookupCountyFullName</span> message flow uses an HTTP Input node to receive a JSON message that contains a \'CountyAbbr\' value. The \'CountyAbbr\' value is used in the \'LookupCountyFullName\' Mapping node to lookup the replacement full county name from the Global Cache.","steps":{"type":"ordered","details":[{"details":"Double click the \'LookupCountyFullName\' Mapping node to open the associated Graphical Data Map that includes the \'Cache Get\' transform."},{"details":"Click the \'Local map\' to enter the nested mapping. Note: The value for the input element, \'CountyAbbr\', is placed in the \'Environment\' so that it is not overwritten by the data that is retrieved from the <span class=\'filepath\'>\'CountyAbbrNames.csv</span> file."},{"details":"Click the \'Cache Get\' transform to enter the nested mapping for the transform and review the mapping of the \'Key\' that is used to select the entry in the Lookup table. Note: \'MapName\' is set by using a CustomXPath transform to configure a user-defined property."},{"details":"Click the up arrow <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/exitNestedMapping.png\' alt=\'\' /> to exit the nested mapping, then click the \'Cache Return\' transform to enter the nested mapping for the transform and review the mapping from the \'Value\' that is returned from the Global Cache."},{"details":"Click the \'Move\' transform and view the Condition tab in the Properties, to see that the \'Value\' element is created only if an entry is found in the Global Cache."},{"details":"Return to the message flow editor.<br/>The \'FoundCountyFullName\' Route node checks for the presence of the \'CountyFullName\' value:","substeps":{"type":"unordered","details":[{"details":"If the \'CountyFullName\' value exists, the message is routed directly to the \'HTTP Reply\' node."},{"details":"If the \'CountyFullName\' value does not exist (for example, if the Lookup table in the Global Cache is not populated), the message is routed to the \'File Read\' node. The \'File Read\' node retrieves name-value pairs from a comma-separated-values file that is parsed by using a DFDL CSV model. The name-value data is passed to the \'LoadCache\' Mapping node, where the data is loaded into a Lookup table in the Global Cache. The \'LoadCache\' mapping node also sets the \'CountyFullName\' value in the output message."}]}},{"details":"Double click the \'LoadCache\' Mapping node to open and explore the map and review the use of the \'Cache Put\' transform within the \'For each\' transform. Note: The value of \'CountyFullName\' for the current lookup request is taken directly from the data that is read from the comma-separated-values file."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"mqsicacheadmin command","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn23783_.htm","type":"web"}]}}}}},"Using a Compute node to access a Lookup table stored in a shared variable in memory":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Compute node to access a Lookup table stored in a shared variable in memory","shortDescription":"Learn how to use ESQL shared variables to access a Lookup table that is cached in memory by exploring this simple example.","durationText":"This tutorial takes approximately","durationTime":"6 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"ESQL shared variables"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use IBM App Connect Enterprise ESQL shared variables to access and load a Lookup table cached in memory.","outcomeList":[{"title":"Use IBM App Connect Enterprise to access a Lookup table, which is cached in memory, by using ESQL shared variables."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates how to implement a shared variable in-memory cache in a message flow. It shows using a Compute node to replace an abbreviated value in a message with an associated full name from a Lookup table that is cached in memory. Another Compute node shows how to load the Lookup table based upon CSV content stored in a local file.","sections":[{"section":"This tutorial demonstrates how to access in-memory ESQL shared variables using a Compute node."},{"section":"A Compute node demonstrates reading from an ESQL shared variable cached in memory, to replace an abbreviated value in an input message with the associated full name from a Lookup table."},{"section":"Another Compute node demonstrates writing to an ESQL shared variable cached in memory, to populate the Lookup table using data that has been read from a comma-separated-values file."},{"section":"In IBM App Connect Enterprise, ESQL shared variables can be used to implement an in-memory cache in a message flow. This technique is suitable for fast access to data that you want to reuse regularly. The Compute node can get, put, and remove data from shared variables."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=solutions-developing-integration-from-scratch","type":"web"},{"title":"IBM Documentation link to ","description":"Data caching overview","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=caching-data-overview","type":"web"},{"title":"IBM Documentation link to ","description":"Long-lived variables","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=overview-long-lived-variables","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import the application","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'application\'>Import</span> to import the application into your workspace."},{"section":"The <span class=\'application\'>LookupTable_UsingESQLSharedVariable</span> application is now shown in the Application Development view of your workspace. The <span class=\'msgflow\'>LookupCountyFullName</span> message flow is opened in the Message Flow editor."},{"section":"The <span class=\'msgflow\'>LookupCountyFullName</span> message flow contains six message flow nodes which can be traversed in two ways depending on whether or not the cache needs loading:","steps":{"type":"unordered","details":[{"details":"<span class=\'uicontrol\'>HTTP Input</span>: An Input node that receives an input message across HTTP that contains an abbreviated county name."},{"details":"<span class=\'uicontrol\'>LookupCountyFullName</span>: A Compute node that uses an ESQL shared variable of ROW type as an in-memory cache providing a Lookup facility to retrieve the full county name, by using the abbreviated county name as a key."},{"details":"<span class=\'uicontrol\'>FoundCountyFullName</span>: A Route node that determines the path that the message should take depending on whether the full county name was retrieved from the shared variable (if not, the flow attempts to re-populate the cache by reading from a file)"},{"details":"<span class=\'uicontrol\'>File Read</span>: A FileRead node that reads the file that contains the Lookup table data."},{"details":"<span class=\'uicontrol\'>LoadCache</span>: A Compute node that uses loads the Lookup table data which was read from the file into the ESQL shared variable."},{"details":"<span class=\'uicontrol\'>HTTP Reply</span>: A Reply node that returns a message across HTTP that contains the full county name."}]}},{"section":"You can explore the configuration of these nodes later in the tutorial."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=solutions-developing-integration-from-scratch","type":"web"},{"title":"IBM Documentation link to ","description":"Data caching overview","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=caching-data-overview","type":"web"},{"title":"IBM Documentation link to ","description":"Long-lived variable","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=overview-long-lived-variables","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Preparing to run the application","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Perform the following steps to prepare your environment to run the <span class=\'application\'>LookupTable_UsingESQLSharedVariable</span> application.","steps":{"type":"ordered","details":[{"name":"Setup the location of the lookup table initialization data file","details":"Setup the location of the lookup table initialization data file by completing one of the following steps:","substeps":{"type":"unordered","details":[{"details":"On Windows: Create the input directory <code>C:\\\\temp</code>."},{"details":"On Linux: Create a suitable input directory such as <code>/tmp</code> and change the Input directory property of the \'File Read\' node accordingly to point to the same directory."}]}},{"name":"Copy the lookup table initialization data file","details":"Copy the <span class=\'filepath\'>CountyAbbrNames.csv</span> file from the \'Other Resources\' folder in the <span class=\'application\'>LookupTable_UsingESQLSharedVariable</span> application in your Toolkit workspace, to the input directory on your file system that you created in step 2."}]}},{"section":"Next you will use the Flow exerciser to send HTTP requests to the message flow."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileRead node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-fileread-node","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to run the application","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Open the <span class=\'uicontrol\'>LookupCountyFullName</span> message flow from the application and complete the following steps:","steps":{"type":"ordered","details":[{"details":"Drag and drop deploy the shared library <span class=\'application\'>LookupTableCSVdata</span> on to your integration server."},{"details":"Click the <span class=\'icon\'>Flow Exerciser</span> icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow."},{"details":"Click the <span class=\'icon\'>Send Message</span> icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> to select the first message to send to the flow."},{"details":"Select the \'Berks\' input message, and click <span class=\'uicontrol\'>Send</span>.<br/>The request message is sent to the HTTP Input node, and the response message containing the full name, \'Berkshire\', is received."},{"details":"Close the Send message dialog. <br/>The message path is automatically highlighted on the message flow. Note: The message path shows that the message was sent through the \'File Read\' and \'LoadCache\' Compute nodes. Because the Lookup table was not yet cached in memory by the ESQL shared variables, the \'LookupCountyFullName\' Compute node cannot find a match."},{"details":"Click on any connection to see the data that passed through that connection."},{"details":"Click the <span class=\'icon\'>Send Message</span> icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> again, to select the \'Hants\' message and send it to the flow by clicking <span class=\'uicontrol\'>Send</span>."},{"details":"Review the received message and close the Send message dialog to see the message path.<br/>Note: The message path shows that the message was sent directly to the \'HTTP Reply\' node. Because the Lookup table is cached in memory, the \'LookupCountyFullName\' Compute node found a match and set the \'CountyFullName\'."}]}},{"section":"If you restart the integration node or integration server, the next message is sent through the \'File Read\' and \'LoadCache\' Compute nodes again."},{"section":"<span class=\'uicontrol\'>The following optional steps help you explore and understand the application</span>"},{"section":"The <span class=\'msgflow\'>LookupCountyFullName</span> message flow uses an HTTP Input node to receive a JSON message that contains a \'CountyAbbr\' value. The \'CountyAbbr\' value is used in the \'LookupCountyFullName\' Compute node to look up the replacement full county name from the in-memory cache.","steps":{"type":"ordered","details":[{"details":"Double-click the \'LookupCountyFullName\' Compute node to open the \'LookupCountyFullName.esql\' file."},{"details":"In the \'LookupCountyFullName_Compute\' ESQL module, the \'CountyFullName\' element is created only if an entry is found in the in-memory cache.  The cache is defined as the \'countyNameCache\' ESQL Shared Row variable.  The value for the input element, \'CountyAbbr\', is placed in the \'Environment\' so that it is not overwritten by the data that is retrieved from the <span class=\'filepath\'>\'CountyAbbrNames.csv\'</span> file."},{"details":"Return to the message flow editor.<br/>The \'FoundCountyFullName\' Route node checks for the presence of the \'CountyFullName\' value:","substeps":{"type":"unordered","details":[{"details":"If the \'CountyFullName\' value exists, the message is routed directly to the \'HTTP Reply\' node."},{"details":"If the \'CountyFullName\' value does not exist (for example, if the Lookup table is not yet cached in memory), the message is routed to the \'File Read\' node. The \'File Read\' node retrieves name-value pairs from a comma-separated-values file that is parsed by using a DFDL CSV model. The name-value data is passed to the \'LoadCache\' Compute node, where the data is loaded into the \'countyNameCache` Lookup table. The \'LoadCache\' Compute node also sets the \'CountyFullName\' value in the output message."}]}},{"details":"Double-click the \'LoadCache\' Compute node to open the \'LookupCountyFullName.esql\' file."},{"details":"In the \'LoadCache_Compute\' ESQL module, the Lookup table is created from the data that is read from the comma-separated-values file.  Within the table, each record is stored as a \'key\' and \'value\' pair, where the \'key\' is an abbreviated county name and the \'value\' is the related full county name.  The value of \'CountyAbbr\' for the current lookup request is taken directly from the \'Environment\'."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=ttmf-testing-your-message-flow-by-using-flow-exerciser","type":"web"}]}}}}},"Using a JavaCompute node to split up a large input file":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a JavaCompute node to split up a large input file","shortDescription":"Split a large input message into individual records by using Java transformation code, in a memory-efficient manner.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Transformation using Java"},{"title":"Working with files"},{"title":"Splitting a large message"}],"outcomesName":"Learning outcomes","outcomeList":[{"title":"Use Java in a message flow to transform data."}],"summary":{"overviewName":"OVERVIEW","sections":[{"section":"This tutorial demonstrates how to convert an input file that contains a single large XML document, and split it into multiple output files, one for each instance of a repeating element in that document."},{"section":"This implementation uses Java transformation code and avoids fully parsing the entire input file, which minimizes the amount of memory that is consumed during processing."}]}},"pageSteps":{"concept":{"overview":{"name":"Overview","heading":"Overview","_overviewComment":"A short description of what this tutorial does, and what the user will do to run the tutorial.","sections":[{"section":"This tutorial demonstrates how to convert an input file that contains a single large XML document, and split it into multiple output files, one for each instance of a repeating element in that document. It uses Java transformation code and avoids fully parsing the entire input file, which minimizes the amount of memory that is consumed during processing."},{"section":"The solution uses a JavaCompute node to process a large input XML message that contains sales data, in the form of a list of SaleList child XML elements. The input message is split into 10 individual messages by creating a new message from each SaleList child element. In this tutorial, FileInput and FileOutput nodes are used to handle the input and output messages."},{"section":"You will import the LargeMessages application to your Toolkit workspace, deploy it to an integration node owned server, and create a test  message in an input directory that will be processed by the flow. You will record the path taken through the message flow by using the Flow Exerciser."}]},"helpLinks":{"title":"Find out more","_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","details":[{"title":"IBM Documentation link to ","description":"Writing Java","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30300_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55170_.htm","type":"web"}]}},"create":{"overview":{"comment":"","name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"The Large messaging tutorial includes one project that is imported into your workspace, and the message flow is opened in the editor."}]},"helpLinks":{"title":"Find out more","_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","details":[{"title":"IBM Documentation link to ","description":"Writing Java","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30300_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55170_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare your development environment","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"After import, the application named <span class=\'application\'>LargeMessages</span> will be available in your workspace, and should now be shown in the Application Development view. There is a single message flow in the application also named <span class=\'application\'>LargeMessages</span> which should already have been opened for you. Inside the flow the FileInput node named MessageWithRepeatingElements monitors an input directory on the file system for files to process. By default, this is set to <code>C:\\\\temp_in</code>. The message flow also includes several FileOutput nodes which by default are set to write to <code>C:\\\\temp_out</code>.","steps":{"type":"ordered","details":[{"name":"","details":"Assuming you are using Windows, create the input directory <code>C:\\\\temp_in</code> and the output directory <code>C:\\\\temp_out</code> on your file system. If you are using Linux, you will need to create directories in a location of your choice, and then change the following flow node properties:","substeps":{"type":"unordered","details":[{"details":"The <span class=\'application\'>Input directory</span> property on the <span class=\'application\'>Basic</span> tab of the <span class=\'application\'>MessageWithRepeatingElements</span> node."},{"details":"The <span class=\'application\'>Directory</span> property on the <span class=\'application\'>Basic</span> tab of the <span class=\'application\'>RepeatedElementSlices</span> node."},{"details":"The <span class=\'application\'>Directory</span> property on the <span class=\'application\'>Basic</span> tab of the <span class=\'application\'>MessageSlicingComplete</span> node."},{"details":"The <span class=\'application\'>Directory</span> property on the <span class=\'application\'>Basic</span> tab of the <span class=\'application\'>General Failure</span> node."},{"details":"The <span class=\'application\'>Directory</span> property on the <span class=\'application\'>Basic</span> tab of the <span class=\'application\'>Malformed messages</span> node."}]}},{"details":"In the message flow, the memory-efficient record splitting is performed by the JavaCompute node labelled ProduceMessageSlicesFromRepeatingElements. You can double-click this node to see the Java code that is run."}]}}]},"helpLinks":{"title":"Find out more","_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","details":[{"title":"IBM Documentation link to ","description":"Writing Java","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30300_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55170_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"cleanupName":"Clean up","cleanupDescription":"Clean up and remove any changes made by the tutorial.","overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The following instructions assume you have a node-owned integration server already available which you will use in conjunction with the Flow Exerciser:","steps":{"type":"ordered","details":[{"details":"In the message flow editor, click the Flow Exerciser record icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow.","substeps":{"type":"unordered","details":[{"details":"The application is deployed to your default integration server, and the message flow is then running on your integration server and ready to process messages."},{"details":"When the message is processed, you will see the path taken through the flow."}]}},{"details":"Create an input directory on your file system that matches the directory that is monitored by the MessageWithRepeatingElements node."},{"details":"Copy the test XML message from <code>&lt;Toolkit workspace&gt;\\\\Large Messages\\\\inputSalesList.xml</code> to the input directory that you created on your file system.","substeps":{"type":"unordered","details":[{"details":"The file is processed by the message flow and deleted."}]}},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."}]}},{"section":"The input data has been split into 10 messages propagated to the Out terminal of the JavaCompute node named ProduceMessageSlicesFromRepeatingElement. You can double-click on the JavaCompute node to view the Java code that is executed to process the input message. To observe how the Java code works on the message tree, you can step through the code by using the Flow debugger while the flow processes the input message. You should observe that elements which have already been processed are freed from memory. To stop recording the message path through the flow, click the Return flow to edit mode icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/stopFlowExerciser.png\' alt=\'Return flow to edit mode\' />."}]},"helpLinks":{"title":"Find out more","_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","details":[{"title":"IBM Documentation link to ","description":"Writing Java","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30300_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55170_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow debugger","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ag11080_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Using a ResetContentDescriptor node to associate a new parser with a message in a flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a ResetContentDescriptor node to associate a new parser with a message in a flow","shortDescription":"Learn how to use the ResetContentDescriptor node to associate a new parser with a message, shown in this example of reacting to a parser exception on input to a flow.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"ResetContentDescriptor node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to re-parse messages within a flow."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a deliberately badly formed XML input message over HTTP. When the fail terminal of the HTTPInput node is triggered, a ResetContentDescriptor node is used to re-parse the input message as a BLOB (Binary Large OBject). The scenario demonstrates the ResetContentDescriptor node\'s ability to associate a new parser with the input message bitstream. This can be helpful in scenarios like the one demonstrated, when input data does not conform to the expected model and so down a fail / catch branch it can be reassociated with a less stringent data model and then used to generate a helpful error message for the consumer of the flow. Note that contrary to some popular misconceptions, the ResetContentDescriptor node does not change the message content, nor does it actually convert the message from one format to another."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleResetContentDescriptor</span>."},{"section":"<span class=\'application\'>ExampleResetContentDescriptor</span> provides a single message flow named <span class=\'resource\'>ResetContentDescriptor</span> which uses an HTTPInput node to receive a deliberately badly formed XML input message, which is sent down its Fail terminal. The following ResetContentDescriptor node re-associates the input message with the BLOB domain and then a Compute node takes this data and includes it within a CDATA section in a well formed XML message which is sent back to the original client as an HTTPReply at the end of the flow."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>ResetContentDescriptor.bar</span> which you will find inside the <span class=\'application\'>ExampleResetContentDescriptor</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ResetContentDescriptor.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"One saved input message named <span class=\'resource\'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage</span> contains this data:<br><span class=\'resource\'>&lt;message&gt;This message is invalid due to the closing tag&lt;message&gt;</span>"},{"details":"Click on the reply message and you will see that it contains this data:<br><span class=\'resource\'>&lt;Reply&gt;<br>&lt;Explanation>There was a problem doing an XML parse of the input data&lt;/Explanation&gt;<br>&lt;OriginalInput&gt;&lt;![CDATA[&lt;message&gt;This message is invalid due to the closing tag&lt;message&gt;]]&gt;&lt;/OriginalInput&gt;<br>&lt;/Reply&gt;</span>"},{"details":"After you close the dialog, the path taken through the message flow is highlighted."}]}}]}},{"section":"This tutorial has shown the ResetContentDescriptor node being used to associate a new parser with a message in a flow."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"ResetContentDescriptor node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04810_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a FlowOrder node to control the order of execution paths in a flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a FlowOrder node to control the order of execution paths in a flow","shortDescription":"Learn how to use the FlowOrder node to control the order of execution paths in a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"FlowOrder node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to control the order of execution in a message flow."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, which contains a single data field with mixed case data. Two separate HTTPInput nodes, which are triggered using different input URLs, are used to start the flow. These inputs drive two separate paths through the flow which contrast the use of a FlowOrder node to control the order of execution paths with the random ordering which occurs if two wires are connected from the same output terminal of a node."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleFlowOrder</span>."},{"section":"<span class=\'application\'>ExampleFlowOrder</span> provides a single message flow named <span class=\'resource\'>FlowOrder</span> which provides two separate HTTPInput nodes as entry points to the flow. Both branches of the flow start by tracing the input with a Trace node and then use an HTTPReply to reply to the requestor."},{"section":"The <span class=\'resource\'>/FlowOrder</span> branch of the flow then uses a FlowOrder node to execute two separate maps - the first one to lowercase the message data and the second one to uppercase the message data. Trace information is written to an output file."},{"section":"The <span class=\'resource\'>/RandomOrder</span> branch of the flow does not control the order of execution of the two separate maps, so the user has no control over whether the message data is first converted to lowercase and then uppercase or vice versa. Trace information is written to an output file."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare a trace directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s Trace node will attempt to write a trace file to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>FlowOrder.bar</span> which you will find inside the <span class=\'application\'>ExampleFlowOrder</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>FlowOrder.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Two saved messages are provided so you can execute both branches of the flow and compare the results. Each message provides the same input JSON message which contains mixed case data. To try out the FlowOrder branch select the input message <span class=\'resource\'>FlowOrder</span>. Try out the RandomOrder branch, select the input message <span class=\'resource\'>RandomOrder</span>. Click Send and your message is sent to the HTTPInput node."},{"details":"Both <span class=\'resource\'>FlowOrder</span> and <span class=\'resource\'>RandomOrder</span> contain this data:<br><span class=\'resource\'>{\\"message\\":\\"This is a MiXeD case message\\"}</span>"},{"details":"After you close the dialog, the path taken through the messageflow is highlighted. Using a text editor, open the trace file <span class=\'resource\'>C:\\\\temp\\\\TraceFlowOrder.txt</span>. If you executed the FlowOrder branch, the trace file should read like this:<br><code>2019-08-02 17:08:38.802437 = The FlowOrder path has been invoked ...</code><br><code>2019-08-02 17:08:38.806927 = The message tree is set to: \'this is a mixed case message\'</code><br><code>2019-08-02 17:08:38.808863 = The message tree is set to: \'THIS IS A MIXED CASE MESSAGE\'</code><br>If you executed the RandomOrder branch, then the trace file entries may or may not be the other way around(!)"}]}}]}},{"section":"This tutorial has shown the FlowOrder node control the order of execution paths in a flow."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FlowOrder node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04790_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Validate node to check a message against an XML schema":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Validate node to check a message against an XML schema","shortDescription":"Learn how to use the Validate node to check a message against an XML schema in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Validate node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to validate XML message data in a flow using an XML schema."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives an XML input message over HTTP, and checks the data against an XML schema using a Validate node. Two example input messages are provided, one which will fail validation and one which will pass validation. Graphical mapping nodes are used in both cases to construct a reply message which is returned to the requesting client using an HTTPReply node."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleValidate</span>."},{"section":"<span class=\'application\'>ExampleValidate</span> provides a single message flow named <span class=\'resource\'>Validate</span> which receives data using an HTTPInput node. This node is configured to expect an XML message which conforms to <span class=\'resource\'>ExampleModel.xsd</span> although the HTTPInput node itself is not set up to validate the message immediately. The next node in the flow is a Validate node which checks the input XML against the XML schema. The message is sent down the Match or Failure terminal depending on whether validation passes or fails. Next the graphical mapping node generates a suitable reply which is returned using the HTTPReply node at the end of the flow."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>Validate.bar</span> which you will find inside the <span class=\'application\'>ExampleValidate</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Validate.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Two saved messages are provided.<br>The input message <span class=\'resource\'>ExampleFAIL</span> contains this data:<br><span class=\'resource\'>&lt;Message&gt;&lt;InvalidName&gt;This message will FAIL validation&lt;/InvalidName&gt;&lt;/Message&gt;</span><br>The input message <span class=\'resource\'>ExamplePASS</span> contains this data:<br><span class=\'resource\'>&lt;Message&gt;&lt;Child&gt;This message will PASS validation&lt;/Child&gt;&lt;/Message&gt;</span><br>Select one of these input messages and click Send and your message is sent to the HTTPInput node."},{"details":"After you close the dialog, the path taken through the messageflow is highlighted. Try out both the input messages and note that the reply message reports the result of whether the validation passed or failed."}]}}]}},{"section":"This tutorial has shown the Validate node check a message against an XML schema."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Validate node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20803_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Validate node to check a message against a JSON schema":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Validate node to check a message against a JSON schema","shortDescription":"Learn how to use the Validate node to check a message against a JSON schema in a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Validate node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to validate JSON message data in a flow using a JSON schema."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and checks the data against a JSON schema using a Validate node. Two example input messages are provided, one which will fail validation and one which will pass validation. Graphical mapping nodes are used in both cases to construct a reply message which is returned to the requesting client using an HTTPReply node."},{"section":"The tutorial requires an ACE integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleValidateJSON</span>."},{"section":"<span class=\'application\'>ExampleValidateJSON</span> provides a single message flow named <span class=\'resource\'>ValidateJSON</span> which receives data using an HTTPInput node. This node is configured to expect a JSON message which conforms to the JSON schema named <span class=\'resource\'>OrderSchema.json</span> although the HTTPInput node itself is not set up to validate the message immediately. The next node in the flow is a Validate node which checks the input JSON against the JSON schema. The message is sent down the Match or Failure terminal depending on whether validation passes or fails. Next the graphical mapping node generates a suitable reply which is returned using the HTTPReply node at the end of the flow."},{"section":"Once imported, the provided project is ready to be deployed and tested, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create a local integration server","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"Use the Flow Exerciser to test out the flow:","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ValidateJSON.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Two saved messages are provided."},{"details":"The input message <span class=\'resource\'>ValidationFail</span> contains this data:<br><code>{<br>\\"Initials\\":\\"Fred\\",<br>\\"Surname\\":\\"Bloggs\\",<br>\\"Item\\": {<br>\\"Code\\": 123,<br>\\"Description\\": \\"Crystal Ball\\",<br>\\"Category\\": \\"Futuristic Equipment\\",<br>\\"Price\\": \\"99.99\\",<br>\\"Quantity\\": 1<br>}<br>}</code><br>Note that the Price is provided as a String, although the JSON schema model defines it to be a number. Select this input messages and click Send and your message is sent to the HTTPInput node. You will receive a reply message stating that the message failed validation. After you close the dialog, the path taken through the messageflow will be highlighted."},{"details":"The input message <span class=\'resource\'>ValidationPass</span> contains this data:<br><code>{<br>\\"Initials\\":\\"Fred\\",<br>\\"Surname\\":\\"Bloggs\\",<br>\\"Item\\": {<br>\\"Code\\": 123,<br>\\"Description\\": \\"Crystal Ball\\",<br>\\"Category\\": \\"Futuristic Equipment\\",<br>\\"Price\\": 99.99,<br>\\"Quantity\\": 1<br>}<br>}</code><br>This version of the message conforms correctly to the JSON schema model which defines the Price as a number. Select this input messages and click Send and your message is sent to the HTTPInput node. You will receive a reply message stating that the message passed validation. After you close the dialog, the path taken through the messageflow will be highlighted."}]}}]}},{"section":"This tutorial has shown the Validate node check a message against a JSON schema."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Validate node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20803_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Throw node to throw an exception in a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Throw node to throw an exception in a message flow","shortDescription":"Learn how to use the throw node to throw an exception and use the Compute node to navigate the resulting ExceptionList.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Throw node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to throw user exceptions and handle the ExceptionList in a message flow."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP (any valid JSON data will do in terms of the design of the flow). The next node is a Throw node which generates a user exception which can include text defined by the flow developer as a property of the Throw node. When an exception is thrown in the message flow, it is caught by the Catch terminal of the HTTPInput node and passed to a Compute node. The Compute node is used to navigate the exception list and extract human readable data for insertion into an HTTPReply. An exception list contains information about exceptions, such as error numbers, the name of the node that generated the exception, and the reason for the exception. Typically, the most interesting information in an exception list is contained in the last exception which is most nested inside the exception list structure. An ESQL procedure is provided with the tutorial that navigates to the details of the last exception and constructs the final reply message which is returned to the requesting client using an HTTPReply node."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleThrowException</span>."},{"section":"<span class=\'application\'>ExampleThrowException</span> provides a single message flow named <span class=\'resource\'>ThrowException</span> which receives data using an HTTPInput node. The next node in the flow is a Throw node which generates a user exception. The message is returned to the HTTPInput node and sent down its Catch terminal. Next the Compute node ESQL navigates through the ExceptionList structure, extracts the human readable text explaining the reason for the exception and embeds it within a suitable reply which is returned using the HTTPReply node at the end of the flow."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>ThrowException.bar</span> which you will find inside the <span class=\'application\'>ExampleThrowException</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ThrowException.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved message is provided.<br>The input message <span class=\'resource\'>InputMessage</span> contains this data:<br><span class=\'resource\'>{\\"Message\\": \\"This can be anything\\"}</span><br>Select the input message and click Send and your message is sent to the HTTPInput node."},{"details":"After you close the dialog, the path taken through the messageflow is highlighted."}]}}]}},{"section":"This tutorial has shown how to use the Throw node to throw an exception and how to use the Compute node to navigate the resulting ExceptionList."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Throw node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04830_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Accessing the ExceptionList tree using ESQL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac16830_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a TryCatch node to catch an exception thrown within a section of a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a TryCatch node to catch an exception thrown within a section of a message flow","shortDescription":"Learn how to use the TryCatch node to isolate exceptions which are thrown from different parts of a message flow.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"TryCatch node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to catch user exceptions and route them using the TryCatch node in a message flow."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP. Depending on the data in the message, the flow will either throw a user exception in the Compute node which follows the HTTPInput, or allow the message to carry on through a TryCatch node before throwing an exception from a Throw node. Each branch of flow logic uses a separate Mapping node to construct a reply message which is sent back to the HTTP Requestor using the HTTPReply node. This flow layout demonstrates how a TryCatch node can be used to route the handling of user exceptions down separate branches in a flow. This can be helpful if you wish to write exception handling logic which is specific for particular kinds of exception as it avoids all exceptions flowing back to the Catch terminal of your input node."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleTryCatch</span>."},{"section":"<span class=\'application\'>ExampleTryCatch</span> provides a single message flow named <span class=\'resource\'>TryCatch</span> which receives data using an HTTPInput node. The next node in the flow is a Compute node which depending on the content of the input message will either throw a user exception, or pass the message on to the next node in the flow which is a TryCatch node. If the Compute node throws an exception then the message is returned to the HTTPInput node and sent down its Catch terminal.  Alternatively, the message is sent to the TryCatch node. The TryCatch node acts like a valve.  Initially, the input message is routed through the node unchanged to the Try terminal. If a downstream node throws an exception, like the Throw node in this example flow, the TryCatch node catches it and routes the original message to its Catch terminal. You can connect the Catch terminal to further nodes to provide error processing for the message after an exception. Each branch of flow logic uses a separate Mapping node to construct a reply message which is sent back to the HTTP Requestor using the HTTPReply node. This flow layout demonstrates how a TryCatch node can be used to route the handling of user exceptions down separate branches in a flow. This can be helpful if you wish to write exception handling logic which is specific for particular kinds of exception as it avoids all exceptions flowing back to the Catch terminal of your input node."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>TryCatch.bar</span> which you will find inside the <span class=\'application\'>ExampleTryCatch</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>TryCatch.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Two saved messages are provided.<br>The input message <span class=\'resource\'>Input_UseCatchOnHTTPInput</span> contains this data:<br><span class=\'resource\'>{\\"Message\\": \\"Use catch terminal on HTTPInput node\\"}</span><br>The input message <span class=\'resource\'>Input_UseCatchOnTryCatch</span> contains this data:<br><span class=\'resource\'>{\\"Message\\": \\"Use catch terminal on TryCatch node\\"}</span><br>Select one of the input messages and click Send and your message is sent to the HTTPInput node."},{"details":"After you close the dialog, the path taken through the messageflow is highlighted. Try both input messages and note how the choice of data in the input message causes each flow branch to be executed."}]}}]}},{"section":"This tutorial has shown how to use the TryCatch node to isolate exceptions which are thrown from different parts of a message flow."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"TryCatch node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04850_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a WorkLoad Management Policy to restrict the maximum throughput of a flow":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a WorkLoad Management Policy to restrict the maximum throughput of a flow","shortDescription":"Learn how to use a Workload Management Policy to control the throughput of a message flow.","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"EventRoutingFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Workload Management Policies"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to use a Workload Management Policy to limit the throughput of a Message Flow."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to use a Workload Management Policy to control the maximum throughput of a message flow. This use of a Workload Management Policy is particularly useful when backend systems that a message flow interacts with are unable to keep up with a workload sent from a requesting application."},{"section":"This tutorial provides a message flow that performs a simple transformation of an XML input message received over HTTP before sending a reply to the requesting application."},{"section":"If you are using Developer Edition, which restricts message processing to 1 message per second, or your system is unable to process messages through the flow at a rate that exceeds 1 message per second then you will not be able to observe the effects of attaching a Workload Management Policy that is demonstated by this tutorial."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDL Schemas","link":"http://github.com/DFDLSchemas","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> to add the required projects to your workspace:","steps":{"type":"ordered","details":[{"name":"The application named <span class=\'application\'>WorkloadManagementApplication</span> contains the following resources.","details":"The application named <span class=\'application\'>WorkloadManagementApplication</span> contains the following resources.","substeps":{"type":"unordered","details":[{"details":"A message flow named <span class=\'msgflow\'>WorkloadManagementFlow</span> that receives an HTTP message, performs a simple transformation and then sends an HTTP reply."},{"details":"An XML input message named <span class=\'resource\'>TestMessage.xml</span> to test the message flow with."},{"details":"A BAR File named <span class=\'resource\'>wlm.bar</span> which contains <span class=\'application\'>WorkloadManagementApplication</span>, which itself contains <span class=\'msgflow\'>WorkloadManagementFlow</span>. The message flow has been configured to refer to the Workload Management policy (which is described below)."}]}},{"details":"The policy project named <span class=\'application\'>MyPolicies</span> contains a Workload Management Policy named <span class=\'application\'>WLM_MaxRate_Policy</span>. To start with this policy defines a Maximum Rate (messages per second) of 100,000. Later in the tutorial we will show the impact of changing this threshold."},{"details":"The two java projects named <span class=\'application\'>PerfHarness</span> and <span class=\'application\'>HTTPPerfHarness</span> jointly provide a testing capability which we will use to drive workload through the message flow."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Workload management","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bj58250_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Setting the maximum rate for a message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bj58270_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<h4>Deploy the Application, Message Flow and Workload Management Policy</h4>"},{"section":"This tutorial assumes you have an Integration node owned integration server, or a stand-alone integration server already created. Other tutorials in the tutorial gallery will help you with this if you\'re not sure what this means."},{"section":"To deploy the artifacts locate the provided BAR file named <span class=\'msgflow\'>wlm.bar</span> inside the application project named <span class=\'application\'>WorkloadManagementApplication</span>, and drag and drop it on to your integration server in the Integration Explorer view (by default shown in the bottom left corner of your Toolkit)."}]}},"run":{"overview":{"name":"Run","heading":"Test the scenario","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"To test the scenario, you will generate a workload of messages for the message flow which runs for one minute. The message processing rate will be reported. Next, you will update the Workload Management Policy and redeploy it before repeating the one minute test, which will demonstrate the message processing rate being limited."},{"section":"<h4>Generating a workload of messages</h4>"},{"section":"The PerfHarness Test Tool is a small java utility written by IBM and freely available to help you generate a workload of HTTP request messages that are processed by the <span class=\'msgflow\'>WorkloadManagementFlow</span> message flow. The link below provides more details about the PerfHarness tool, but for simplicity the tool is already available for you to run from your Toolkit workspace using the projects you imported earlier in this tutorial:","steps":{"type":"ordered","details":[{"details":"Check the properties of your integration server to determine which port is being used by the HTTP Input node in the deployed message flow. By default this is likely to be port 7800."},{"details":"Expand the <span class=\'application\'>src</span> folder of the <span class=\'application\'>PerfHarness</span> project, right-click <span class=\'application\'>JMSPerfHarness.java</span> and choose the menu option Run As > Run Configurations. From the list, select Java Application and click the New Configuration button to create a new run configuration."},{"details":"On the <span class=\'application\'>Main</span> tab, check that <span class=\'varname\'>Project = PerfHarness</span> and <span class=\'varname\'>Main class = JMSPerfHarness</span>"},{"details":"On the <span class=\'application\'>Arguments</span> tab, copy and paste the following into the Program arguments text window: <code>-tc http.HTTPRequestor -rl 60 -jh localhost -jp <span class=\'varname\'>{HTTPPort}</span> -mf <span class=\'varname\'>{WorkspacePath}</span>/WorkloadManagementApplication/TestMessages/TestMessage.xml -wi 10 -to 10000 -sh false -ws 1 -dn 1 -sc BasicStats -ss 5 -nt 1 -ur wlm</code><br>where:<br><span class=\'varname\'>{HTTPPort}</span> is the port the Integration Server is listening on for HTTP requests from the previous step<br><span class=\'varname\'>{WorkspacePath}</span> is the location of your current Toolkit workspace."},{"details":"On the <span class=\'application\'>Classpath</span> tab, select <span class=\'application\'>User Entries</span>, click <span class=\'application\'>Add Projects</span>, and select the <span class=\'application\'>HTTPPerfHarness</span> and <span class=\'application\'>PerfHarness</span> projects"},{"details":"When you click Run, the PerfHarness will run for 60 seconds and every 5 seconds output the message rate at which it is processing messages. The actual message rate achieved will be dependent upon the performance of your system but it needs to be in excess of 1 message per second for you to observe the effects of applying the Workload Management Policy in this tutorial."}]}},{"section":"<h4>Redeploy the Workload Management Policy with a lower rate to restrict the message throughput</h4>"},{"section":"Use the <span class=\'application\'>WLM_MaxRate_Policy</span> Workload Management Policy to restrict the throughput of the <span class=\'msgflow\'>WorkloadManagementFlow</span> message flow by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Look inside the <span class=\'application\'>MyPolicies</span> project, open <span class=\'application\'>WLM_MaxRate_Policy</span> and change the <span class=\'application\'>Maximum Rate (Messages per second)</span> parameter from its current value of 100000 to the value 1."},{"details":"Deploy the update by dragging and dropping the <span class=\'application\'>MyPolicies</span> project on to the integration server."}]}},{"section":"<h4>Re-run the workload with the new Workload Management Policy in place</h4>"},{"section":"Now the Workload Management Policy has been updated, repeat the same test as before and observe that the message processing rate has now been limited to 1 message per second."}]},"helpLinks":{"title":"Find out more","details":[{"title":"developerWorks link to ","description":"Performance testing with PerfHarness","link":"https://developer.ibm.com/open/2016/05/12/performance-testing-with-perfharness/","type":"web"},{"title":"GitHub link to ","description":"PerfHarness download","link":"https://github.com/ot4i/perf-harness?cm_mc_uid=42692352179214933019160&cm_mc_sid_50200000=","type":"web"}]}}}}},"Using a LoopBack Request node to insert data into a Cloudant database":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a LoopBack Request node to insert data into a Cloudant database","shortDescription":"Learn how to use the LoopBackRequest node to create a JSON document in a Cloudant database","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"LoopBackRequest node"},{"title":"Cloudant DB"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use a LoopBackRequest node to insert JSON documents into a Cloudant database"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON message over HTTP, and uses a LoopBackRequest node to insert the document into a NoSQL Cloudant database. This tutorial describes how to use npm to install a LoopBack connector for Cloudant, and the required configuration to let the LoopBackRequest node locate and authenticate a connection with a Cloudant database instance running on IBM Bluemix."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"Working with LoopBack Connectors","description":"Working with LoopBack Connectors","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90800_.htm","type":"web"},{"title":"More detailed LoopBackRequest node tutorial","description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)","link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, an application will be created in your workspace named <span class=\'application\'>LoopBack</span>."},{"section":"The application <span class=\'application\'>LoopBack</span> contains a message flow named <span class=\'msgflow\'>LoopBack_Cloudant.msgflow</span> which contains an HTTPInput node, LoopBackRequest node and HTTPReply node."},{"section":"The HTTPInput node has a path suffix <code>/LoopBack_Cloudant</code>."},{"section":"The LoopBackRequest node has a datasource property of <code>CLOUDANT</code>, and is configured to interact with a LoopBack object named <code>share_price</code> (in our example this is the name of the Cloudant database). The <code>Create</code> operation is selected so that the JSON structure passed in to the LoopBackRequest node is inserted into the Cloudant database."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Working with LoopBack Connectors","description":"Working with LoopBack Connectors","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90800_.htm","type":"web"},{"title":"More detailed LoopBackRequest node tutorial","description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)","link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of the required preparation steps.","sections":[{"section":"<h4>Create the Cloudant Database</h4>","steps":{"type":"ordered","details":[{"details":"This tutorial assumes the availability of a non-partitioned Cloudant database. You can use IBM Cloud to provide this (free of charge). Sign into IBM Cloud, find Cloudant in the Databases section of the Catalog, and create an instance of the Cloudant service. "},{"details":"Navigate to the Service Credentials section. If this is a new instance of Cloudant you will need to generate some new Service credentials. If you are generating new credentials you can choose the default options. When you view the Service credentials, you will find connection details that we will be using to tell ACE how to communicate with your IBM Cloud Cloudant instance. They will look similar to the following JSON (don\'t be surprised if you see some additional fields listed as well - for example related to the use of IAM):<br><span class=\'resource\'>{<br>&quot;username&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix&quot;,<br>  &quot;password&quot;: &quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;,<br>  &quot;host&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix.cloudantnosqldb.appdomain.cloud&quot;,<br>  &quot;port&quot;: 443,<br>  &quot;url&quot;: &quot;https://aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb@aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix.cloudant.com&quot;<br>}</span>"},{"details":"Switch to the Cloudant dashboard part of the service and create a database called <code>share_price</code>."}]}},{"section":"<h4>Configure the ACE LoopBack connector</h4>","steps":{"type":"ordered","details":[{"details":"To use the LoopBackRequest node in this tutorial, you must install the Cloudant LoopBack connector. Open the App Connect Enterprise Command Console:<br><code><span class=\'cmdname\'> cd</span> <span class=\'varname\'> %MQSI_WORKPATH%\\\\node_modules </span></code><br><code><span class=\'cmdname\'> npm install loopback-connector-cloudant </span></code>"},{"details":"If you don\'t already have one, create a datasources.json file in the connectors/loopback folder of your ACE workpath (by default on Windows, this will be at C:\\\\ProgramData\\\\IBM\\\\MQSI\\\\connectors\\\\loopback). This is where ACE stores connection information for Loopback Request node instances."},{"details":"Add a stanza to the datasources.json file:<br><code><span class=\'cmdname\'> { &quot;CLOUDANT&quot;:{&quot;database&quot;: &quot;share_price&quot;,&quot;name&quot;: &quot;CLOUDANT&quot;,&quot;host&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix.cloudantnosqldb.appdomain.cloud&quot;,&quot;port&quot;: 443,&quot;connector&quot;: &quot;cloudant&quot;}}</code>"},{"details":"From your command console, create an integration node (if you don\'t already have one):<code><span class=\'cmdname\'> mqsicreatebroker TESTNODE</span></code>"},{"details":"From your command console, configure ACE with your Cloudant security credentials like this:<br><code><span class=\'cmdname\'> mqsisetdbparms TESTNODE -n loopback::CLOUDANT_SEC_ID -u aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix -p bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb </span></code>"},{"details":"From your command console, start your node: <code><span class=\'cmdname\'> mqsistart TESTNODE</span></code>"},{"details":"From your command console, create an integration server (if you don\'t already have one): <code><span class=\'cmdname\'> mqsicreateexecutiongroup TESTNODE -e default</span></code>"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"Working with LoopBack Connectors","description":"Working with LoopBack Connectors","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90800_.htm","type":"web"},{"title":"More detailed LoopBackRequest node tutorial","description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)","link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Use the Flow Exerciser to test the tutorial scenario","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Having prepared the scenario, the following steps describe how to use the Flow Exerciser to test the message flow:","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>LoopBack_Cloudant.msgflow</span>."},{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow"},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Select the saved message which has been provided, named <span class=\'resource\'>InputMessage</span>, and click Send:<br><span class=\'resource\'>{&quot;companyID&quot;:&quot;100&quot;,&quot;company&quot;:&quot;IBM UK Ltd&quot;,&quot;price&quot;:199}</span><br>Your message is sent to the HTTPInput node."},{"details":"A response should be shown, which now includes an id that the database has created and given to the document, which should look like this:<br><span class=\'resource\'>{&quot;id&quot;:&quot;de28e5b037b01a3670d9b9f8d459deb5&quot;,&quot;companyID&quot;:&quot;100&quot;,&quot;company&quot;:&quot;IBM UK Ltd&quot;,&quot;price&quot;:199}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."}]}},{"section":"This tutorial has shown the LoopBackRequest node creating a JSON document in a Cloudant database."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Working with LoopBack Connectors","description":"Working with LoopBack Connectors","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90800_.htm","type":"web"},{"title":"More detailed LoopBackRequest node tutorial","description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)","link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/","type":"web"}]}}}}},"Using a SalesforceRequest node to retrieve records from Salesforce.com":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a SalesforceRequest node to retrieve records from Salesforce.com","shortDescription":"Learn how to use the SalesforceRequest node to retrieve records from Salesforce.com.","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"SalesforceRequest node"},{"title":"Configuring a connection to Salesforce"},{"title":"Mapping using JSON schema"}],"outcomesName":"Learning outcomes","_outcomesComment":"An understanding of how IBM App Connect Enterprise can be used to ...","outcomeList":[{"title":"An understanding of how IBM App Connect Enterprise can be used to access records in Salesforce systems."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates a simple message flow which ...","sections":[{"section":"This tutorial demonstrates a simple message flow which retrieves existing Account records from a Salesforce system using the SalesforceRequest node. The flow exposes a HTTP service which accepts some filter properties to limit the number of Account records returned. The records are returned as an array of JSON objects."},{"section":"The SalesforceRequest node in IBM App Connect Enterprise allows message flows to be developed that can Create, Retrieve, Update and Delete records for the different objects that exist in a Salesforce system, such as Account, Contact and Lead. Records may be retrieved by Salesforce ID, by custom external ID, or by SOQL WHERE clause. Records may be updated by Salesforce ID or by custom external ID. Records may be deleted by Salesforce ID."},{"section":"The SalesforceRequest node uses the Force.com REST API to exchange data with Salesforce, and so the input and output message trees for the SalesforceRequest node are in the JSON domain."},{"section":"Each Salesforce object is described by a JSON schema, which may be used as the input or output schema for a Mapping node. The JSON schema for Salesforce objects are provided in the server/sample/Salesforce folder of your IBM App Connect Enterprise installation, and must be copied into a shared library or REST API project. The map using the JSON schema must reside in the same container as the schema."},{"section":"You will import an application and a shared library into your Toolkit workspace, configure the connection to the Salesforce system, and invoke the message flow using the Flow Exerciser."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with Salesforce","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90600_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'application\'>Salesforce_Retrieve</span> application and <span class=\'library\'>Salesforce_Schemas</span> shared library will be imported into your workspace."},{"section":"The <span class=\'msgflow\'>Salesforce_Retrieve</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with Salesforce","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90600_.htm","type":"weB"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Imported projects","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The <span class=\'application\'>Salesforce_Retrieve</span> application and <span class=\'library\'>Salesforce_Schemas</span> shared library are now shown in the Application Development view of your workspace."},{"section":"Click on the <span class=\'icon\'>Salesforce Request</span> node in the message flow. In the Properties view, the <span class=\'property\'>Operation</span> is <span class=\'userinput\'>Retrieve</span> and the <span class=\'property\'>Salesforce object</span> is <span class=\'userinput\'>Account</span>."},{"section":"Change the <span class=\'property\'>Salesforce URL</span> property to the URL of a Salesforce system to which you have access. "},{"section":"In order for the SalesforceRequest node to communicate with Salesforce, a Connected App must be created in the Salesforce system and a Security Identity must be created in IBM App Connect Enterprise using <span class=\'cmdname\'>mqsisetdbparms</span>. Follow the <span class=\'uicontrol\'>Configuring a secure connection to Salesforce.com</span> link in the <span class=\'uicontrol\'>Find out more</span> section to perform these tasks. The Security Identity should be called <span class=\'resource\'>sf1</span> to match the <span class=\'icon\'>Salesforce Request</span> node property, or you can create one with your own name and update the node property.<br>If you are using a standalone integration server (where C:\\\\MyServer is the server\'s work directory) then the command will look similar to this:<br/><code><span class=\'cmdname\'>mqsisetdbparms</span> -w C:\\\\MyServer -n salesforce::sf1 -u myUserID -p myPassword -c myClientIdentity -s myClientSecret</code><br/>If you are using a node-owned integration server (where TESTNODE is the name of the integration node) then the command will look similar to this:<br><code><span class=\'cmdname\'>mqsisetdbparms</span> TESTNODE -n salesforce::sf1 -u myUserID -p myPassword -c myClientIdentity -s myClientSecret</code>"},{"section":"Restart your integration node (or server) for the mqsisetdbparms command to take effect."},{"section":"Next you will use the Flow exerciser to send HTTP requests to the message flow."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Configuring a secure connection to Salesforce.com","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90640_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with Salesforce","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90600_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Creating or transforming a JSON output message by using a JSON schema","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/sm12036_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Having set-up the required security identity, we will now deploy and test the scenario:","steps":{"type":"ordered","details":[{"details":"Drag and drop deploy the shared libarary named <span class=\'application\'>Salesforce_Schemas</span> on to your integration server."},{"details":"Open the <span class=\'msgflow\'>Salesforce_Retrieve</span> message flow and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to deploy the flow and start recording."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow."},{"details":"Choose <span class=\'filepath\'>Input.json</span>. The JSON message data contains two filter parameters, <span class=\'parmname\'>Limit</span> and <span class=\'parmname\'>Skip</span>. These will be set in the LocalEnvironment section used for the SalesforceRequest node, and control the number of records that are returned. Change the values if you want more than 10 records, or if you want to skip records."},{"details":"Click Send. Your message is sent to the <span class=\'icon\'>HTTP Input</span> node."},{"details":"In the Progress Information dialog, click on <span class=\'property\'>Received HTTP reply message ...</span> to view the output message from the flow. The Account records have been returned as a JSON array."}]}},{"section":"After you close the dialog, the message path is automatically highlighted on the message flow. Click on any connection to see the data that passed through that connection. You can see that:","steps":{"type":"unordered","details":[{"details":"The <span class=\'icon\'>Prepare Filter Map</span> node set the <span class=\'parmname\'>Limit</span> and <span class=\'parmname\'>Skip</span> values in the LocalEnvironment section used for the SalesforceRequest node."},{"details":"The <span class=\'icon\'>Salesforce Request</span> node retrieved up to the number of Account records specified by <span class=\'parmname\'>Limit</span>  and <span class=\'parmname\'>Skip</span>, and propagated them as a JSON array."},{"details":"The <span class=\'icon\'>Select Fields Map</span> node removed unwanted fields from each record in the array, using a map built from the JSON schema for the Account object."}]}},{"section":"Repeat the steps above, but this time choose message <span class=\'filepath\'>InputWithWhere.json</span>. The JSON message data additionally contains a <span class=\'parmname\'>where</span> filter parameter, which is a Salesforce Object Query Language (SOQL) expression. This is also set in the LocalEnvironment, and further limits the returned records to those Accounts created since 1st January 2015. Change the value if you want to use an alternative SOQL expression."},{"section":"If the Flow Exerciser failed to deploy the projects, or the flow failed to retrieve the records from the Salesforce system, follow the <span class=\'uicontrol\'>Resolving problems when you use Salesforce nodes</span> link in the <span class=\'uicontrol\'>Find out more</span> section to diagnose the problem."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Resolving problems when you use Salesforce nodes","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90710_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with Salesforce","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90600_.htm","type":"web"}]}}}}},"Using a Sequence node to inject a sequence number into a message":{"version":"0.1","pageContent":{"_comments":"","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Sequence node to inject a sequence number into a message","shortDescription":"Learn how to use the Sequence node to inject sequence numbers in to message data as it goes through a message flow.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Sequence node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to insert sequence numbers into messages."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives an HTTP message containing a set of employee records in a CSV format. The request body is line feed separated, with one row for each employee. Each row uses commas to separate the fields. The flow uses a Sequence node to insert a sequence number into each row. At the end of the message flow, all the data rows are added to an output file."},{"section":"This tutorial requires an integration node (or standalone server) which is associated with a local queue manager."},{"section":"In IBM App Connect Enterprise, an application is a container for deployed resources such as message flows. This tutorial provides a single application, holding one message flow, and which references a shared library containing a DFDL message model which describes the CSV data format expected by the flow."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one application and one shared library will be created in your workspace:"},{"section":"The application <span class=\'application\'>Sequence</span> contains a message flow also named <span class=\'application\'>Sequence</span>."},{"section":"The shared library <span class=\'application\'>CommaSeparatedValues</span> contains a DFDL model file named <span class=\'application\'>csv.xsd</span>."},{"section":"The message flow receives an HTTP message containing a set of employee records in a CSV format. The request body is line feed separated with one row for each employee. The HTTPInput node parses the input message. The Compute node then loops over the rows and propagates them one after another to the Sequence node, which inserts a sequence number into each row before the FileOutput node writes the records to an output file. To complete the flow, a summary message stating that processing is complete is returned to the requestor by the HTTPReply node."},{"section":"Once you import the tutorial, the provided application is almost ready to be deployed and tested. However, before you do this, read the Prepare tab which describes preparing your deploy environment."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare to deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The message flow in this tutorial uses a sequence node, which uses MQ storage queues to hold information about the state of in-flight messages. The storage queues are owned by the queue manager that is associated with the integration node or integration server. The instructions provided below assume the use of an integration node.","steps":{"type":"ordered","details":[{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Create the output directory:","substeps":{"type":"ordered","details":[{"details":"The FileOutput node\'s Basic property tab includes a <span class=\'varname\'>Directory</span> property which specifies where the output file should be written. This has been set to <span class=\'varname\'>C:\\\\IIB_Sequence_Tutorial_Output</span> but you can change this to a value of your own choice. Create the directory on the file system of the machine where your runtime node resides."}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Drag and drop deploy the shared library named <span class=\'resource\'>CommaSeparatedValues</span> on to your integration server in the Integration Explorer view (by default shown in the bottom left corner of your Toolkit)."},{"details":"Open <span class=\'resource\'>Sequence.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow"},{"details":"Click the Send Message icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Select the saved message which has been provided, named <span class=\'resource\'>InputMessage</span>, and click Send. The message will be sent to the HTTPInput node."},{"details":"The pop-up dialog will show the message has been sent and a response received stating <span class=\'resource\'>Processing complete- each row has been given a sequence number and written to the output file.</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."},{"details":"Finally, locate the output file in the directory which you configured on the earlier Prepare step). You will see that the output file has had sequence numbers inserted at the end of each row of data:<br><span class=\'resource\'>Department01,Smith,Robert,Brandon,1988-03-24,1<br>Department01,Johnson,John,Martin,1986-01-23,2<br>Department01,Jones,Arya,Cat,1986-02-19,3<br>Department01,Bonham,John,Henry,1948-05-31,4<br>Department01,Walters,Amanda,Louise,1966-08-01,5</span>"}]}}]}},{"section":"This tutorial has shown the Sequence node inserting sequence numbers into messages passing through a message flow."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Sequence node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc28010_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Resequence node to reorder messages going through a flow":{"version":"0.1","pageContent":{"_comments":"","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Resequence node to reorder messages going through a flow","shortDescription":"Learn how to use the Resequence node to control the sequence in which a group of incoming messages are propagated through the message flow.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Resequence node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to resequence messages through a flow"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a file containing a set of employee records in a CSV format. The input file is line feed separated, with one row for each employee. Each row uses commas to separate the fields. The last field in each row is a sequence number. The flow uses a FileInput node to read the data rows into the flow one by one. The test data provided deliberately has the input records in the wrong order. A resequence node is used to reorder the messages into the correct sequence. At the end of the message flow, all the data rows are added to an output file."},{"section":"This tutorial requires an integration node (or standalone server) which is associated with a local queue manager."},{"section":"In IBM App Connect Enterprise, an application is a container for deployed resources such as message flows. This tutorial provides a single application, holding one message flow, and which references a shared library containing a DFDL message model which describes the CSV data format expected by the flow."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one application and one shared library will be created in your workspace:"},{"section":"The application <span class=\'application\'>Resequence</span> contains a message flow also named <span class=\'application\'>Resequence</span>."},{"section":"The shared library <span class=\'application\'>CommaSeparatedValues</span> contains a DFDL model file named <span class=\'application\'>csv.xsd</span>."},{"section":"The message flow receives an input file containing a set of employee records in a CSV format. The request body is line feed separated with one row for each employee. The FileInput node reads input records from the file one row at a time. The Resequence node reorders the rows according to their sequence number and passes them to a FileOutput node which writes the records to an output file."},{"section":"Once you import the tutorial, the provided application is almost ready to be deployed and tested. However, before you do this, read the Prepare tab which describes preparing your deploy environment."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare to deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The message flow in this tutorial uses a resequence node, which uses MQ storage queues to hold information about the state of in-flight messages. The storage queues are owned by the queue manager that is associated with the integration node or integration server. The instructions provided below assume the use of an integration node.","steps":{"type":"ordered","details":[{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Create the input and output directories:","substeps":{"type":"ordered","details":[{"details":"The FileInput node\'s Basic property tab includes an <span class=\'varname\'>Input Directory</span> which has been set to <span class=\'varname\'>C:\\\\IIB_Resequence_Tutorial_Input</span> and the FileOutput node\'s Basic property tab includes a <span class=\'varname\'>Directory</span> property which has been set to  <span class=\'varname\'>C:\\\\IIB_Resequence_Tutorial_Output</span>. These directories specify where the input file should be read from, and where the output file should be written to. If you wish you can change these to a value of your own choice, for example if Windows is not your runtime platform. Create the directory on the file system of the machine where your runtime node resides."}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Drag and drop deploy the shared library named <span class=\'resource\'>CommaSeparatedValues</span> on to your integration server in the Integration Explorer view (by default shown in the bottom left corner of your Toolkit)."},{"details":"Open <span class=\'resource\'>Resequence.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow"},{"details":"A test input file <span class=\'resource\'>input.csv</span> is provided in the Resquence application. Copy this to the input directory which you configured in the Prepare step (by default this is <span class=\'varname\'>C:\\\\IIB_Resequence_Tutorial_Input</span>)."},{"details":"Navigate to the output directory which you configured in the Prepare step (by default this is <span class=\'varname\'>C:\\\\IIB_Resequence_Tutorial_Output</span>) and open the output file, <span class=\'resource\'>output.csv</span>. You will see that the output file has the rows rearranged into the correct order based upon their sequence numbers at the end of each row of data:<br><span class=\'resource\'>Department01,Smith,Robert,Brandon,1988-03-24,1<br>Department01,Johnson,John,Martin,1986-01-23,2<br>Department01,Jones,Arya,Cat,1986-02-19,3<br>Department01,Bonham,John,Henry,1948-05-31,4<br>Department01,Walters,Amanda,Louise,1966-08-01,5</span>"},{"details":"Return to <span class=\'resource\'>Resequence.msgflow</span> and click the View Path icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png\' alt=\'\' /> to see the path which the file data took through the flow. Click on the flow wires before and after the resequence node to view the message data. You will see that there is a drop down box which enables you to view the messages in the order in which they passed through the flow. Note that the order is different before and after the resequence node."}]}}]}},{"section":"This tutorial has shown the Resequence node reordering messages passing through a message flow based upon their sequence numbers."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Resequence node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc28000_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Timeout Notification node to automatically start a flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Timeout Notification node to automatically start a flow","shortDescription":"Learn how to use the Timeout Notification node to automatically start a flow after a regular configurable time interval.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Timeout Notification node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to control the execution of a message flow on a timed basis."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a very simple message flow that only contains two message flow nodes. The flow is started using a Timeout Notification node which is configured to fire a flow propagation on an automatic regular basis after a fixed interval of time. The second node in the flow is a trace node which appends text to a trace file to record the time when the trace node was reached, the interval for flow propagation and the message count. After observing the flow in operation, the tutorial reconfigures the flow to use a Policy which defines the configuration of the time period interval between the flow propagations. Policies can be referred to from one or more flows, and redeployed to reconfigure the behavior of the flow."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"IMPORTANT NOTE: In this tutorial the TimeoutNotification node uses the Automatic operation mode, so it does not require a queue manager. If you were to extend this scenario to use a TimeoutNotification node which uses the Controlled operation mode, then a queue manager would be required. In this situation, information about the state of in-flight messages would be held on storage queues that are controlled by IBM MQ. If you were using timeout flows on an independent integration server, and your TimeoutNotification node uses the Controlled operation mode, then you can choose to use either a local default queue manager or a remote default queue manager. Interactions between an independent integration server and IBM MQ can use a client connection to a remote default queue manager. If you were using timeout flows on a node owned integration server, and your TimeoutNotification node uses the Controlled operation mode, then this means that you must install IBM MQ on the same computer as your integration node and use a local queue manager."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleTimeoutNotification</span> and a policy project named <span class=\'application\'>myPols</span>."},{"section":"<span class=\'application\'>ExampleTimeoutNotification</span> provides a single message flow named <span class=\'resource\'>TimeoutNotification</span>. The flow is started using a Timeout Notification node which is configured to fire a flow propagation on an automatic regular basis every 20 seconds. The second node in the flow is a trace node which appends text to a trace file which records the time when the trace node was reached, the interval for flow propagation and the message count."},{"section":"<span class=\'application\'>myPols</span> is a policy project holding a single policy named <span class=\'resource\'>T1</span>. The policy won\'t be used to start with, but is provided ready for the extension to the basic scenario which is described on the Run tab."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExampleTimeoutNotification</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare a trace directory, optionally create a queue manager and integration node, and then deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The Trace node uses a trace directory so execute the following steps to prepare your environment accordingly. The OPTIONAL steps below can be ignored if you are not planning to extend the core tutorial to investigate other operation modes of the Timeout Notification node (which require MQ queues to operate):","steps":{"type":"ordered","details":[{"details":"The message flow\'s Trace node will attempt to write a trace file to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."},{"details":"<span class=\'application\'>OPTIONAL</span> If you planning to extend the core tutorial and investigate the <span class=\'application\'>Controlled</span> operation mode of the Timeout Notification node, then you will need a queue manager. Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"<span class=\'application\'>OPTIONAL</span> If you are planning to extend the core tutorial and investigate the <span class=\'application\'>Controlled</span> operation mode of the Timeout Notification node then create an integration node which is associated with the queue manager you created in the above OPTIONAL step by completing the following instructions:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"If you did not execute the OPTIONAL steps above, then from within the Toolkit, create a local integration server (without any relationship to MQ) for testing the flow. From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'application\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."},{"details":"Regardless of whether you are using a local integration server, or an integration node, now drag and drop deploy the provided BAR file named <span class=\'application\'>TimeoutNotification.bar</span> which you will find inside the <span class=\'application\'>ExampleTimeoutNotification</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>TimeoutNotification.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"This flow does not need you to send it a message to drive it. Simply wait for about 20 seconds for a flow propagation to occur. If you are impatient, you can check the trace directory which was configured on the Prepare tab for the presence of the trace file named <code><span class=\'cmdname\'>TraceTimeoutNotification.txt</span></code>. Once the flow has fired, the trace node should contain an entry that looks like this:<br><code>The flow propagation is from the Timeout Notification node with count number 1</code><br><code>The flow propagation has reached the Trace node at 2019-08-04 20:18:56.974640</code><br><code>The flow was started by Timeout Notification node with the identifier \'ID1\'</code><br><code>The flow Timeout Notification node currently has its interval set to 20 seconds</code><br>"},{"details":"After you close the dialog, the path taken through the messageflow is highlighted. Using a text editor, open the trace file <span class=\'resource\'>C:\\\\temp\\\\TraceTimeoutNotification.txt</span>."},{"details":"Next, reconfigure the TimeoutNotification node. Change the <span class=\'resource\'>Unique Identifier</span> property to the value <span class=\'resource\'>{myPols}:T1</span>. This means that the TimeoutNotification node will take its interval from the policy named <span class=\'resource\'>T1</span> which resides in the policy project named <span class=\'resource\'>myPols</span>. Drag and drop deploy the policy project named <span class=\'resource\'>myPols</span>, and then drag and drop deploy the application <span class=\'application\'>ExampleTimeoutNotification</span> (or do both these actions together by reconfiguring the <span class=\'application\'>TimeoutNotification.bar</span> which you used earlier). The policy has been set up with the shorter interval of 5 seconds. You can experiment with different intervals by simply redeploying the policy project after updating the value of its property named <span class=\'resource\'>Timeout (seconds)</span>."}]}}]}},{"section":"This tutorial has shown the Timeout Notification node automatically start a flow on a regular timed interval."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Timeout Notification node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20802_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Timeout Control node to start a flow after an interval":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Timeout Control node to start a flow after an interval","shortDescription":"Learn how to use the Timeout Control node to control timed flow starts using propagations from a Timeout Notification node.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Timeout Notification node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to control the execution of a message flow on a timed basis."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that is made from two distinct sections. The flow is started using a JSON input message over HTTP which is received by an HTTPInput node. The HTTPInput is wired to a Mapping node to construct a reply message which is returned using an HTTPReply. The HTTPInput node also drives a second branch in the message flow which uses a Compute node to configure Timeout request settings in the LocalEnvironment which control the TimeoutControl node. The TimeoutControl node introduces a delay of 30 seconds (this time period is based upon a field in the input message) before the TimeoutNotification node will fire and write some simple trace information to a file. The TimeoutControl node and the TimeoutNotification node (which are linked using an identifier property) work together to generate flow propagation events at particular times or at regular intervals. For simplicity, this scenario places the TimeoutControl and TimeoutNotification nodes in the same message flow, but they could be separated into different flows if the flows are deployed to the same integration server."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses the TimeoutControl node which requires your integration node or server to be associated with a local queue manager, so an MQ installation is required. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, a project will be created in your workspace: An application named <span class=\'application\'>ExampleTimeoutControl</span>."},{"section":"<span class=\'application\'>ExampleTimeoutControl</span> provides a single message flow named <span class=\'resource\'>TimeoutControl</span>. The flow is started using a JSON input message over HTTP which is received by an HTTPInput node. A following Mapping node constructs a reply message which is returned using an HTTPReply. The HTTPInput node also drives a second branch in the message flow which uses a Compute node to configure Timeout request settings in the LocalEnvironment which control the TimeoutControl node. The TimeoutControl node introduces a delay of 30 seconds (this time period is based upon a field in the input message) before the TimeoutNotification node will fire and then invoke a Trace node. The trace node appends text to a trace file which records the time when the trace node was reached, the Timeout interval which was configured and the message data."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExampleTimeoutControl</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The Trace node uses a trace directory and the Timeout Control and Notification nodes require MQ queues to operate, so execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"The message flow\'s Trace node will attempt to write a trace file to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."},{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>TimeoutControl.bar</span> which you will find inside the <span class=\'application\'>ExampleTimeoutControl</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>TimeoutControl.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved input message is provided named <span class=\'resource\'>InputMessage_Delay30secs</span> which contains this data:<br><span class=\'resource\'>{\\"Message\\":{\\"Delay\\":30,\\"Data\\":\\"Hello World\\"}}</span><br>Select the input message and click Send and your message is sent to the HTTPInput node."},{"details":"You should immediately receive an HTTPReply message which looks like this:<br><span class=\'resource\'>{\\"ReplyMessage\\":\\"The Timeout Control message is acknowledged. The message will be propagated from the Timeout Notification node after a delay of 30 seconds\\"}</span><br>When you click close, a blue line should be displayed indicating the path taken by the message through the first section of the flow. The flow is designed for there to be a 30 second delay between this initial section of the flow being invoked over HTTP, and the second propagation which fires from the Timeout Notification node. If you are impatient, you can check the trace directory which was configured on the Prepare tab for the presence of the trace file named <span class=\'resource\'>TraceTimeoutControl.txt</span>. After 30 seconds have passed, click the View Path icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/viewPath.png\' alt=\'\' /> and you should then see a second blue path highlighted between the TimeoutNotification node and the Trace node."},{"details":"Once the second part of the flow has fired, using a text editor open the trace file <span class=\'resource\'>C:\\\\temp\\\\TraceTimeoutControl.txt</span>, which should contain an entry that looks like this:<br><code>The flow propagation controlled by the Timeout Control node has reached the Trace node at 2019-08-06 17:16:03.629563</code><br><code>The Timeout StartTime was set to \'17:16:03.328807\'</code><br><code>The message data was:</code><br><code>( [\'json\' : 0x230a3a8f270]</code><br><code>  (0x01000000:Object):Message = (</code><br><code>    (0x03000000:NameValue):Delay = 30 (INTEGER)</code><br><code>    (0x03000000:NameValue):Data  = \'Hello World\' (CHARACTER)</code><br><code>  )</code><br><code>)</code>"}]}}]}},{"section":"This tutorial has shown the Timeout Notification node automatically start a flow on a regular timed interval."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Timeout Control node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20800_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Timeout Notification node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20802_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Collector node to gather together messages in a flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Collector node to gather together messages in a flow","shortDescription":"Learn how to use the Collector node to gather together two separate HTTP input messages which arrive in to a message flow at different times.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Collector node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to collect together messages which arrive in a message flow at different times."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that is driven from JSON input messages over HTTP which are received by two separate HTTPInput nodes. Each HTTPInput is wired directly to an HTTPReply node which echoes the same message back to the Requestor. Each HTTPInput node also drives an Input terminal of a Collector node whose role is to collect together 1 response from each input and to propagate those messages together downstream to a trace node which records the combined data in a trace file."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses the Collector node which requires your integration node or server to be associated with a local queue manager, so an MQ installation is required. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, a project will be created in your workspace: An application named <span class=\'application\'>ExampleCollector</span>."},{"section":"<span class=\'application\'>ExampleCollector</span> provides a single message flow named <span class=\'resource\'>Collector</span>. Two HTTPInput nodes are configured to receive JSON input messages. Each HTTPInput is wired directly to an HTTPReply node which echoes the same message back to the Requestor. Each HTTPInput node is also wired to an Input terminal of a Collector node whose role is to collect together one response from each input and to then propagate those messages together downstream to a trace node which records the combined data in a trace file."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExampleCollector</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The Trace node uses a trace directory and the Collector node requires MQ queues to operate, so execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"The message flow\'s Trace node will attempt to write a trace file to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."},{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>Collector.bar</span> which you will find inside the <span class=\'application\'>ExampleCollector</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Collector.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved input message is provided named <span class=\'resource\'>Input1</span> which contains this data:<br><span class=\'resource\'>{\\"Message1\\":\\"Hello\\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. Close the dialog and a blue line is shown plotting the path of the message."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> a second time."},{"details":"A second saved input message is provided named <span class=\'resource\'>Input2</span> which contains this data:<br><span class=\'resource\'>{\\"Message2\\":\\"World\\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. Close the dialog and a blue line is shown plotting the path of the second message. Note that after the second message, there was also a propagation out of the Collector node to the downstream trace node."},{"details":"Once this second part of the flow has fired, using a text editor open the trace file <span class=\'resource\'>C:\\\\temp\\\\TraceCollector_Out.txt</span>, which should contain an entry that starts like this:<br><code>The Out terminal of the Collector node has fired at 2019-08-06 20:15:11.190112</code><br><code>The combined message from the two collected messages is:</code><br><code>Hello World</code><br>... Following this, the trace also contains a listing of the logical tree structure, which includes all of the fields and headers for both input messages which are now collected together."}]}}]}},{"section":"This tutorial has shown the Collector node gather together two separate HTTP input messages which arrive in to a message flow at different times."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Collector node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac37820_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using a Java User-Defined Node which reads a User-Defined Policy":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using a Java User-Defined Node which reads a User-Defined Policy","shortDescription":"Learn how to deploy user-defined nodes using a provided example which reads values from a user-defined policy.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"User-defined nodes"},{"title":"User-defined policies"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use a Java user-defined node to query values from a user-defined policy."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates user-defined policies and Java user-defined nodes. The source code for the user-defined node (both the Eclipse plugin and the runtime plugin) is provided as well as a built PAR (plugin archive) file. The tutorial describes where to place the runtime package and how to reference it from an integration node owned server. The user-defined node\'s properties specify the name of a property of a user-defined policy, and the policy project in which it resides. An application is provided which contains a single message flow driven by an HTTP input. The next node in the flow is an instance of the user-defined node which reads the prescribed property from the user-defined policy and reports it back in an HTTP reply."},{"section":"The tutorial requires an integration node owned server, which will be created and configured as part of the tutorial\'s instructions."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, four projects will be created in your workspace: An application named <span class=\'application\'>ExampleAppUsingUDN</span>, a policy project named <span class=\'application\'>ExampleUserDefinedPolicyProject</span>, a User-Defined Node project named <span class=\'application\'>PolicyQuery</span> and a Java project named <span class=\'application\'>PolicyQueryImpl</span>. <b>PLEASE NOTE:</b> When you do the import, please do not be alarmed to see errors reported on the message flow <b>ExampleFlowUsingUDN</b>. This is entirely expected because at this early stage in the tutorial your Toolkit does not know about the User-defined node. Later steps in the Run section of the tutorial will fix this up using the User-defined node simulation mode which the Toolkit provides."},{"section":"The User-Defined Node project <span class=\'application\'>PolicyQuery</span> provides the files describing the toolkit part of the user-defined node. Its files provide the icons for the node and describe the names of its properties and terminals. The Java project <span class=\'application\'>PolicyQueryImpl</span> contains code for the implementation of the runtime of the node. The code provides getters and setters for the node properties and the main evaluate method is found inside <span class=\'application\'>PolicyQueryNode.java</span>. The other two projects provide an example message flow (in <span class=\'application\'>ExampleUserDefinedPolicyProject</span>) and policy(in <span class=\'application\'>ExampleUserDefinedPolicyProject</span>) which can be used to test the user-defined node implementation."},{"section":"Before we test the application named <span class=\'application\'>ExampleAppUsingUDN</span> the instructions in the Prepare section describe how to set up the runtime with the code for the user-defined node."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node owned server, configure it with the User-defined node and then deploy a flow to test it","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps which assume a Windows platform:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Inside <span class=\'application\'>PolicyQueryImpl</span> you will find the built node as a plugin archive named <span class=\'application\'>PolicyQuery.par</span>. This file needs to be made available to the runtime. Copy the file to a directory named <span class=\'application\'>C:\\\\temp\\\\ExampleLilPath</span>. Next, open the runtime integration node\'s configuration file (node.conf.yaml) which you will find in the IBM App Connect Enterprise workpath. By default this will be at location <span class=\'application\'>C:\\\\ProgramData\\\\IBM\\\\MQSI\\\\components\\\\TESTNODE</span>.Edit the node.conf.yaml by uncommenting the line shown below, and specifying the directory where you just copied your par file:<br><code>lilPath: \'C:\\\\temp\\\\ExampleLilPath\'                 # A list of paths from where User-defined node LIL/JAR files are loaded. (multiple directories are separated by platform path separator)</code><br>Restart the integration node."},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>AppUsingUDN.bar</span> which you will find inside the <span class=\'application\'>ExampleAppUsingUDN</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ExampleFlowUsingUDN.msgflow</span>","substeps":{"type":"unordered","details":[{"details":"You will see red crosses showing problems in the flow because at this stage your Toolkit won\'t know anything about the user-defined node."},{"details":"Right click the <span class=\'resource\'>PolicyQuery</span> User-defined node project, and select the option <span class=\'resource\'>Start simulation</span> which will cause the Toolkit to load the user-defined node plugin. In the message flow, the instance of the PolicyQuery user-defined node will now be showing with its correct icon and the red crosses will have been resolved."},{"details":"At the top of the message flow, click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to deploy and start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Once the flow has deployed, click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"One saved input message named <span class=\'resource\'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage</span> contains this data:<br><span class=\'resource\'>This can be anything</span>"},{"details":"Click on the reply message and you will see that it contains this data:<br><span class=\'resource\'>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;ResponseMessage&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicyProject&gt;ExampleUserDefinedPolicyProject&lt;/UserDefinedPolicyProject&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicy&gt;ExampleUserDefinedPolicy&lt;/UserDefinedPolicy&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicyProperty&gt;Property2&lt;/UserDefinedPolicyProperty&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicyPropertyValue&gt;ValueOfTwo&lt;/UserDefinedPolicyPropertyValue&gt;<br>&lt;/ResponseMessage&gt;</span>"},{"details":"After you close the dialog, the path taken through the message flow is highlighted."}]}}]}},{"section":"This tutorial has shown how to deploy user-defined nodes using a provided example which reads values from a user-defined policy."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"User-defined nodes","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/as37475_.htm","type":"web"}]}}}}},"Using the KafkaProducer and KafkaConsumer nodes with a Kafka topic":{"version":"0.6","pageContent":{"_comments":"KAFKA object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using the KafkaProducer and KafkaConsumer nodes with a Kafka topic","shortDescription":"Learn how to use a KafkaProducer and KafkaConsumer node to produce and consume messages using a Kafka topic.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"KafkaProducer and KafkaConsumer nodes etc"},{"title":"Produce a topic message"},{"title":"Consume a topic message"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to produce and consume messages using the KafkaProducer and KafkaConsumer nodes."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that Produces a message using a KafkaProducer node. A seperate flow then consumes the message using a KafkaConsumer node."},{"section":"This tutorial requires an Apache Kafka server.  This could be the Event Streams service available on IBM Cloud (which is a fully managed service built with the open source Apache Kafka project), or your own stand alone Kafka implementation."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An application can contain IBM App Connect Enterprise resources, such as flows, message definitions, libraries, and JAR files. An application is used to hold the message flow in this tutorial."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDL Schemas","link":"http://github.com/DFDLSchemas","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two applications will be created in your workspace: <span class=\'application\'>KafkaProducerApplication</span> and <span class=\'application\'>KafkaConsumerApplication</span>."},{"section":"<span class=\'application\'>KafkaProducerApplication</span> provides a single message flow with a HTTPInput, KafkaProducer and HTTPReply nodes."},{"section":"<span class=\'application\'>KafkaConsumerApplication</span> provides a single message flow with a KafkaConsumer and FileOutput nodes."},{"section":"In this tutorial, these two applications will run in the same integration server. With additional configuration they can run on different servers or even on different machines."},{"section":"This tutorial can be run against any stand alone Apache Kafka server (https://kafka.apache.org/). The ACEv11 KafkaConsumer and KafkaProducer nodes are built upon a Java Kafka client. ACE v11.0.0.0 to ACEv11.0.0.4 use Kafka client version 0.10.0.1. ACEv11.0.0.5 uses Kafka client version 2.2.0. If you don\'t have your own Kafka server available, then the IBM Cloud Event Streams service provides an easy to use cloud based Kafka implementation which you can use with this tutorial."},{"section":"Once you import the tutorial, you will see red crosses against the two Kafka applications. This is because a few setup steps (mandatory properties) are required to complete the configuration of the Kafka nodes. These are explained when you move onto the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Imported projects","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Before you can deploy the flows there are some setup steps that need to be completed.","steps":{"type":"ordered","details":[{"details":"Within your own Apache Kafka server, e.g. IBM Cloud Event Streams Service, record the Bootstrap server name. Create a topic if you don\'t already have one and remember its name ready for step 3."},{"details":"If you are using Event Streams, the connection from ACE must be secured using SASL_SSL. Open the Event Streams Service Credentials and remember the user and password ready for step 5. "},{"details":"Open message flows <span class=\'application\'>KafkaProducerFlow.msgflow</span> and <span class=\'application\'>KafkaConsumerFlow.msgflow</span>.  Make the following changes to the Kafka nodes.","substeps":{"type":"ordered","details":[{"details":"Topic name*  set this to the one that you created on your Kafka server."},{"details":"Bootstrap servers*  set this to the one listed in the Credentials above."},{"details":"If using Message Hub, switch to the Security tab and set the Security protocol to be \\"SASL_SSL\\" and leave the default value for SSL protocol to be \\"TLSv1.2\\". "}]}},{"details":"Within the <span class=\'application\'>KafkaConsumerFlow.msgflow</span> you will also need to change the File Output node, Directory and File name."},{"details":"If you are using IBM Cloud Event Streams or if your Kafka Server needs to authenticate the connection from ACE, then you will need to provide credentials using the mqsisetdbparms command from the ACE Command Console.","substeps":{"type":"unordered","details":[{"details":"If you intend to use a node-owned integration server then issue the following command:"},{"details":"mqsisetdbparms <span class=\'varname\'>integrationNodeName</span> -n kafka::KAFKA::<span class=\'varname\'>integrationServerName</span> -u <span class=\'varname\'>token</span> -p <span class=\'varname\'>password</span>"},{"details":"Restart the Integration Node."},{"details":"If you intend to use a stand-alone integration server then issue the following command:"},{"details":"mqsisetdbparms -w <span class=\'varname\'>work-directory</span> -n kafka::KAFKA -u <span class=\'varname\'>token</span> -p <span class=\'varname\'>password</span>"},{"details":"Restart the Integration Server."}]}}]}},{"section":"You are now ready to exercise the flows. To exercise the flows move onto the Run tab."}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Use the Flow Exerciser in the <span class=\'resource\'>KafkaProducerFlow.msgflow</span> and <span class=\'resource\'>KafkaConsumerFlow.msgflow</span> to run this tutorial.","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>KafkaConsumerFlow.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow"}]}},{"details":"Open <span class=\'resource\'>KafkaProducerFlow.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow"},{"details":"Click the Send Message icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Create a new message and click Send. Your message is sent to the HTTP input node."},{"details":"When the list of actions is shown, click on the Received HTTP reply message... item to show the output from the flow. This wil be the same as the message that you sent in."}]}},{"details":"After you close the dialog, the path taken through the messageflow is highlighted. Click on the message icon on each connection to see how the tree is updated by each node."},{"details":"Return to the <span class=\'resource\'>KafkaConsumerFlow.msgflow</span> and click the View Path icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/viewPath.png\' alt=\'\' /> and you should see that the same message has been received back by ACE."},{"details":"Go to the output directory that you specified on the FileOutput node and you should see a file that contains the message that you sent in."}]}},{"section":"This tutorial showed the KafkaConsumer and KafkaProducer nodes running in the same integration server. Remember if you experiment with other topologies you may need to run the mqsisetdbparms command accordingly, as the credentials for the Kafka nodes are scoped to the integration server."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using the MQTTSubscribe node to receive MQTT messages from MQTT topics":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"Back to Overview","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using the MQTTSubscribe node to receive MQTT messages from MQTT topics","shortDescription":"Learn how to use the MQTTSubscribe node to receive messages from an MQTT server.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MQTTSubscribe","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"MQTTSubscribe node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Receive messages from an MQTT server by using IBM App Connect Enterprise."},{"title":"Understand the basic configuration of the MQTTSubscribe node."},{"title":"Understand the information written to the Local Environment when receiving data over MQTT."},{"title":"Gain an introduction to the IBM IoT Foundation."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that connects to the IBM Internet of Things (IoT) Foundation, and receives messages published by a device simulator over the MQ Telemetry Transport (MQTT) protocol. The message flow writes the message data to a file."},{"section":"MQTT is an open protocol for remote communication using a publish and subscribe model. Devices and applications can publish messages on named topics, and other applications or devices can subscribe to receive messages that are published on particular topics."},{"section":"The IBM IoT Foundation hosts an MQTT server on the internet and provides a quickstart demonstration service. This tutorial connects to that service and illustrates how to use a message flow to receive messages over MQTT. To publish the messages, you will use the device simulator provided by the IBM IoT Foundation."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"MQTT.ORG","description":"Information about the MQTT open standard","link":"http://mqtt.org/","type":"web"},{"title":"IBM Documentation link to ","description":"Processing MQTT messages in IBM App Connect Enterprise","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc62000_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"MQTTSubscribe node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc46000_.htm","type":"web"},{"title":"Website link to ","description":"IBM Internet of Things Foundation","link":"https://internetofthings.ibmcloud.com/#/","type":"web"},{"title":"Website link to ","description":"Connecting applications to IoT Foundation quickstart","link":"https://developer.ibm.com/iot/recipes/application-development-quickstart/","type":"web"},{"title":"Website link to ","description":"Device simulator for IoT Foundation quickstart","link":"https://developer.ibm.com/iot/recipes/simulator/","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Create the message flow and the device","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Create a device that is connected to the IoT Foundation and will publish data on a topic that the message flow can subscribe to.","steps":{"type":"ordered","details":[{"details":"On your smartphone/tablet/computer, start the simulator by browsing to <a href=\'http://quickstart.internetofthings.ibmcloud.com/iotsensor\' target=\'_blank\'>http://quickstart.internetofthings.ibmcloud.com/iotsensor</a>. The simulator connects automatically and starts publishing data. Keep your simulator window active and in the foreground."},{"details":"Note the MAC address of the simulated device (displayed in the top right corner of the device screen; for example a9a557601865). You will need this to complete the configuration of the message flow."}]}},{"section":"Import and complete the configuration of the message flow.","steps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Import</span> button on the right of this view. The MQTTSubscribe application, which includes a partially complete message flow, will be imported into your workspace."},{"details":"The <span class=\'uicontrol\'>MQTTSubscribe</span> message flow should be open in the Message Flow editor. If it is not, locate the message flow under the Flows section of the <span class=\'application\'>MQTTSubscribe</span> application, and double click it to open for editing."},{"details":"Select the MQTTSubscribe node in the message flow and look at the <span class=\'uicontrol\'>Properties</span> view.","substeps":{"type":"unordered","details":[{"details":"<b>Tip:</b> To allow you to see the properties view and the tutorial steps at the same time, move this current tutorial steps view to the right side of the message flow editor, by dragging and dropping the <span class=\'uicontrol\'>Tutorial Steps View</span> tab at the top of this view."}]}},{"details":"Some of the MQTTSubscribe node properties have already been configured with values. The <span class=\'parmname\'>Host name</span> and  <span class=\'parmname\'>Port</span> are configured to connect to the IoT Foundation MQTT server that is hosted on the internet."},{"details":"The <span class=\'parmname\'>Client ID</span> property is blank and must be configured with a valid value. Enter the value <span class=\'userinput\'>a:quickstart:&lt;unique-name&gt;</span> where <span class=\'userinput\'>&lt;unique-name&gt;</span> is a value you choose that is unlikely to be chosen by anyone else. For example, you might choose your name and birth year to avoid clashing with other people, such as <span class=\'userinput\'>a:quickstart:hosie75</span>.","substeps":{"type":"unordered","details":[{"details":"<b>You might like to know:</b> In the MQTT protocol, the client ID is used to uniquely identify a device or an instance of an application that is connected to an MQTT server. Each device or application must specify a different client ID. In any particular instance of an MQTT server, there might be a defined convention to follow when choosing the client ID. In the case of the IBM IoT Foundation quickstart, the convention is that applications must specify a client ID with the form <span class=\'code\'>a:quickstart:&lt;unique-name&gt;</span> where <span class=\'code\'>&lt;unique-name&gt</span> is a value chosen by the application to be unique across all applications connecting to the quickstart service. This convention must be followed, otherwise the application will fail to connect to the IoT Foundation."}]}},{"details":"The <span class=\'parmname\'>Topic name</span> property is blank and must be configured with a valid value. Enter the value <span class=\'userinput\'>iot-2/type/+/id/&lt;deviceid&gt;/evt/+/fmt/+</span> where <span class=\'userinput\'>&lt;deviceid&gt;</span> identifies the MAC address of the device that you simulated in the earlier step (in the tutorial example a9a557601865, which is entered into the Topic name as <span class=\'userinput\'>iot-2/type/+/id/a9a557601865/evt/+/fmt/+</span>.","substeps":{"type":"unordered","details":[{"details":"<b>You might like to know:</b> When message data is published over MQTT, it is published on a particular topic. The topic string is hierarchical, and is normally used to indicate some categorization of the data that is meaningful in the particular domain. Receiving applications subscribe to particular topics and can use wildcards to subscribe to many topics within a single topic string. In the case of the IoT Foundation quickstart, the topic name includes the ID of the device that published the data. Subscribing applications must specify the device ID explicitly, although a wildcard (<span class=\'code\'>+</span>) may be used elsewhere in the topic string, as shown in this tutorial."}]}},{"details":"Save the message flow."},{"details":"Ensure that there are no errors associated with the message flow."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"MQTT.ORG","description":"Information about the MQTT open standard","link":"http://mqtt.org/","type":"web"},{"title":"IBM Documentation link to ","description":"Processing MQTT messages in IBM App Connect Enterprise","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc62000_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"MQTTSubscribe node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc46000_.htm","type":"web"},{"title":"Website link to ","description":"IBM Internet of Things Foundation","link":"https://internetofthings.ibmcloud.com/#/","type":"web"},{"title":"Website link to ","description":"Connecting applications to IoT Foundation quickstart","link":"https://developer.ibm.com/iot/recipes/application-development-quickstart/","type":"web"},{"title":"Website link to ","description":"Device simulator for IoT Foundation quickstart","link":"https://developer.ibm.com/iot/recipes/simulator/","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Deploy Application","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Before deploying the application, you must ensure that the file system is ready for the data to be written to the output file by the message flow."},{"section":"The FileOutput node is configured to write the data to a file in the output directory <span class=\'userinput\'>C:\\\\fileout</span>","steps":{"type":"unordered","details":[{"details":"Create the output directory <span class=\'userinput\'>C:\\\\fileout</span> on your local file system, or change the <span class=\'parmname\'>Directory</span> property of the FileOutput node to a directory that exists and that your current user ID has write access to.","substeps":{"type":"unordered","details":[{"details":"If you are using Linux, then you will need to change the <span class=\'parmname\'>Directory</span> property."}]}}]}},{"section":"Once you have completed these steps, drag the <span class=\'application\'>MQTTSubscribe</span> application from the <span class=\'uicontroll\'>Application Development</span> view and drop it on an integration server in the <span class=\'uicontroll\'>Integration Nodes</span> view. The application will be deployed to the integration server and the message flow will connect to the IoT Foundation, ready to receive the data published by your device.","steps":{"type":"unordered","details":[{"details":"If you have a firewall on your computer, you might be asked to allow the <span class=\'code\'>DataFlowEngine.exe</span> process to connect to <span class=\'code\'>quickstart.messaging.internetofthings.ibmcloud.com</span>. You must allow this connection in order to complete this tutorial."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55170_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to deploy and test message flows","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/aa40160_.htm","type":"web"}]},"actions-remove":{"comment":" as the user needs to configure some of the properties on the flow in the create step, we cannot have a pre-built bar file, therefore cannot use the deploy action","title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The message flow will immediately start receiving data that is published by the device simulator that you launched in the <span class=\'uicontrol\'>Create</span> step, and will write that data to a file in the directory that you created in the <span class=\'uicontrol\'>Prepare</span> step."},{"section":"Change some of the metrics (temperature/humidity) on the device simulator and open the output file to see new events with those values appended to the end of the file."},{"section":"In addition to this, you can use the Flow Exerciser to inspect other publication information that is available in the message flow.","steps":{"type":"ordered","details":[{"details":"Open the MQTTSubscribe message flow, and click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow.","substeps":{"type":"unordered","details":[{"details":"<b>Take care:</b> If you have more than one integration server available, then you will have to choose which integration server to use to record this message flow.  Ensure that you choose the same one that you deployed to in the <span class=\'uicontrol\'>Prepare</span> step, otherwise you will have two separate instances of the message flow trying to connect to the MQTT server with the same client ID, and that will cause errors."}]}},{"details":"Wait a few seconds to ensure that at least one event is published."},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. Click on the connection to see the message data that passed between the MQTTSubscribe node and the FileOutput node."},{"details":"In the <span class=\'code\'>Message</span> tree of the data, you will see the <span class=\'code\'>Properties</span> folder followed by a <span class=\'code\'>JSON</span> folder, and this shows the same data that was written to the output file.","substeps":{"type":"unordered","details":[{"details":"NOTE: the data is formatted as XML by the UI for the purpose of rendering it through the Flow Exerciser, but in fact it remains as JSON as it passes from the IoT Foundation, through the message flow, and into the output file."}]}},{"details":"Expand the <span class=\'code\'>LocalEnvironment</span> folder and you will see extra information about the publication. It is possible to add other nodes to the message flow that could process this information or even copy it to the output file."},{"details":"Click the <span class=\'uicontrol\'>Clean Up</span> button at the top right of this page.  If you do not do this then the message flow will continue to append data to the output file."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using local environment variables with MQTT nodes","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc62011_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Using the TCP/IP nodes to integrate with TCP/IP sockets":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using the TCP/IP nodes to integrate with TCP/IP sockets","shortDescription":"Learn how to use TCP/IP nodes for integration with external applications by using TCP/IP sockets.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Use of the TCPIPClientInput node."},{"title":"Use of the TCPIPServerOutput node."},{"title":"TCP/IP policies."}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to use the TCPIPClientInput and the TCPIPServerOutput nodes in integration flows."},{"title":"Learn how to configure and manage TCP/IP connections by using policies."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"IBM App Connect Enterprise enables you to integrate with external applications by using TCP/IP sockets. Two sets of TCP/IP message flow nodes exist in IBM App Connect Enterprise: TCPIPServer nodes and TCPIPClient nodes. Both sets have identical function in terms of accessing the data streams; however, one set uses client connections and the other set uses server connections. This tutorial also uses policies as a convenient way to manage the TCP/IP connections."},{"section":"This tutorial includes an application called \'TCPIPServer\' that simulates a TCP/IP server that is configured to send the data over TCP/IP sockets. The main message flow in the server application is driven by an XML message arriving on the HTTPInput node. When the message flow with the TCPIPServer node is deployed, the TCP/IP server is started automatically."},{"section":"This tutorial also demonstrates how a message flow can be driven by the TCPIPClient node. By default, this node does not open a client connection. The way to configure it properly is to use a TCPClient policy to enable at least one client connection to be opened when the flow is deployed. The same policy also defines the server host name and port number to connect to."},{"section":"An important part of TCP/IP input node configuration is setting up the proper record detection algorithm. This tutorial demonstrates the use  of \'Parsed Record Sequence\' record detection in XML messages."},{"section":"The message flows used in this tutorial also utilise other message flow nodes such as Trace, FileOutput, Mapping, HTTPInput and HTTPReply nodes."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"TCP/IP Data Transfer Overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90050_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TCP/IP Nodes","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac67370_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TCP/IP Scenarios in App Connect Enterprise","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac67390_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import Source Code","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> to load the <span class=\'application\'>TCPIPServer</span> and <span class=\'application\'>TCPIPClient</span> applications, the <span class=\'library\'>DataLibrary</span> shared library, and the <span class=\'application\'>TCPIPPolicies</span> policy project into your workspace. These resources are then listed in the Application Development view"},{"section":"Within the <span class=\'application\'>TCPIPServer</span> application, a message flow named <span class=\'filepath\'>TCPIPProvider.msgflow</span> receives the XML message through an HTTPInput node. The message is parsed and passed to the TCPIPServerOutput node to send the data to the client connected on port 7778. The TCPIPServerOutput node is configured by using the policy <span class=\'filepath\'>TCPIPTutorialServer</span>. The policy project must be made available to the flow by being deployed to the same integration server. Trace nodes, embedded in both the message flows which are used in this tutorial, help to track the journey of the data between the flows using a common trace file."},{"section":"The <span class=\'application\'>TCPIPClient</span> application contains a message flow called  <span class=\'filepath\'>TCPIPReceiver.msgflow</span>, which uses the TCPIPClientInput node to receive the data from the server. The TCPIPClientInput node is configured with the policy <span class=\'filepath\'>TCPIPTutorialClient</span> that specifies the host, the port, and the minimum number of client connections that are automatically opened. This message flow also contains a Mapping node that uses nested maps to transform the message data into a different format. Finally, the message is written to a file through the FileOutput node."},{"section":"The shared library <span class=\'library\'>DataLibrary</span> contains a message model for the input and output message formats <span class=\'filepath\'>SaleReport.xsd</span>, <span class=\'filepath\'>SaleMessage.xsd</span>, as well as a test message that will be used to initiate the tutorial flow named <span class=\'filepath\'>TestSaleMessage.xml</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"TCP/IP nodes","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac67370_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Exploring the message flows","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Open the message flow <span class=\'msgflow\'>TCPIPProvider.msgflow</span> in the application <span class=\'application\'>TCPIPServer</span>. The yellow boxed annotations shown in the flow provide some summary details about how the flow is configured. To view details about each node, click on the <span class=\'view\'>Properties</span> view and then select a node on the editor canvas. The <span class=\'property\'>Connection details</span> property of the TCPIPServerOutput node points to a policy <span class=\'resource\'>{TCPIPPolicies}:TCPIPTutorialServer</span>."},{"section":"If you open the message flow <span class=\'msgflow\'>TCPIPReceiver.msgflow</span> in the application <span class=\'application\'>TCPIPClient</span>, you can also view more information about its configuration by reading the yellow boxed annotations on the canvas. The <span class=\'property\'>Connection details\'</span> property of the TCPIPClientInput node points to a policy <span class=\'resource\'>{TCPIPPolicies}:TCPIPTutorialClient</span>. The <span class=\'property\'>Records and Elements</span> tab allows you to configure the record detection."},{"section":"<b>Tip 1:</b>If port 7778 cannot be used, you might need to adjust the ports set in the policies for your system."},{"section":"<b>Tip 2:</b>If your operating system is not Windows, you must update the file system paths used by the Trace and FileOutput nodes. The <span class=\'property\'>Directory</span> property of the FileOutput node specifies the directory where the output file is written to. The <span class=\'property\'>File path</span> property of the Trace nodes specify the full path to the trace file. By default all the files are written to \'C:\\\\temp\'."},{"section":"Next, you will deploy and run the tutorial to see how the data travels from the <span class=\'application\'>TCPIPServer</span> node to the <span class=\'application\'>TCPIPClient</span> node and then to the file on the file system. Click <span class=\'uicontrol\'>Run</span> to see those steps."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"TCPIPServerOutput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac67340_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TCPIPClientInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac67300_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Deploy and run the tutorial message flows:","steps":{"type":"ordered","details":[{"details":"Deploy the message flows, policies and shared library using the BAR file named <span class=\'msgflow\'>TCP_Deploy.bar</span> which you will find in the <span class=\'application\'>TCPIPServer</span> application project."},{"details":"Open the <span class=\'msgflow\'>TCPIPProvider.msgflow</span> message flow from the application <span class=\'application\'>TCPIPServer</span> by double-clicking on it. Click the <span class=\'icon\'>Flow Exerciser</span> icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow. "},{"details":"Click the <span class=\'icon\'>Send Message</span> icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow."},{"details":"Choose the provided input message (DataLibrary/TestSaleMessage.xml) and click the <span class=\'uicontrol\'>Send</span> button to invoke the flow."},{"details":"After the request message is processed, you can choose to highlight the path which was followed through the message flow."}]}},{"section":"Verify the flow execution:","steps":{"type":"ordered","details":[{"details":"Click on any connection to see the data that passed through that connection."},{"details":"You can also open a trace file <span class=\'filepath\'>C:\\\\temp\\\\TCPIP_TRACE.txt</span> specified by the Trace nodes to see how the message travels through the message flows."},{"details":"The same output directory contains the output file <span class=\'filepath\'>C:\\\\temp\\\\TCPClientTutorialOutput.txt</span> created by the file output node. The file contains the transformed message SalesReport."},{"details":"To stop recording the message path through the flow, click the <span class=\'icon\'>Return flow to edit mode</span> icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/stopFlowExerciser.png\' alt=\'Return flow to edit mode\' />."},{"details":"You can click the <span class=\'uicontrol\'>Clean up</span> action to remove the tutorial source code from the workspace."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Processing TCP/IP messages","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bz90050_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TCP/IP nodes","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac67370_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TCP/IP scenarios in IBM App Connect Enterprise","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac67390_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Using custom keywords with message flows":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using custom keywords with message flows","shortDescription":"Learn how to assign custom keywords to message flows and then once deployed, read the keywords using the Java Integration API.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Using custom keywords with message flows"},{"title":"Java IBM Integration API"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use the com.ibm.broker.config.proxy.* classes in a Java application to discover details about a message flow\'s custom keywords."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates an application which contains a single message flow which has had two custom keywords defined in its Long Description field. The message flow has an HTTPInput node, a JavaCompute node and an HTTPReply node. The Java code which runs inside the JavaCompute node uses the Java Integration API\'s com.ibm.broker.config.proxy.* classes to query the keywords and their values which are included in the response message from the flow."},{"section":"The tutorial requires an integration node owned server, or a stand-alone integration server. The same message flow and the administration API can be used regardless of the selected deployment target."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleKeywords</span> and a Java project named <span class=\'application\'>ExampleKeywordsJava</span>. In the Integration Development perspective, java projects are shown as dependencies, so to see <span class=\'application\'>ExampleKeywordsJava</span> you should expand the Java section of the <span class=\'application\'>ExampleKeywords</span> application."},{"section":"<span class=\'application\'>ExampleKeywords</span> provides a single message flow named <span class=\'resource\'>Keywords</span>. The message flow provides an HTTPInput node wired to a JavaCompute node, then an HTTPReply. The HTTPInput node is configured to receive any input message as BLOB. The JavaCompute node creates an XML output message. The output message carries basic details about the flow and where it is deployed, including the names and values of some custom keywords which were defined in the Long Description field of the flow."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExampleKeywords</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create an integration node owned server, inspect the message flow and then deploy it","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, open the message flow <span class=\'application\'>Keywords.msfglow</span>. Click on the flow\'s backdrop (as opposed to having any of the node\'s selected) and switch to the Properties tab, to display the node\'s properties. You should see:<br><span class=\'application\'>Short description:</span><br><code>This message flow is designed to demonstrate how the keywords capability works</code><br><span class=\'application\'>Long description:</span><br><code>$MQSIAuthor = Ben ThompsonMQSI$</code><br><code>$MQSIEnvironment = DemoMQSI$</code><br>"},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>Keywords.bar</span> which you will find inside the <span class=\'application\'>ExampleKeywords</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Keywords.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"One saved input message named <span class=\'resource\'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage</span> contains this data:<br><span class=\'resource\'>The input data can be anything!</span>"},{"details":"Click on the reply message and you will see that it contains this data:<br><span class=\'resource\'>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;Message&gt;<br>&nbsp;&nbsp;&lt;NodeName&gt;TESTNODE&lt;/NodeName&gt;<br>&nbsp;&nbsp;&lt;ServerName&gt;default&lt;/ServerName&gt;<br>&nbsp;&nbsp;&lt;ApplicationName&gt;ExampleKeywords&lt;/ApplicationName&gt;<br>&nbsp;&nbsp;&lt;FlowName&gt;Keywords&lt;/FlowName&gt;<br>&nbsp;&nbsp;&lt;Keywords&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Author&gt;Ben Thompson&lt;/Author&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Environment&gt;Demo&lt;/Environment&gt;<br>&nbsp;&nbsp;&lt;/Keywords&gt;<br>&lt;/Message&gt;</span>"},{"details":"After you close the dialog, the path taken through the message flow is highlighted."}]}}]}},{"section":"This tutorial has shown how to assign custom keywords to message flows and then once deployed, read the keywords using the Java Integration API."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Adding version information and custom keyword values to your development resources","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac26521_.htm","type":"web"}]}}}}},"Using HTTPS and certificates with the HTTPInput, HTTPReply and HTTPRequest nodes":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using HTTPS and certificates with the HTTPInput, HTTPReply and HTTPRequest nodes","shortDescription":"Learn how to create a Public Key Infrastructure using self-signed certificates in order to send data securely across HTTPS.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainJava","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"HTTPInput node"},{"title":"HTTPReply node"},{"title":"HTTPRequest node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Generate self-signed certificates, keystores and truststores to secure communication between message flows over HTTPS."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates two simple message flows, which are deployed to two separate stand-alone integration servers. One flow contains an HTTPRequest node which invokes the HTTPInput node in the other flow across HTTPS. The tutorial also provides step-by-step instructions for setting up keystores and truststores using both keytool and the IBM Global Security Kit."},{"section":"The tutorial requires two standalone integration servers which are created as part of the tutorial."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Setting up a Public Key Infrastructure","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ap34020_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"<center><img src=\'http://ot4i.github.io/https-certificates-tutorial/v11/en/Overview.png\' alt=\'\' /></center>"},{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleClient</span> and an application named <span class=\'application\'>ExampleServer</span>."},{"section":"<span class=\'application\'>ExampleClient</span> provides a message flow named <span class=\'resource\'>ExampleClient</span> which is driven by an HTTPInput node configured to receive any input message across HTTP. An HTTPRequest node makes an HTTPS mutual authentication connection to the ExampleServer flow."},{"section":"<span class=\'application\'>ExampleServer</span> provides a message flow named <span class=\'resource\'>ExampleServer</span> which receives HTTPS data from the first flow."},{"section":"Once imported using the link on the right, the provided applications are ready to be deployed and tested. Before doing this, the Prepare tab contains instructions for creating the self-signed certificates and keystores which are required to secure the HTTPS communications between the flows."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Setting up a Public Key Infrastructure","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ap34020_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create the keystores, truststores and certificates followed by two stand alone integration servers.","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The following instructions are written assuming a Windows environment. Applying equivalent instructions for other platforms is left to the reader - for assistance in this regard the additional links to the full Knowledge Center product documentation will be helpful. The instructions show how to use two different utilities for the creation of keystores. Keytool is provided in the Java Development Kit (provided as part of your IBM App Connect Enterprise installation) and gsk8capicmd_64 is provided as part of IBM\'s Global Security Kit (located in your IBM MQ installation).","steps":{"type":"ordered","details":[{"details":"Create myclient_keystore.jks to contain a self-signed certificate for myclient:<br><code>keytool -genkeypair -keystore myclient_keystore.jks -storepass p4ssword -storetype jks -alias myclientcert -dname \\"CN=myclient,O=IBM,OU=DEV,L=Hursley,C=GB\\"</code>"},{"details":"Export a public key certificate for myclient:<br><code>keytool -exportcert -keystore myclient_keystore.jks -storepass p4ssword -storetype jks -alias myclientcert -file myclientcert.arm</code>"},{"details":"Create myserver_truststore.jks to contain the public key certificate for myclient:<br><code>keytool -importcert -keystore myserver_truststore.jks -storepass passw0rd -storetype jks -alias myclientcert -file myclientcert.arm</code>"},{"details":"Create myserver_keystore.p12:<br><code>gsk8capicmd_64 -keydb -create -db myserver_keystore.p12 -type p12 -pw passw0rd</code>"},{"details":"Create a self-signed certificate for myserver:<br><code>gsk8capicmd_64 -cert -create -db myserver_keystore.p12 -dn \\"CN=myserver,O=IBM,OU=DEV,L=Hursley,C=GB\\" -pw passw0rd -label myservercert</code>"},{"details":"Export a public key certificate for myserver:<br><code>gsk8capicmd_64 -cert -extract -db myserver_keystore.p12 -pw passw0rd -label myservercert -target myservercert.arm -format ascii</code>"},{"details":"Create myclient_truststore.jks to contain the public key certificate for myserver:<br><code>keytool -importcert -keystore myclient_truststore.jks -storepass p4ssword -storetype jks -alias myservercert -file myservercert.arm</code>"}]}},{"section":"Create and configure the Integration Server which will play the role of client:","steps":{"type":"ordered","details":[{"details":"Create the work directory:<br><code>mqsicreateworkdir C:\\\\temp\\\\workdirclient</code>"},{"details":"Set the integration server\'s credentials for accessing its keystore and truststore:<br><code>mqsisetdbparms -w C:\\\\temp\\\\workdirclient -n client::keystorePass -u notused -p p4ssword</code>"},{"details":"Configure the integration server. In the C:\\\\temp\\\\workdirclient\\\\server.conf.yaml file, edit the ResourceManagers / JVM section:<br><code>    keystoreType: \'JKS\'</code><br><code>    keystoreFile: \'C:\\\\temp\\\\myclient_keystore.jks\'</code><br><code>    keystorePass: \'client::keystorePass\'</code><br><code>    truststoreType: \'JKS\'</code><br><code>    truststoreFile: \'C:\\\\temp\\\\myclient_truststore.jks\'</code><br><code>    truststorePass: \'client::keystorePass\'</code>"},{"details":"Start the integration server:<br><code>IntegrationServer -w C:\\\\temp\\\\workdirclient --admin-rest-api 7600 --http-port-number 7900</code>"}]}},{"section":"Create and configure the Integration Server which will play the role of server:","steps":{"type":"ordered","details":[{"details":"Create the work directory:<br><code>mqsicreateworkdir C:\\\\temp\\\\workdirserver</code>"},{"details":"Set the integration server\'s credentials for accessing its keystore and truststore:<br><code>mqsisetdbparms -w C:\\\\temp\\\\workdirserver -n server::keystorePass -u notused -p passw0rd</code>"},{"details":"Configure the integration server. In the C:\\\\temp\\\\workdirserver\\\\server.conf.yaml file, edit the ResourceManagers / HTTPSConnector section:<br><code>    ListenerPort: 7843</code><br><code>    ReqClientAuth: true</code><br><code>    KeyAlias: \'server1cert\'</code><br><code>    KeyPassword: \'server::keystorePass\'</code><br><code>    KeystoreFile: \'C:\\\\temp\\\\myserver_keystore.p12\'</code><br><code>    KeystorePassword: \'server::keystorePass\'</code><br><code>    KeystoreType: \'p12\'</code><br><code>    TruststoreFile: \'C:\\\\temp\\\\myserver_truststore.jks\'</code><br><code>    TruststorePassword: \'server::keystorePass\'</code><br><code>    TruststoreType: \'JKS\'</code>"},{"details":"Start the integration server:<br><code>IntegrationServer -w C:\\\\temp\\\\workdirserver --admin-rest-api 7601 --http-port-number 7901</code>"}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Deploy the message flows and then use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"In following these instructions ensure you deploy the correct flow to the correct integration server, as instructed:","substeps":{"type":"unordered","details":[{"details":"In the Toolkit, connect to the stand-alone integration server on administration port 7601 (which is based upon the work directory C:\\\\temp\\\\workdirserver) and drag and drop deploy the BAR file named <span class=\'application\'>Server.bar</span> which you will find inside the application <span class=\'resource\'>ExampleServer</span>."},{"details":"Open <span class=\'resource\'>ExampleClient.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow, ensuring that you deploy this flow to the stand-alone integration server available on administration port 7600 (which is based upon the work directory C:\\\\temp\\\\workdirclient)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"One saved input message named <span class=\'resource\'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage</span> contains this data:<br><span class=\'resource\'>This can be anything</span>"},{"details":"This message flow invokes <span class=\'resource\'>ExampleServer.msgflow</span> across HTTPS and then when the reply message is returned back to the test client you will see that it contains this data:<br><span class=\'resource\'>{\\"Message\\":\\"If you see this response your test succeeded!\\"}</span>"},{"details":"After you close the dialog, the path taken through the message flow is highlighted."}]}}]}},{"section":"This tutorial has shown how to create a Public Key Infrastructure using self-signed certificates in order to send data securely across HTTPS."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Setting up a Public Key Infrastructure","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ap34020_.htm","type":"web"}]}}}}},"Using MQ and HTTP to link message flows in a coordinated request-reply scenario":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using MQ and HTTP to link message flows in a coordinated request-reply scenario","shortDescription":"Learn how to use an MQ queue to store messages which link together HTTP request and reply flows with a back end application","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"HTTPInput node"},{"title":"HTTPReply node"},{"title":"MQGet node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to link together HTTP clients with a back-end application using MQ queues defined on a local queue manager."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple architectural pattern for coordinating HTTP request and reply messages when exchanging information with a back-end application via MQ queues.  There are three message flows - a RequestFlow, a BackendApplicationFlow and a ReplyFlow. RequestFlow receives JSON data over HTTP, and stores the initial input data on a queue, before passing part of the data on to the BackendApplicationFlow using an MQ queue. The MQ message is written using the HTTP Reply Identifier as the MsgId value. When the BackendReplyApp responds, it follows the very common MQ Request-Reply convention of copying this identifier into the CorrelId of the MQ reply message. This means that the final ReplyFlow can recover the stored initial input data and unify part of this data with the repsonse from the backend and return it to the initial requesting HTTP client."},{"section":"To simulate how a similar pattern might apply to real world scenarios, RequestFlow and ReplyFlow also execute simple message transformation from JSON to XML and vice versa. In this example, BackendApplicationFlow represents some kind of voting application. Personal information like a voter\'s name and address is held by the RequestFlow and ReplyFlow but is not passed to the BackendApplicationFlow."},{"section":"The tutorial instructions are structured for an integration node owned server, that is associated with a local queue manager, but could be easily amended to run in an independent integration server if you prefer.There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, a single project will be created in your workspace: An application named <span class=\'application\'>CoordinatedRequestReplyTutorial</span>. The application contains three message flows: <span class=\'application\'>RequestFlow</span>, <span class=\'application\'>BackendApplicationFlow</span> and <span class=\'application\'>ReplyFlow</span>."},{"section":"<span class=\'application\'>RequestFlow</span> receives a JSON input message over HTTP. The subflow named <span class=\'application\'>StoreOriginalMessage</span> converts from HTTP to MQ and stores a copy of the input data on a queue named <b>STORE.QUEUE</b>. The following Compute node transforms into an XML output message and writes to BACKEND.QUEUE."},{"section":"<span class=\'application\'>BackendApplicationFlow</span> receives the XML message and stores the voting intention (A or B!) in an in-memory variable. The output message is given a field to represent the time at which the data was processed by carrying the current time value. The MQReply node at the end of the flow writes the message to the queue BACKEND.REPLY"},{"section":"<span class=\'application\'>ReplyFlow</span> parses the XML reply message, and uses its CorrelId to retrieve the original input message stored on <b>STORE.QUEUE</b> using an MQGet node in the subflow named <span class=\'application\'>RetrieveOriginalMessage</span>, and combines the name of the voter with the ProcessingTime value that was returned by the back-end.  The reply message is returned back to the original requesting client over HTTP."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>CoordinatedRequestReplyTutorial</span> is ready to be deployed and tested. Before doing this, we will configure an integration node using the instructions on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create a queue manager and integration node, and then deploy the message flows","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The tutorial requires MQ definitions for three queues.  Execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"Create an IBM MQ queue manager and configure it by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'>TESTQM</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'>TESTQM</span></code>"},{"details":"Next create the two queues by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>define ql(BACKEND.QUEUE)</code><br><code>define ql(BACKEND.REPLY)</code><br><code>define ql(STORE.QUEUE)</code>"}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>TESTQM</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>CoordinatedRequestReplyTutorial.bar</span> which you will find inside the <span class=\'application\'>CoordinatedRequestReplyTutorial</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'application\'>RequestFlow.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow. Choose <b>VoteA</b>. The message data looks like this:<br><br><code>{<br>&nbsp;&nbsp;\\"VoterName\\": \\"Joe Bloggs\\",<br>&nbsp;&nbsp;\\"VoterAddress\\":\\"Hursley Park Southampton SO21 2JN\\",<br>&nbsp;&nbsp;\\"VotingIntention\\": \\"A\\"<br>}<br></code>"},{"details":"The HTTP Reply message will look like this:<br><code>{<br>&nbsp;&nbsp;\\"Reply\\": \\"Thank you Joe Bloggs for voting. Your intention has been successfully registered! It was processed at 20:38:32\\"<br>}</code><br>This scenario needs no further MQ output, so you can safely ignore the Listening for response status message and just click Close."}]}}]}},{"section":"This tutorial has shown how to use an MQ queue to store messages which link together HTTP request and reply flows with a back end application."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"HTTPInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04560_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"HTTPReply node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04585_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"MQGet node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20806_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Using Callable Flows to split synchronous flow processing":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Using Callable Flows to split synchronous flow processing","shortDescription":"Learn how to use the CallableFlowInvoke, CallableInput and CallableReply nodes to divide processing between message flows.","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"EventRoutingFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"CallableFlowInvoke node"},{"title":"CallableInput and CallableReply nodes"},{"title":"Testing Callable Flows locally"},{"title":"Dynamically controlling the CallableFlowInvoke node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to make synchronous remote calls between message flows, on a single server and between integration nodes."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial shows how different parts of an application can be split between different processes using Callable Flow nodes.  The example uses an application which provides a raw HTTP/JSON service, and two separate applications which provide differently formatted timestamps for use in other flows."},{"section":"This example uses a Callable Flow to provide that timestamp service, so it can be invoked from one or more message flows, but is not exposed outside the Integration Bus environment. A Mapping node is used to include the result of invoking the callable flow in the JSON response from the main flow."},{"section":"A further extension to this scenario is that the calling flow can dynamically switch which flow it calls based on input data. You can also deploy updates to the Callable Flows without changing or redeploying the invoking flow."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDL Schemas","link":"http://github.com/DFDLSchemas","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three applications will be created in your workspace: <span class=\'application\'>CallingParentApplication</span>, <span class=\'application\'>CallableTimestamp</span> and <span class=\'application\'>CallableTimestampAlternate</span>."},{"section":"<span class=\'application\'>CallableTimestamp</span> and <span class=\'application\'>CallableTimestampAlternate</span> each implement a single message flow with a CallableInput and CallableReply node. Both applications are configured with the same Endpoint Name. In this tutorial, these two applications will run in the same integration server as the other flows. With additional configuration they can run on different servers or even on different machines."},{"section":"<span class=\'application\'>CallingParentApplication</span> has a single flow called <span class=\'msgflow\'>TimestampMyJSON</span>. This exposes a raw HTTP service and uses a CallableFlowInvoke node to call one of the possible Timestamp flows. <span class=\'msgflow\'>TimestampMyJSON</span> also allows a value in the input JSON to be specified which allows you to dynamically invoke a callable flow from a different application, overriding the default value specified on the CallableFlowInvoke node."},{"section":"These are explained in more detail when you move on to the Prepare tab, along with setup steps you need to complete before running the flows."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Callable message flows","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/cl23141_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Imported projects","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Look inside application <span class=\'application\'>CallingParentApplication</span>. There is a message flow <span class=\'msgflow\'>TimestampMyJSON</span> which has a CallableFlowInvoke node, with a label starting <span class=\'resource\'>Call Timestamp Flow, updates body</span>. This is configured with two names: the Target Application and the Target Endpoint Name. These are used to resolve which callable flow is used."},{"section":"The mapping node <span class=\'resource\'>Apply any LE overrides</span> will set the value of <span class=\'varname\'>LocalEnvironment/Destination/CallableFlow/Invoke/targetApplication</span> if set in the input JSON message. This allows a differently named application to be called from the <span class=\'resource\'>CallableFlowInvoke</span> node, overriding the node option."},{"section":"The two applications providing callable flows are built into a BAR file <span class=\'resource\'>callable_flows.bar</span>. Deploy this BAR file now. The rest of this tutorial\'s instructions will assume the use of the default integration server owned by TESTNODE. Move on to the Run tab to exercise the flows and see them working."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Developing synchronously callable message flows","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/cl23143_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Use the <span class=\'resource\'>TimestampMyJSON.msgflow</span> in application <span class=\'application\'>CallingParentApplication</span> to run this tutorial. You should have already deployed the <span class=\'resource\'>callable_flows.bar</span> to the default integration server on your TESTNODE.","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>TimestampMyJSON.msgflow</span>, and click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to deploy and start testing the flow. If you are prompted where to deploy, ensure you deploy to the same integration server as the <span class=\'application\'>CallableTimestamp</span> applications."},{"details":"Click the Send Message icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow."},{"details":"Choose the input message <span class=\'resource\'>JSON message, no overrides</span>, and click Send. Your request message is sent to the HTTP input node."},{"details":"When the list of actions is shown, click on the Received HTTP reply message... item to show the output from the flow. Note that a timestamp has been added into the output message."},{"details":"After you close the dialog, the path taken through the messageflow is highlighted. Click on the message icon on each connection to see how the tree is updated by each node."},{"details":"Once you have tried the first message, click Send Message <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' /> again and select the <span class=\'resource\'>JSON message, override target application</span> message. Note that it contains an additional tag <span class=\'userinput\'>overriddenApplicationName</span> with value <span class=\'userinput\'>CallableTimestampAlternate</span>."},{"details":"Send that through the flow and note the output contains <span class=\'userinput\'>Alternate timestamp</span>. If you look at the message tree before the CallableFlowInvoke node, note that a value is set in LocalEnvironment to override the targetApplication, which makes the flow under test invoke a different Callable Flow."}]}},{"section":"You can further experiment with this scenario by changing the <span class=\'application\'>CallableTimestamp</span> application and redeploying it, and then sending a message through the unchanged <span class=\'application\'>CallingParentApplication</span>. Note that the behaviour changes immediately without needing to change or redeploy the invoking flow."},{"section":"This tutorial shows the invoking and callable flow running in the same integration server, which requires no additional setup. You can also use these applications to experiment with running the invoking flow and the callable flow on different integration servers or different machines, but some additional configuration is required to enable cross-server communication. Look at the Knowledge Center links below for information on topologies in which these flows can run, and how to set them up."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing synchronously callable message flows","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/cl23143_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Preparing the environment for callable flows","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/cl23148_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Call a REST API using the RESTRequest node":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Call a REST API using the RESTRequest node","shortDescription":"Learn how to use a RESTRequest node to call a REST API","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"REST Request node"},{"title":"Calling a REST API using the RESTRequest node"},{"title":"Transformation using graphical data mapping"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to use the RESTRequest Node to call a REST API."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how a RESTRequest node can be used to call REST APIs. A simple application has been created, containing a message flow which receives XML data over HTTP (using an HTTPInput node). The XML data is parsed and passed to a RESTRequest node. The RESTRequest node\'s properties specify where the REST API is running (in this tutorial this will be your localhost), and the Request parameter to send. The REST API implements a GET operation, in which a graphical data mapping node is used to \'retrieve\' information (actually the values are hard coded in a map) about a user based on the input data."},{"section":"In App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An application can contain App Connect Enterprise resources, such as flows, message definitions, libraries, and JAR files. In this tutorial, an application is used to hold the message flow which contains the RESTRequest node. A referenced shared Library is used, to hold an XML schema to describe the input data and a Swagger file to describe the interface of the REST API which is invoked."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDL Schemas","link":"http://github.com/DFDLSchemas","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Use the Import button to the right to import the tutorial artifacts into your workspace:","steps":{"type":"unordered","details":[{"details":"The <b>RESTRequest_Client</b> application contains a simple message flow, which will call the REST API using a RESTRequest Node."},{"details":"The <b>RESTRequest_SharedLibrary</b> contains resources which may be referenced by different applications or other libraries."},{"details":"The <b>RESTRequest_API</b> has one implemented operation (GET)."}]}},{"section":"Please note that the <b>RESTRequest_API</b> contains its own copy of the swagger document, which describes the REST API. The application references a separate copy of the swagger file in <b>RESTRequest_SharedLibrary</b>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>RESTRequest_Everything.bar</b> inside the <b>RESTRequest_Client</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>RESTRequest_Client</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/REST/getUser -d @.\\\\RESTRequest_client\\\\input1.xml</code>"},{"details":"The input XML message structure looks like this:<br><b>&lt;User&gt;&lt;UserNumber&gt;1&lt;/UserNumber&gt;&lt;/User&gt;"},{"details":"The output JSON message structure looks like this:<br><b>{\\"userNumber\\":\\"1\\",\\"firstName\\":\\"Peter\\",\\"lastName\\":\\"Pan\\",\\"userDetails\\":\\"Employee\\"}"},{"details":"Feel free to test the REST API by sending \'User 2\' (input2.xml) or \'User 3\' (input3.xml) test messages, in a similar way to the above instructions"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}}}}},"Call a REST API using the RESTAsyncRequest node":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Call a REST API using the RESTAsyncRequest node","shortDescription":"Learn how to use a RESTAsyncRequest node to call a REST API and a RESTAsyncResponse node to receive the response.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"RESTAsyncRequest node"},{"title":"Calling a REST API using the RESTAsyncRequest node"},{"title":"Transformation using graphical data mapping"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Understand how to use the RESTAsyncRequest Node to call a REST API."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how a RESTAsyncRequest node and a RESTAsyncResponse node can be used to call a REST API and receive the response back asynchronously on a separate thread. A simple application has been created, which contains two message flows. The first flow receives XML data over HTTP (using an HTTPInput node). The XML data is parsed and passed to a RESTAsyncRequest node. The RESTAsyncRequest node\'s properties specify where the REST API is running (in this tutorial this will be your localhost), and the Request parameter to send. The REST API implements a GET operation, in which a graphical data mapping node is used to \'retrieve\' information (actually the values are hard coded in a map) about a user based on the input data. A RESTAsyncResponse node in the second message flow receives the REST API response and transmits it to the HTTPReply node."},{"section":"In App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An application can contain App Connect Enterprise resources, such as flows, message definitions, libraries, and JAR files. In this tutorial, an application is used to hold the message flow which contains the RESTAsyncRequest node. A referenced shared Library is used, to hold an XML schema to describe the input data and a Swagger file to describe the interface of the REST API which is invoked."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDL Schemas","link":"http://github.com/DFDLSchemas","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Use the Import button to the right to import the tutorial artifacts into your workspace:","steps":{"type":"unordered","details":[{"details":"The <b>RESTAsyncRequest_Client</b> application application contains two simple message flows, which will initiate the call to the REST API using a RESTAsyncRequest node and handle the response using a RESTAsyncResponse node."},{"details":"The <b>RESTAsyncRequest_SharedLibrary</b> contains resources which may be referenced by different applications or other libraries."},{"details":"The <b>RESTAsyncRequest_API</b> has one implemented operation (GET)."}]}},{"section":"Please note that the <b>RESTAsyncRequest_API</b> contains its own copy of the swagger document, which describes the REST API. The application references a separate copy of the swagger file in <b>RESTAsyncRequest_SharedLibrary</b>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>RESTAsyncRequest_Everything.bar</b> inside the <b>RESTAsyncRequest_Client</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using integration services","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>RESTAsyncRequest_Client</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/REST/getUser -d @.\\\\RESTAsyncRequest_client\\\\input1.xml</code>"},{"details":"The input XML message structure looks like this:<br><b>&lt;User&gt;&lt;UserNumber&gt;1&lt;/UserNumber&gt;&lt;/User&gt;"},{"details":"The output JSON message structure looks like this:<br><b>{\\"userNumber\\":\\"1\\",\\"firstName\\":\\"Peter\\",\\"lastName\\":\\"Pan\\",\\"userDetails\\":\\"Employee\\"}"},{"details":"Feel free to test the REST API by sending \'User 2\' (input2.xml) or \'User 3\' (input3.xml) test messages, in a similar way to the above instructions"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}}}}},"Aggregation nodes using MQ nodes with back-end services":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Aggregation nodes using MQ nodes with back-end services","shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using MQ nodes.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Aggregation nodes"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to fan-out requests over MQ and aggregate their responses."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives an MQ message, and fans-out two separate MQ request messages (after simple transformations using a Mapping node). Two separate example back-end message flows are provided which read these MQ requests and reply to a common response queue. Finally, a separate fan-in message flow aggregates the two response messages."},{"section":"This tutorial requires an integration node (or standalone server) which is associated with a local queue manager."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides three applications - one to hold the fan-out and fan-in aggregation flows, and two other applications for the back-end MQ flows."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three applications will be created in your workspace: <span class=\'application\'>AggregationMQ</span>, <span class=\'application\'>AggregationMQBackend1</span> and <span class=\'application\'>AggregationMQBackend2</span>."},{"section":"<span class=\'application\'>AggregationMQ</span> provides two message flows AggregationMQ_FanOut and AggregationMQ_FanIn which use MQ nodes to send messages to and receive messages from the back-end message flows."},{"section":"<span class=\'application\'>AggregationMQBackend1</span> provides a single message flow with MQInput, Mapping and MQOutput nodes. The application contains an XML schema describing the input and output formats."},{"section":"<span class=\'application\'>AggregationMQBackend2</span> provides a single message flow with MQInput, Mapping and MQOutput nodes. The application contains an XML schema describing the input and output formats."},{"section":"For simplicity, all three applications can be deployed to the same integration server. If you wish, you could deploy AggregationMQBackEnd1 and AggregationMQBackEnd2 to different integration servers (assuming you take account of this with your MQ queue manager configuration)."},{"section":"Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create queues","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The solution uses IBM MQ queues to route messages between the applications.","steps":{"type":"ordered","details":[{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create the queues used by the MQ nodes in this tutorial by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, type the following command:<br><code><span class=\'cmdname\'>runmqsc</span> <span class=\'varname\'> qmgr &lt; {WorkspacePath}/AggregationMQ/create_queues.mqsc</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name and <span class=\'varname\'>WorkspacePath</span> is the location of your current Toolkit workspace."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Deploy the back-end MQ applications</h4>","steps":{"type":"ordered","details":[{"details":"Deploy the <span class=\'application\'>AggregationMQBackend1</span> application, by dragging and dropping it on to the integration server (which we named default earlier in the tutorial)."},{"details":"Deploy the <span class=\'application\'>AggregationMQBackend2</span> application, by dragging and dropping it on to the integration server (which we named default earlier in the tutorial)."}]}},{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>AggregationMQ_FanIn.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow"}]}},{"details":"Open <span class=\'resource\'>AggregationMQ_FanOut.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow. <strong>WARNING!</strong> When prompted, be careful not to redeploy the message flow as this would accidentally cause the Flow Exerciser to undo the last step and remove <span class=\'resource\'>AggregationMQ_FanIn.msgflow</span> from test data capturing mode."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Select the saved message which has been provided, named <span class=\'resource\'>InputMessage1</span>, and click Send. Your message is sent to the MQInput node."},{"details":"The pop-up dialog will show the message has been sent and will then be reporting <span class=\'resource\'>Listening for response</span>, but in this example there is no response message, so just click <span class=\'resource\'>Close</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."}]}},{"details":"Return to <span class=\'resource\'>AggregationMQ_FanIn.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the View Path icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png\' alt=\'\' /> to see the path which the message took through the flow and see the message content on the path."},{"details":"Click on the message icon on the last connection in the flow and you should see the final output message carries return data from both of the back-end message flows which has been changed to upper case. The final output message on the output queue <span class=\'resource\'>AGG.OUT</span> should look similar to this:"},{"details":"<span class=\'resource\'>&lt;NS1:OverallOutputMessage xmlns:NS1=&quot;http://www.ibm.com/Example&quot;&gt;&lt;NS1:ResponseBackend1>DATA FOR BACKEND1&lt;/NS1:ResponseBackend1&gt;&lt;NS1:ResponseBackend2>DATA FOR BACKEND2&lt;/NS1:ResponseBackend2&gt;&lt;/NS1:OverallOutputMessage&gt;</span>"}]}}]}},{"section":"This tutorial has shown the Aggregation nodes orchestrating a fan-out and an associated fan-in of messages using MQ."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message Flow Aggregation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac00660_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Aggregation nodes using HTTPAsyncRequest nodes with back-end services":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Aggregation nodes using HTTPAsyncRequest nodes with back-end services","shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous HTTP nodes.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Aggregation nodes"},{"title":"Asynchronous HTTP"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to fan-out requests over HTTP and aggregate their responses."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple Application that receives an XML format message over HTTP, and fans-out two separate asynchronous HTTP request messages (after simple transformations to a CSV format using a Mapping node). Two separate example back-end Applications are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the Application aggregates values from the two response messages together."},{"section":"This tutorial requires an integration node (or standalone server) which is associated with a local queue manager."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides three Applications in total, one to hold the fan-out / fan-in aggregation flow, and two other back-end Applications. A shared library is used to hold the associated XSD and DFDL message model files which describe the required message formats."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three Applications and one shared library will be created in your workspace:","steps":{"type":"unordered","details":[{"details":"The Application <span class=\'application\'>AggregationHTTPAsync</span> provides a single message flow with HTTPAsyncRequest nodes to fan-out two requests. Two HTTPAsyncResponse nodes fan-in reply messages from the back-end message flows. This Application references the shared library named <span class=\'application\'>AggregationHTTPAsyncLib</span> which contains XSD and DFDL message model definitions."},{"details":"The Application <span class=\'application\'>AggregationHTTPBackend1</span> provides a single message flow which receives a CSV message and uses a Mapping node to upper-case the data and return it over HTTP."},{"details":"The Application <span class=\'application\'>AggregationHTTPBackend2</span> provides a single message flow which receives a CSV message and uses a Mapping node to upper-case the data and return it over HTTP."}]}},{"section":"For simplicity, the three Applications can all be deployed to the same integration server. Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create queues","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Although this solution uses HTTP to route messages between the applications, the aggregation nodes require MQ queues to operate.","steps":{"type":"ordered","details":[{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Deploy the back-end Applications</h4>","steps":{"type":"ordered","details":[{"details":"Deploy the <span class=\'application\'>AggregationHTTPAsyncLib</span> Shared Library, by dragging and dropping it on to the default integration server."},{"details":"Deploy the <span class=\'application\'>AggregationHTTPBackend1</span> Application, by dragging and dropping it on to the default integration server."},{"details":"Deploy the <span class=\'application\'>AggregationHTTPBackend2</span> Application, by dragging and dropping it on to the default integration server."}]}},{"section":"<h4>Test the scenario using the Flow Exerciser","steps":{"type":"ordered","details":[{"details":"Look inside the <span class=\'resource\'>AggregationHTTPAsync</span> Application, and open the message flow also named <span class=\'resource\'>AggregationHTTPAsync</span>","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow. If your Toolkit is connected to multiple servers, you may be asked which one you would like to use. Select an Integration Server under the node which you prepared to work with MQ in the Prepare section."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />, choose the provided InputMessage and click Send."},{"details":"Note that the input XML message has string values in lower case:"},{"details":"<code><b>&lt;Message&gt;</b></code>"},{"details":"<code><b>&lt;Backend1&gt;&lt;FieldA&gt;hello&lt;/FieldA&gt;&lt;FieldB&gt;world&lt;/FieldB&gt;&lt;FieldC&gt;backend1&lt;/FieldC&gt;&lt;/Backend1&gt;</b></code>"},{"details":"<code><b>&lt;Backend2&gt;&lt;FieldA&gt;greetings&lt;/FieldA&gt;&lt;FieldB&gt;globe&lt;/FieldB&gt;&lt;FieldC&gt;backend2&lt;/FieldC&gt;&lt;/Backend2&gt;</b></code>"},{"details":"<code><b>&lt;/Message&gt;</b></code>"},{"details":"The Flow Exerciser should report that an HTTP Reply message has been received. Note that this response message has string values in upper case which has occurred as a result of the aggregation\'s invocation of the backend services:"},{"details":"<code><b>&lt;Message&gt;</b></code>"},{"details":"<code><b>&lt;Backend1&gt;&lt;FieldA&gt;HELLO&lt;/FieldA&gt;&lt;FieldB&gt;WORLD&lt;/FieldB&gt;&lt;FieldC&gt;BACKEND1&lt;/FieldC&gt;&lt;/Backend1&gt;</b></code>"},{"details":"<code><b>&lt;Backend2&gt;&lt;FieldA&gt;GREETINGS&lt;/FieldA&gt;&lt;FieldB&gt;GLOBE&lt;/FieldB&gt;&lt;FieldC&gt;BACKEND2&lt;/FieldC&gt;&lt;/Backend2&gt;</b></code>"},{"details":"<code><b>&lt;/Message&gt;</b></code>"}]}},{"details":"Close the Flow Exerciser:","substeps":{"type":"unordered","details":[{"details":"You should be able to see the path which the message followed through the flow."},{"details":"Click on the flow connections to see what the message tree looked like as it traversed through the Integration Service."}]}}]}},{"section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages using the HTTP transport to back-end services."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message Flow Aggregation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac00660_.htm","type":"web"}]}}}}},"Aggregation nodes using RESTAsyncRequest nodes with back-end services":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Aggregation nodes using RESTAsyncRequest nodes with back-end services","shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous REST nodes.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Aggregation nodes"},{"title":"Asynchronous REST nodes"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to fan-out asynchronous REST invocations and aggregate their responses."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple REST API that receives an HTTP GET, and fans-out two separate asynchronous REST invocations. Two separate example back-end REST APIs are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the original REST API aggregates values from the two response messages together."},{"section":"This tutorial requires an integration node (or standalone server) which is associated with a local queue manager."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. A REST API is a specialized form of an application which describes a set of resources, and a set of operations that can be called on those resources from any HTTP client. This tutorial provides a REST API which holds the fan-out / fan-in aggregation flow, and two other REST APIs for the back-end flows."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three REST APIs will be created in your workspace:"},{"section":"The REST API <span class=\'application\'>AggregationRESTAsync</span> provides a single GET operation on a resource named AggregationResponse. The subflow representation of the operation, <span class=\'application\'>getAggregatedResponse.subflow</span>, uses RESTAsyncRequest nodes to fan-out two requests. Two RESTAsyncResponse nodes are used to fan-in reply messages from the back-end message flows."},{"section":"The REST API <span class=\'application\'>AggregationRESTBackend1</span> provides a single GET operation on a resource named Backend1. The subflow representation of the operation, <span class=\'application\'>getBackend1.subflow</span>, contains a Mapping node to uppercase the data."},{"section":"The REST API <span class=\'application\'>AggregationRESTBackend2</span> provides a single GET operation on a resource named Backend2. The subflow representation of the operation, <span class=\'application\'>getBackend2.subflow</span>, contains a Mapping node to uppercase the data."},{"section":"For simplicity, the REST API and two back-end REST APIs can all be deployed to the same integration server. If you wish, you could deploy <span class=\'application\'>AggregationRESTBackend1</span> and <span class=\'application\'>AggregationRESTBackend2</span> to different integration servers (assuming you update the Swagger json files used by the RESTRequest nodes in <span class=\'application\'>AggregationRESTAsync</span>)."},{"section":"Once you import the tutorial, the provided REST APIs are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create queues","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Although this solution uses HTTP to route messages between the REST APIs, the aggregation nodes require MQ queues to operate.","steps":{"type":"ordered","details":[{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Deploy the back-end REST APIs</h4>","steps":{"type":"ordered","details":[{"details":"Deploy the <span class=\'application\'>AggregationRESTBackend1</span> REST API, by dragging and dropping it on to the default integration server."},{"details":"Deploy the <span class=\'application\'>AggregationRESTBackend2</span> REST API, by dragging and dropping it on to the default integration server."}]}},{"section":"<h4>Use any web browser to simply test the REST API","steps":{"type":"ordered","details":[{"details":"Look inside the <span class=\'resource\'>AggregationRESTAsync</span> REST API, right-click the <span class=\'resource\'>AggregationRESTAsync.msgflow</span> and select <span class=\'resource\'>Open with > Message Flow Editor</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow. When it appears, the <span class=\'resource\'>Ready to record message</span> dialog can be dismissed by clicking Close."}]}},{"details":"Open any web browser. We will be using this to send an HTTP GET into the REST API <span class=\'resource\'>AggregationRESTAsync</span>.","substeps":{"type":"unordered","details":[{"details":"In the address bar of the browser paste in the URL for the HTTP GET operation. If you have used default settings, then this is likely to be:"},{"details":"http://localhost:7080/aggregationrestasync/v1/AggregatedResponse?Field1=value1&Field2=value2"},{"details":"Note that this URL includes query parameters with the values <span class=\'resource\'>value1</span> and <span class=\'resource\'>value2</span>. One of these values will be sent to each back-end REST API. The back end REST APIs will uppercase the values and reply."}]}},{"details":"Return to <span class=\'resource\'>AggregationRESTAsync.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the View Path icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png\' alt=\'\' /> to see the path which the message took through the flow and see the message content on the path. You can open the subflow <span class=\'resource\'>getAggregatedResponse.subflow</span> and click on the flow connections to see what the message tree looked like as it traversed through the REST API."},{"details":"Back in the web browser, you should see the final output message carries return data from both of the back-end REST APIs which has been changed to upper case. It should look like this:"},{"details":"<span class=\'resource\'>{&quot;ResponseBackend1&quot;:&quot;VALUE1&quot;,&quot;ResponseBackend2&quot;:&quot;VALUE2&quot;}</span>"}]}}]}},{"section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages using asynchronous REST nodes."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message Flow Aggregation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac00660_.htm","type":"web"}]}}}}},"Aggregation nodes using SOAPAsyncRequest nodes with back-end services":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Aggregation nodes using SOAPAsyncRequest nodes with back-end services","shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous SOAP nodes.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Aggregation nodes"},{"title":"Asynchronous SOAP/HTTP"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to fan-out requests over SOAP/HTTP and aggregate their responses."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple Integration Service that receives a SOAP/HTTP message, and fans-out two separate asynchronous SOAP/HTTP request messages (after simple transformations using a Mapping node). Two separate example back-end Integration Services are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the Integration Service aggregates values from the two response messages together."},{"section":"This tutorial requires an integration node (or standalone server) which is associated with a local queue manager."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An Integration Service is a specialized form of an application with a defined interface and structure that acts as a container for a web services solution. This tutorial provides an Integration Service which holds the fan-out / fan-in aggregation flow, and two other back-end Integration Services. A shared library is used to hold the associated WSDL and XSD files describing the back-end services which is required by the main Integration Service."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Integration Services","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12001_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three Integration Services and one shared library will be created in your workspace:","steps":{"type":"unordered","details":[{"details":"The Integration Service <span class=\'application\'>AggregationSOAPAsync</span> provides a single operation named getAggregatedResponseOperation. The subflow representation of this operation uses SOAPAsyncRequest nodes to fan-out two requests. Two SOAPAsyncResponse nodes are used to fan-in reply messages from the back-end message flows. This Integration Service references the shared library named <span class=\'application\'>AggregationSOAPAsyncLib</span> which contains WSDL and XSD definitions of the backend services."},{"details":"The Integration Service <span class=\'application\'>AggregationSOAPBackend1</span> provides a single operation named backendOperation1 whose subflow representation uses a Mapping node to upper-case the input data."},{"details":"The Integration Service <span class=\'application\'>AggregationSOAPBackend2</span> provides a single operation named backendOperation2 whose subflow representation uses a Mapping node to upper-case the input data."}]}},{"section":"For simplicity, the three Integration Services can all be deployed to the same integration server. If you wish, you could deploy <span class=\'application\'>AggregationSOAPBackend1</span> and <span class=\'application\'>AggregationSOAPBackend2</span> to different integration servers. Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Integration Services","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12001_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create queues","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Although this solution uses HTTP to route messages between the Integration Services, the aggregation nodes require MQ queues to operate.","steps":{"type":"ordered","details":[{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Deploy the required Shared Library</h4>","steps":{"type":"ordered","details":[{"details":"Deploy the <span class=\'application\'>AggregationSOAPAsyncLib</span> Shared Library, by dragging and dropping it on to the default integration server."}]}},{"section":"<h4>Deploy the back-end Integration Services</h4>","steps":{"type":"ordered","details":[{"details":"Deploy the <span class=\'application\'>AggregationSOAPBackend1</span> Integration Service, by dragging and dropping it on to the default integration server."},{"details":"Deploy the <span class=\'application\'>AggregationSOAPBackend2</span> Integration Service, by dragging and dropping it on to the default integration server."}]}},{"section":"<h4>Test the scenario using the Flow Exerciser","steps":{"type":"ordered","details":[{"details":"Look inside the <span class=\'resource\'>AggregationSOAPAsync</span> Integration Service, and inside the Integration Servie Description folder, double-click the getAggregatedResponseOperation to open it.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow. If your Toolkit is connected to multiple servers, you may be asked which one you would like to use. Select an Integration Server under the node which you prepared to work with MQ in the Prepare section."},{"details":"Click the Send Message icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />, choose the provided TestInputMessage and click Send."},{"details":"Note that the input message includes a SOAP Body which has string values in lower case:"},{"details":"In getAggregatedResponseOperation: <span class=\'resource\'>...&lt;input1&gt;value1&lt;/input1&gt;&lt;input2&gt;value2&lt;/input2&gt;...</span>"},{"details":"The Flow Exerciser should report that a SOAP Reply message has been received. Note that this response message has string values in upper case which has occurred as a result of the aggregation\'s invocation of the backend services:"},{"details":"In getAggregatedResponseOperationResponse: <span class=\'resource\'>...&lt;NS1:output1&gt;VALUE1&lt;/NS1:output1&gt;&lt;NS1:output2&gt;VALUE2&lt;/NS1:output2&gt;..."}]}},{"details":"Close the Flow Exerciser and navigate back to the graphical subflow view of getAggregatedResponseOperation: ","substeps":{"type":"unordered","details":[{"details":"You should be able to see the path which the message followed through the flow."},{"details":"Click on the flow connections to see what the message tree looked like as it traversed through the Integration Service."}]}}]}},{"section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages using the SOAP/HTTP transport to back-end services."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message Flow Aggregation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac00660_.htm","type":"web"}]}}}}},"Aggregation nodes using CallableFlowAsyncInvoke nodes with back-end services":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Aggregation nodes using CallableFlowAsyncInvoke nodes with back-end services","shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous Callable Flow nodes.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Aggregation nodes"},{"title":"Asynchronous Callable Flows"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to fan-out asynchronous Callable Flow invocations and aggregate their responses."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple REST API that receives an HTTP GET, and fans-out two separate asynchronous Callable Flow invocations (after simple transformations using a Mapping node). Two separate example back-end message flows are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the REST API aggregates values from the two response messages together."},{"section":"This tutorial requires an integration node (or standalone server) which is associated with a local queue manager."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. A REST API is a specialized form of an application which describes a set of resources, and a set of operations that can be called on those resources from any HTTP client. This tutorial provides a REST API which holds the fan-out / fan-in aggregation flow, and two other applications for the back-end callable flows."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one REST API and two applications will be created in your workspace:"},{"section":"The REST API <span class=\'application\'>AggregationCallableAsync</span> provides a single GET operation on a resource named AggregationResponse. The subflow representation of the operation, <span class=\'application\'>getAggregatedResponse.subflow</span>, uses CallableFlowAsyncInvoke nodes to fan-out two requests. Two CallableFlowAsyncResponse nodes are used to fan-in reply messages from the back-end message flows."},{"section":"The Application <span class=\'application\'>AggregationCallableAsyncBackend1</span> provides a single message flow with CallableInput, Mapping and CallableReply nodes."},{"section":"The Application <span class=\'application\'>AggregationCallableAsyncBackend2</span> provides a single message flow with CallableInput, Mapping and CallableReply nodes."},{"section":"For simplicity, the REST API and two back-end applications can all be deployed to the same integration server. If you wish, you could deploy AggregationCallableAsyncBackend1 and AggregationCallableAsyncBackend2 to different integration servers (assuming you configure a Switch component to link the callable flows)."},{"section":"Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create queues","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Although this solution uses Callable Flows to route messages between the REST API and applications, the aggregation nodes require MQ queues to operate.","steps":{"type":"ordered","details":[{"details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'> qmgr</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'> qmgr</span></code>"},{"details":"Next create the queues by typing the following command:<br><code>server\\\\sample\\\\wmq\\\\iib_createqueues <span class=\'varname\'>qmgr</span></code><br>where<br><span class=\'varname\'>qmgr</span> is the queue manager name."}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>qmgr</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Deploy the back-end Callable Flow Applications</h4>","steps":{"type":"ordered","details":[{"details":"Deploy the <span class=\'application\'>AggregationCallableAsyncBackend1</span> application, by dragging and dropping it on to the default integration server."},{"details":"Deploy the <span class=\'application\'>AggregationCallableAsyncBackend2</span> application, by dragging and dropping it on to the default integration server."}]}},{"section":"<h4>Use any web browser to simply test the REST API","steps":{"type":"ordered","details":[{"details":"Look inside the <span class=\'resource\'>AggregationCallableAsync</span> REST API, right-click the <span class=\'resource\'>AggregationCallableAsync.msgflow</span> and select <span class=\'resource\'>Open with > Message Flow Editor</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow"}]}},{"details":"Open any web browser. We will be using this to send an HTTP GET into the REST API <span class=\'resource\'>AggregationCallableAsync</span>.","substeps":{"type":"unordered","details":[{"details":"In the address bar of the browser paste in the URL for the HTTP GET operation. If you have used default settings, then this is likely to be:"},{"details":"http://localhost:7080/aggregationcallableasync/v1/AggregatedResponse?Field1=value1&Field2=value2"},{"details":"Note that this URL includes query parameters with the values <span class=\'resource\'>value1</span> and <span class=\'resource\'>value2</span>. One of these values will be sent to each back-end flow. The back end flows will uppercase the values and reply."}]}},{"details":"Return to <span class=\'resource\'>AggregationCallableAsync.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the View Path icon <img src=\'https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png\' alt=\'\' /> to see the path which the message took through the flow and see the message content on the path. You can open the subflow <span class=\'resource\'>getAggregatedResponse.subflow</span> and click on the flow connections to see what the message tree looked like as it traversed through the REST API."},{"details":"Back in the web browser, you should see the final output message carries return data from both of the back-end callable message flows which has been changed to upper case. It should look like this:"},{"details":"<span class=\'resource\'>{&quot;ResponseBackend1&quot;:&quot;VALUE1&quot;,&quot;ResponseBackend2&quot;:&quot;VALUE2&quot;}</span>"}]}}]}},{"section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages to Callable Flows."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message Flow Aggregation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac00660_.htm","type":"web"}]}}}}},"Transformation using a Map in a message flow":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Transformation using a Map in a message flow","shortDescription":"Learn how to use a Mapping node to transform data using a Map in an App Connect Enterprise message flow by exploring this simple example.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Mapping node"},{"title":"XML parsing and writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using a Map.","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms data using a Map."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Mapping node, and sends this back to the HTTP request.","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Mapping node, and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Transformation_Map</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Transformation_Map</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>Transformation_Map.bar</b> inside the <b>Transformation_Map</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Message Maps","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/br28800_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>Transformation_Map</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_Map -d @.\\\\Transformation_Map\\\\input.xml</code>"},{"details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelopeA&gt;<br> &lt;SaleListA&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Sterling\\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Euros\\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleListA&gt;<br>&lt;/SaleEnvelopeA&gt;</b>"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Message Maps","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/br28800_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Transformation using ESQL in a message flow":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Transformation using ESQL in a message flow","shortDescription":"Learn how to use a Compute node to transform data using ESQL in an App Connect Enterprise message flow by exploring this simple example.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Compute node"},{"title":"XML parsing and writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using ESQL.","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms data using ESQL."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Compute node (whose behavior is based on ESQL), and sends this back to the HTTP request.","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Compute node (whose behavior is based on ESQL), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Transformation_ESQL</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Transformation_ESQL</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>Transformation_ESQL.bar</b> inside the <b>Transformation_ESQL</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Compute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04660_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>Transformation_ESQL</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_ESQL -d @.\\\\Transformation_ESQL\\\\input.xml</code>"},{"details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Sterling\\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Euros\\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Transformation using Java in a message flow":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Transformation using Java in a message flow","shortDescription":"Learn how to use a JavaCompute node to transform data using Java in an App Connect Enterprise message flow by exploring this simple example.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JavaCompute node"},{"title":"XML parsing and writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java.","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java), and sends this back to the HTTP request.","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Transformation_Java</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Transformation_Java</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>Transformation_Java.bar</b> inside the <b>Transformation_Java</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Transforming a message by using a JavaCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30270_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>Transformation_Java</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_Java -d @.\\\\Transformation_Java\\\\input.xml</code>"},{"details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Sterling\\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Euros\\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Transforming a message by using a JavaCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30270_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Transformation using Java (JAXB) in a message flow":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Transformation using Java (JAXB) in a message flow","shortDescription":"Learn how to use a JavaCompute node to transform data using Java (JAXB) in an App Connect Enterprise message flow by exploring this simple example.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JavaCompute node using JAXB"},{"title":"XML parsing and writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java (JAXB).","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java (JAXB)."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java JAXB), and sends this back to the HTTP request.","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java JAXB), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Transformation_JavaJAXB</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Transformation_JavaJAXB</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>Transformation_JavaJAXB.bar</b> inside the <b>Transformation_JavaJAXB</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using JAXB with a JavaCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac49010_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>Transformation_JavaJAXB</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_JavaJAXB -d @.\\\\Transformation_JavaJAXB\\\\input.xml</code>"},{"details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Sterling\\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Euros\\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using JAXB with a JavaCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac49010_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Transformation using XSL in a message flow":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Transformation using XSL in a message flow","shortDescription":"Learn how to use an XSL Transform node to transform data using XSL in an App Connect Enterprise message flow by exploring this simple example.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"XSL Transform node"},{"title":"XML parsing and writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using XSL.","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms data using XSL."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using an XSL Transform node, and sends this back to the HTTP request.","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using an XSL Transform node, and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Transformation_XSL</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Transformation_XSL</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>Transformation_XSL.bar</b> inside the <b>Transformation_XSL</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"XSLTransform node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac12490_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>Transformation_XSL</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_XSL -d @.\\\\Transformation_XSL\\\\input.xml</code>"},{"details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Sterling\\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Euros\\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"XSLTransform node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac12490_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Transformation using .NET in a message flow":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Transformation using .NET in a message flow","shortDescription":"Learn how to use a .NETCompute node to transform data using C# in an App Connect Enterprise message flow by exploring this simple example. (Windows platforms only)","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":".NETCompute node"},{"title":"XML parsing and writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using .NET.","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms data using .NET."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a .NETCompute node, and sends this back to the HTTP request.","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a .NETCompute node, and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Transformation_DotNet</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Transformation_DotNet</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server","_prepareComment":"Prepare an Integration Server","sections":[{"section":"Ensure you have the App Connect Enterprise .NET support installed on your system:","steps":{"type":"ordered","details":[{"details":"Open an App Connect Enterprise Command Console with elevated Administrator privileges and issue the following commands:<br><code>cd server\\\\bin</code><br><code>mqsiassemblyinstall -l IBM.Broker.Plugin.dll</code><br><code>mqsiassemblyinstall -l IBM.Broker.Support.dll</code>"}]}},{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>Transformation_DotNet.bar</b> inside the <b>Transformation_DotNet</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":".NETCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc16270_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>Transformation_DotNet</b> message flow by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_DotNet -d @.\\\\Transformation_DotNet\\\\input.xml</code>"},{"details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Sterling\\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\\"Full\\" Type=\\"Monthly\\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\\"Euros\\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":".NETCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc16270_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Transformation using the auto map feature":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Transformation using the auto map feature","shortDescription":"Learn how to use a Mapping node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"AutoMappingExample","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Mapping node"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use App Connect Enterprise to automatically map between source and target data structures using a graphical mapping tool which bases its auto map feature upon matching similar names and knowledge of synonyms."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial focusses on how to use the auto map capabilities of the IBM App Connect Enterprise Graphical Mapping Node. It provides JSON schema and XML schema metadata for input and output message structures which include fields with similar but non-matching names. The detailed configuration for auto map is described and the mapped outcomes demonstrated."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>AutoMappingExample</span> application will be imported into your workspace. The application contains two message flows named <span class=\'uicontrol\'>AutoMappingExample1</span> and <span class=\'uicontrol\'>AutoMappingExample2</span>. Each of these flows contains a mapping node, which has its source and target structures pre-configured, but the detailed mapping of individual fields has not yet been completed. This is deliberate as the instructions in the Run section will demonstrate how to use the auto-map feature in a variety of ways for completing the creation of these maps."},{"section":"The <span class=\'uicontrol\'>AutoMappingExample1</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Later in this tutorial we will test the message flows using a local integration server, which is created from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Try out the auto map feature in a variety of ways which demonstrate its detailed capabilities","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Demonstrate the option for exact matching</b>","steps":{"type":"ordered","details":[{"details":"Double click the mapping node in the <b>AutoMappingExample1</b> message flow and the map will open. In the map source data structure (shown on the left side of the map), right click the field in the source which is named <code>MYLASTNAME</code> and select the <b>Auto Map</b> option. The <b>Auto Map</b> wizard will open and the first page will be titled <b>Automatically map inputs to outputs</b>. Alter the settings on this page as follows:<br><code>Name Matching Options:<br>&nbsp;&nbsp;&nbsp;&nbsp;Case sensitive checkbox = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Alphanumeric characters = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outputs are the same = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outpus are more similar than = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the input and output names are matched to synonyms defined in a file = NOT SELECTED</code><br><br>Click Next. At the top of the dialog page a red cross will appear with the error <b>There are no matches satisfying the selected options</b>. Click Cancel."},{"details":"<b>Explanation for what we just saw:</b><br>The Name Matching options have specified that the names of input and output must be the same, although the check is not case sensitive. <code>MYLASTNAME</code> in the input JSON schema has no direct match in the output XML schema, whose closest match is <code>MYLASXXXX</code>."},{"details":"Now we have seen this, click Cancel to return back to the map view ready for the next demonstration."}]}},{"section":"<b>Demonstrate the option for non-exact matching, using a percentage match</b>","steps":{"type":"ordered","details":[{"details":"Back in the map (AutoMappingExample_Mapping.map), in the map source data structure (shown on the left side of the map), right click the field in the source which is named <code>MYLASTNAME</code> and select the <b>Auto Map</b> option. The <b>Auto Map</b> wizard will open and the first page will be titled <b>Automatically map inputs to outputs</b>. Alter the settings on this page as follows:<br><code>Name Matching Options:<br>&nbsp;&nbsp;&nbsp;&nbsp;Case sensitive checkbox = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Alphanumeric characters = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outputs are the same = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outpus are more similar than = SELECTED (Place the slider at the default 60%)<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the input and output names are matched to synonyms defined in a file = NOT SELECTED</code><br><br>Click Next. At the top of the dialog page a red cross will appear with the error <b>There are no matches satisfying the selected options</b>. Click Cancel."},{"details":"Move the slider from 60% down to 40%. Click Next. The dialog will now show a matching transform to <code>MYLASXXXXX</code>."},{"details":"<b>Explanation for what we just saw:</b><br>The Name Matching options have specified that the names of input and output do not need to be exactly the same.<br>In the first part of the test, with the slider set to a demand of 60%, there were no matches<br>In the second part of the test, with the slider set to a demand of 40%, there was a match to <code>MYLASXXXX</code> (5 out of 10 letters is greater than 40% similarity)."},{"details":"Now we have seen this, click Cancel to return back to the map view ready for the next demonstration."}]}},{"section":"<b>Demonstrate the option for case sensitive matching</b>","steps":{"type":"ordered","details":[{"details":"Back in the map (AutoMappingExample_Mapping.map), in the map source data structure (shown on the left side of the map), right click the field in the source which is named <code>MyLaSxXxXx</code> and select the <b>Auto Map</b> option. The <b>Auto Map</b> wizard will open and the first page will be titled <b>Automatically map inputs to outputs</b>. Alter the settings on this page as follows:<br><code>Name Matching Options:<br>&nbsp;&nbsp;&nbsp;&nbsp;Case sensitive checkbox = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Alphanumeric characters = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outputs are the same = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outpus are more similar than = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the input and output names are matched to synonyms defined in a file = NOT SELECTED</code><br><br>Click Next. At the top of the dialog page a red cross will appear with the error <b>There are no matches satisfying the selected options</b>."},{"details":"Change the options as follows:<br><code>Name Matching Options:<br>&nbsp;&nbsp;&nbsp;&nbsp;Case sensitive checkbox = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Alphanumeric characters = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outputs are the same = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outpus are more similar than = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the input and output names are matched to synonyms defined in a file = NOT SELECTED</code><br><br>Click Next. The dialog will now show a matching transform to <code>MYLASXXXXX</code>."},{"details":"<b>Explanation for what we just saw:</b><br>In the first test, we were seeking an exact match to the letters, compared in a case sensitive fashion and so there was no exact match for <code>MyLaSxXxXx</code><br>In the second test, we changed the comparison to not be case sensitive and so there was a match between <code>MyLaSxXxXx</code> and <code>MYLASXXXXX</code>."},{"details":"Now we have seen this, click Cancel to return back to the map view ready for the next demonstration."}]}},{"section":"<b>Demonstrate the option for using a file of synonyms</b>","steps":{"type":"ordered","details":[{"details":"Back in the map (AutoMappingExample_Mapping.map), in the map source data structure (shown on the left side of the map), right click the field in the source which is named <code>name</code> and select the <b>Auto Map</b> option. The <b>Auto Map</b> wizard will open and the first page will be titled <b>Automatically map inputs to outputs</b>. Alter the settings on this page as follows:<br><code>Name Matching Options:<br>&nbsp;&nbsp;&nbsp;&nbsp;Case sensitive checkbox = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Alphanumeric characters = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outputs are the same = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the names of inputs and outpus are more similar than = NOT SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Create transforms when the input and output names are matched to synonyms defined in a file = SELECTED<br>&nbsp;&nbsp;&nbsp;&nbsp;Filename = &lt;YourToolkitWorkspaceLocation&gt;\\\\AutoMappingExample\\\\MySynonyms.txt</code><br><br>Click Next. The dialog will now show a matching transform to <code>label</code></b>."},{"details":"<b>Explanation for what we just saw:</b><br>The file <code>MySynonyms.txt</code> was used to correlate the source message field named <code>name</code> with the field in the target message named <code>label</code>."},{"details":"Now we have seen this, click Cancel to return back to the map view ready for the next demonstration."}]}},{"section":"<b>Auto-map the message flow AutoMappingExample2 and then test using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"Close <b>AutoMappingExample1_Mapping</b> and open <b>AutoMappingExample2_Mapping</b>. In the map source data structure, right click the <b>Data</b> element beneath the <b>JSON</b> message domain and select the <b>Auto Map</b> option. Leave the default setting for the Mapping Scope which is <b>Map all simple descendants of the selected elements</b>. In the Mapping Criteria section, select the option named <b>Create transforms when the names of inputs and outputs are more similar than</b> and move the slider to <b>40% match</b>. click Next and the dialog should report that it has successfully found 11 mapping suggestions. Click Finish and save the map."},{"details":"Switch to the message flow <b>AutoMappingExample2</b>. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>{<br>&nbsp;&nbsp;\\"courtesytitle\\": \\"Mr\\",<br>&nbsp;&nbsp;\\"firstname\\": \\"Joe\\",<br>&nbsp;&nbsp;\\"middlename\\": \\"Fred\\",<br>&nbsp;&nbsp;\\"lastname\\": \\"Bloggs\\",<br>&nbsp;&nbsp;\\"firstaddressline\\": \\"1 Normal Road\\",<br>&nbsp;&nbsp;\\"secondaddressline\\": \\"Average-ville\\",<br>&nbsp;&nbsp;\\"city\\": \\"Hursley\\",<br>&nbsp;&nbsp;\\"zipcode\\": \\"SO53 2JN\\",<br>&nbsp;&nbsp;\\"item-descr\\": \\"Laptop\\",<br>&nbsp;&nbsp;\\"item-quant\\": \\"1\\",<br>&nbsp;&nbsp;\\"item-price\\": \\"599.99\\"<br>}<br></code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The JSON will have been transformed into an XML message:<br><code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;out:OrderMessage xmlns:out=\\"http://www.example.org/Order\\"&gt;<br>&nbsp;&lt;out:Person&gt;<br>&nbsp;&nbsp;&lt;out:Title&gt;Mr&lt;/out:Title&gt;<br>&nbsp;&nbsp;&lt;out:Firstname&gt;Joe&lt;/out:Firstname&gt;<br>&nbsp;&nbsp;&lt;out:Middlename&gt;Fred&lt;/out:Middlename&gt;<br>&nbsp;&nbsp;&lt;out:Lastname&gt;Bloggs&lt;/out:Lastname&gt;<br>&nbsp;&lt;/out:Person&gt;<br>&nbsp;&lt;out:Address&gt;<br>&nbsp;&nbsp;&lt;out:FirstLine&gt;1 Normal Road&lt;/out:FirstLine&gt;<br>&nbsp;&nbsp;&lt;out:SecondLine&gt;Average-ville&lt;/out:SecondLine&gt;<br>&nbsp;&nbsp;&lt;out:City&gt;Hursley&lt;/out:City&gt;<br>&nbsp;&nbsp;&lt;out:Postcode>SO53 2JN&lt;/out:Postcode&gt;<br>&nbsp;&lt;/out:Address&gt;<br>&nbsp;&lt;out:Item&gt;<br>&nbsp;&nbsp;&lt;out:Description&gt;Laptop&lt;/out:Description&gt;<br>&nbsp;&nbsp;&lt;out:Quantity&gt;1&lt;/out:Quantity&gt;<br>&nbsp;&nbsp;&lt;out:Price&gt;599.99&lt;/out:Price&gt;<br>&nbsp;&lt;/out:Item&gt;<br>&lt;/out:OrderMessage&gt;</code>"}]}}]}}}}},"Routing - Using a Route node to route data in a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Routing - Using a Route node to route data in a message flow","shortDescription":"Learn how to use the Route node to route messages in a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Route node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to route messages using data from a message."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a Route node. The Route node is a message flow node which directs messages that meet certain criteria down different paths of a message flow, based on the evaluation of an XPath expression."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleRoutingRoute</span>."},{"section":"<span class=\'application\'>ExampleRoutingRoute</span> provides a single message flow named <span class=\'resource\'>RoutingRoute</span> which uses an HTTPInput node to receive a JSON input message, a Route node to route the message, several FileOutput nodes which write each input message to a specific file based upon the message content and an HTTPReply node."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileOutput nodes will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>RoutingRoute.bar</span> which you will find inside the <span class=\'application\'>ExampleRoutingRoute</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>RoutingRoute.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class=\'resource\'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessageJoeBloggs</span> contains this data:<br><span class=\'resource\'>{\\"FirstName\\":\\"Joe\\",\\"LastName\\":\\"Bloggs\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class=\'resource\'>InputMessageJoeBloggs</span> should be written into <span class=\'resource\'>CountryGB.json</span>"}]}}]}},{"section":"This tutorial has shown the Route node making message routing decisions."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Route node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac37370_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Routing - Using a RouteToLabel node to route data in a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Routing - Using a RouteToLabel node to route data in a message flow","shortDescription":"Learn how to use the RouteToLabel node to route messages in a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"RouteToLabel node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to route messages using data from a message."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a RouteToLabel node. A Mapping node configures the LocalEnvironment area of the logical message tree in order to drive a downstream RouteToLabel node to direct messages that meet certain criteria to a Label message flow node, also in the message flow."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleRoutingRouteToLabel</span>."},{"section":"<span class=\'application\'>ExampleRoutingRouteToLabel</span> provides a single message flow named <span class=\'resource\'>RoutingRouteToLabel</span> which uses an HTTPInput node to receive a JSON input message, a Mapping node and RouteToLabel nodes to route the message, several Label nodes each of which feeds a FileOutput node (configured to write to a specific file name) and an HTTPReply node."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileOutput nodes will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>RoutingRouteToLabel.bar</span> which you will find inside the <span class=\'application\'>ExampleRoutingRouteToLabel</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>RoutingRouteToLabel.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class=\'resource\'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessageJoeBloggs</span> contains this data:<br><span class=\'resource\'>{\\"FirstName\\":\\"Joe\\",\\"LastName\\":\\"Bloggs\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class=\'resource\'>InputMessageJoeBloggs</span> should be written into <span class=\'resource\'>CountryGB.json</span>"}]}}]}},{"section":"This tutorial has shown the combination of a Mapping node and a RouteToLabel node making message routing decisions."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"RouteToLabel node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04820_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Routing - Using a Filter node to route data in a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Routing - Using a Filter node to route data in a message flow","shortDescription":"Learn how to use the Filter node to route messages in a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Filter node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to route messages using data from a message."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a series of Filter nodes. Filter nodes use ESQL to interact with the logical message tree passing through the message flow, and through a RETURN statement direct the message to either the True output terminal or the False output terminal. The message flow in the tutorial uses several Filter nodes to route input messages into different categories."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleRoutingFilter</span>."},{"section":"<span class=\'application\'>ExampleRoutingFilter</span> provides a single message flow named <span class=\'resource\'>RoutingFilter</span> which uses an HTTPInput node to receive a JSON input message, then a Filter node to route it. Whichever direction is taken, a further Filter node directs the message down one of two alternate paths, each of which feeds a FileOutput node (configured to write to a specific file name). Finally an HTTPReply node replies to the initial HTTP request."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileOutput nodes will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>RoutingFilter.bar</span> which you will find inside the <span class=\'application\'>ExampleRoutingFilter</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>RoutingFilter.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class=\'resource\'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessageJoeBloggs</span> contains this data:<br><span class=\'resource\'>{\\"FirstName\\":\\"Joe\\",\\"LastName\\":\\"Bloggs\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class=\'resource\'>InputMessageJoeBloggs</span> should be written into <span class=\'resource\'>CountryGB.json</span>"}]}}]}},{"section":"This tutorial has shown the Filter node making message routing decisions."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Filter node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04780_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Routing - Using a Compute node to route data in a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Routing - Using a Compute node to route data in a message flow","shortDescription":"Learn how to use the Compute node to route messages in a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Compute node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to route messages using data from a message."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a Compute node. The Compute node uses ESQL to interact with the logical message tree passing through the message flow. The ESQL PROPAGATE statement can be used to direct messages that meet certain criteria to a Label message flow node, also in the message flow."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleRoutingCompute</span>."},{"section":"<span class=\'application\'>ExampleRoutingCompute</span> provides a single message flow named <span class=\'resource\'>RoutingCompute</span> which uses an HTTPInput node to receive a JSON input message, a Compute node to route the message, several Label nodes each of which feeds a FileOutput node (configured to write to a specific file name) and an HTTPReply node."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileOutput nodes will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>RoutingCompute.bar</span> which you will find inside the <span class=\'application\'>ExampleRoutingCompute</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>RoutingCompute.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class=\'resource\'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessageJoeBloggs</span> contains this data:<br><span class=\'resource\'>{\\"FirstName\\":\\"Joe\\",\\"LastName\\":\\"Bloggs\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class=\'resource\'>InputMessageJoeBloggs</span> should be written into <span class=\'resource\'>CountryGB.json</span>"}]}}]}},{"section":"This tutorial has shown the Compute node making message routing decisions."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Compute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04660_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Routing - Using a JavaCompute node to route data in a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Routing - Using a JavaCompute node to route data in a message flow","shortDescription":"Learn how to use the JavaCompute node to route messages in a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JavaCompute node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to route messages using data from a message."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a JavaCompute node. The JavaCompute node uses Java to interact with the logical message tree passing through the message flow, and can be used to direct messages that meet certain criteria either to the Output terminal or to the Alternate terminal."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleRoutingJCN</span>."},{"section":"<span class=\'application\'>ExampleRoutingJCN</span> provides a single message flow named <span class=\'resource\'>RoutingJCN</span> which uses an HTTPInput node to receive a JSON input message, a JavaCompute node to route the message, to one of two alternate FileOutput nodes (each configured to write to a specific file name) and an HTTPReply node."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."},{"section":"If you have a scenario which requires more than two alternate routing paths, you could use a Route node, or if you prefer to use a JavaCompute node you can achieve this by setting up the LocalEnvironment tree to control a downstream RouteToLabel node. The tutorial also provides commented out example java code for this kind approach as well."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileOutput nodes will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>RoutingJCN.bar</span> which you will find inside the <span class=\'application\'>ExampleRoutingJCN</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>RoutingJCN.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Two saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class=\'resource\'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessageJoeBloggs</span> contains this data:<br><span class=\'resource\'>{\\"FirstName\\":\\"Joe\\",\\"LastName\\":\\"Bloggs\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class=\'resource\'>InputMessageJoeBloggs</span> should be written into <span class=\'resource\'>CountryGB.json</span>"}]}}]}},{"section":"This tutorial has shown the JavaCompute node making message routing decisions."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"JavaCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20805_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Databases - Using a DatabaseRetrieve node to retrieve data from DB2 via JDBC":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Databases - Using a DatabaseRetrieve node to retrieve data from DB2 via JDBC","shortDescription":"Learn how to use the DatabaseRetrieve node to retrieve data from DB2 using a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"DatabaseRetrieve node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to retrieve data from a database."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to help construct the WHERE clause of a SELECT statement which is constructed by the DatabaseRetrieve node. The DatabaseRetrieve node is a message flow node which helps users simply choose which columns they would like to take data from, without needing to know detailed SQL syntax."},{"section":"The DatabaseRetrieve node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the DB2 database which is used by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleDatabaseRetrieve</span>, and the policy project named <span class=\'application\'>MyPolicies</span>."},{"section":"<span class=\'application\'>ExampleDatabaseRetrieve</span> provides a single message flow named <span class=\'resource\'>DatabaseRetrieveFlow</span> which uses an HTTPInput node to receive a JSON input message, a DatabaseRetrieve node to select the data from DB2, and an HTTPReply node."},{"section":"<span class=\'application\'>MyPolicies</span> contains a single policy named <span class=\'application\'>MyJDBCPolicy</span>. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class=\'cmdname\'>Name of the database = USERS</span></code><br><code><span class=\'cmdname\'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class=\'cmdname\'>Database server name = localhost</span></code><br><code><span class=\'cmdname\'>Database server port number = 50000</span></code><br><code><span class=\'cmdname\'>Type 4 driver class JARs URL = C:\\\\Program Files\\\\IBM\\\\SQLLIB\\\\java</span></code><br><code><span class=\'cmdname\'>Security identity (DSN) = mydbidentity</span></code><br><code><span class=\'cmdname\'>Supports XA coordinated transactions = false</span></code>"},{"section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the database, set up your credentials and deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:","steps":{"type":"ordered","details":[{"details":"Start a DB2 Command Window and execute the command:<br><code><span class=\'cmdname\'>db2 create database USERS</span></code>"},{"details":"Next we will connect to the database which was just created, create a table and then insert some sample data. From the same window, start an interactive command session by typing <code><span class=\'cmdname\'>db2</span></code> and then execute these commands:<br><code><span class=\'cmdname\'>CONNECT TO USERS</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (1, \'Ben\', \'Thompson\', \'GB\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (2, \'Joe\', \'Bloggs\', \'GB\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (3, \'Jan\', \'Modaal\', \'NL\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (4, \'Otto\', \'Normalverbraucher\', \'DE\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (5, \'John\', \'Doe\', \'US\')</span></code>"},{"details":"You can check the data has been successfully inserted by executing the command:<br><code><span class=\'cmdname\'>SELECT * FROM MYSCHEMA.EMPLOYEES</span></code>"}]}},{"section":"Create an integration node, set up your credentials and deploy by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class=\'cmdname\'>mqsistop TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code>"},{"details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>DatabaseRetrieve.bar</span> which you will find inside the <span class=\'application\'>ExampleDatabaseRetrieve</span> application. This BAR file includes the JDBC Provider policy and the application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>DatabaseRetrieve.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Two saved messages are provided, named <span class=\'resource\'>InputMessageGB</span>, and <span class=\'resource\'>InputMessageUS</span>. Each message provides a different value for an element in their JSON named <span class=\'resource\'>Country</span>. Select <span class=\'resource\'>InputMessageGB</span> and click Send and your message is sent to the HTTPInput node."},{"details":"InputMessageGB should return two matching records, and InputMessageUS should return one matching record. Here is the final output message for InputMessageGB:<br><span class=\'resource\'>{\\"Country\\":\\"GB\\",\\"Employee\\":{\\"PKEY\\":1, \\"FIRSTNAME\\":\\"Ben\\", \\"LASTNAME\\":\\"Thompson\\", \\"COUNTRY\\":\\"GB\\", \\"PKEY\\":2, \\"FIRSTNAME\\":\\"Joe\\", \\"LASTNAME\\":\\"Bloggs\\", \\"COUNTRY\\":\\"GB\\"}}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."},{"details":"When you click on the last connection in the flow, you should see the final output message structure carries return data which has been retrieved from the database."}]}}]}},{"section":"This tutorial has shown the DatabaseRetrieve node retrieving data from a DB2 database using JDBC."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"DatabaseRetrieve node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac37390_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Databases - Using a DatabaseRoute node to route messages based on data from DB2 via JDBC":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Databases - Using a DatabaseRoute node to route messages based on data from DB2 via JDBC","shortDescription":"Learn how to use the DatabaseRoute node to route messages based on data from DB2 using a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"DatabaseRoute node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to route messages using data from a database."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to help construct the WHERE clause of a SELECT statement which is constructed by the DatabaseRoute node. The DatabaseRoute node is a message flow node which helps users route messages based upon data in a database simply by choosing which columns they would like to use, without needing to know detailed SQL syntax."},{"section":"The DatabaseRoute node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the DB2 database which is used by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleDatabaseRoute</span>, and the policy project named <span class=\'application\'>MyPolicies</span>."},{"section":"<span class=\'application\'>ExampleDatabaseRoute</span> provides a single message flow named <span class=\'resource\'>DatabaseRouteFlow</span> which uses an HTTPInput node to receive a JSON input message, a DatabaseRoute node to communicate with DB2, several FileOutput nodes which write each input message to a specific file based upon the data retrieved from the database and an HTTPReply node."},{"section":"<span class=\'application\'>MyPolicies</span> contains a single policy named <span class=\'application\'>MyJDBCPolicy</span>. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class=\'cmdname\'>Name of the database = USERS</span></code><br><code><span class=\'cmdname\'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class=\'cmdname\'>Database server name = localhost</span></code><br><code><span class=\'cmdname\'>Database server port number = 50000</span></code><br><code><span class=\'cmdname\'>Type 4 driver class JARs URL = C:\\\\Program Files\\\\IBM\\\\SQLLIB\\\\java</span></code><br><code><span class=\'cmdname\'>Security identity (DSN) = mydbidentity</span></code><br><code><span class=\'cmdname\'>Supports XA coordinated transactions = false</span></code>"},{"section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the database, set up your credentials and deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:","steps":{"type":"ordered","details":[{"details":"Start a DB2 Command Window and execute the command:<br><code><span class=\'cmdname\'>db2 create database USERS</span></code>"},{"details":"Next we will connect to the database which was just created, create a table and then insert some sample data. From the same window, start an interactive command session by typing <code><span class=\'cmdname\'>db2</span></code> and then execute these commands:<br><code><span class=\'cmdname\'>CONNECT TO USERS</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (1, \'Ben\', \'Thompson\', \'GB\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (2, \'Joe\', \'Bloggs\', \'GB\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (3, \'Jan\', \'Modaal\', \'NL\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (4, \'Otto\', \'Normalverbraucher\', \'DE\')</span></code><br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (5, \'John\', \'Doe\', \'US\')</span></code>"},{"details":"You can check the data has been successfully inserted by executing the command:<br><code><span class=\'cmdname\'>SELECT * FROM MYSCHEMA.EMPLOYEES</span></code>"},{"details":"This tutorial also uses FileOutput nodes which will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."}]}},{"section":"Create an integration node, set up your credentials and deploy by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class=\'cmdname\'>mqsistop TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code>"},{"details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>DatabaseRoute.bar</span> which you will find inside the <span class=\'application\'>ExampleDatabaseRoute</span> application. This BAR file includes the JDBC Provider policy and the application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>DatabaseRoute.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Six saved messages are provided. Five of these messages carry data which have corresponding entries in the database you just created. One message deliberately does not match the database content, and is provided so you can experiment with the keyNotFound terminal of the DatabaseRoute node. Each message provides a JSON structure which carries the FirstName and LastName for a row in the database. Select <span class=\'resource\'>InputMessageBenThompson</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessageBenThompson</span> contains this data:<br><span class=\'resource\'>{\\"FirstName\\":\\"Ben\\",\\"LastName\\":\\"Thompson\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the COUNTRY column of the database record, the DatabaseRoute node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class=\'resource\'>InputMessageBenThompson</span> should be written into <span class=\'resource\'>CountryGB.json</span>"}]}}]}},{"section":"This tutorial has shown the DatabaseRoute node communicating with a DB2 database using JDBC in order to make message routing decisions."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"DatabaseRoute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac37380_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Databases - Using a Mapping node to insert data into a DB2 database via JDBC":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Databases - Using a Mapping node to insert data into a DB2 database via JDBC","shortDescription":"Learn how to use the Mapping node to insert data into DB2 using a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Mapping node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to insert data into a database."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The Mapping node can be used in conjunction with a JDBCProvider policy to establish a JDBC type 4 connection to the database. The Mapping node is a message flow node which helps users graphically choose how to insert data into the database, without needing to know detailed SQL syntax."},{"section":"The Mapping node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the DB2 database which is used by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleDatabaseMapping</span>, and the policy project named <span class=\'application\'>MyPolicies</span>."},{"section":"<span class=\'application\'>ExampleDatabaseMapping</span> provides a single message flow named <span class=\'resource\'>DatabaseMapping</span> which uses an HTTPInput node to receive a JSON input message, a Mapping node to insert the data into DB2 and manipulate the output message which is then sent to an HTTPReply node."},{"section":"<span class=\'application\'>MyPolicies</span> contains a single policy named <span class=\'application\'>USERS</span>. The name of this policy has been chosen to match the name of the physical data model file named USERS.dbm which is used by the Mapping node to describe the structure of the database table where data is being inserted. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class=\'cmdname\'>Name of the database = USERS</span></code><br><code><span class=\'cmdname\'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class=\'cmdname\'>Database server name = localhost</span></code><br><code><span class=\'cmdname\'>Database server port number = 50000</span></code><br><code><span class=\'cmdname\'>Type 4 driver class JARs URL = C:\\\\Program Files\\\\IBM\\\\SQLLIB\\\\java</span></code><br><code><span class=\'cmdname\'>Security identity (DSN) = mydbidentity</span></code><br><code><span class=\'cmdname\'>Supports XA coordinated transactions = false</span></code>"},{"section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the database, set up your credentials and deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:","steps":{"type":"ordered","details":[{"details":"Start a DB2 Command Window and execute the command:<br><code><span class=\'cmdname\'>db2 create database USERS</span></code>"},{"details":"Next we will connect to the database which was just created, and create a table into which the message flow will insert data. From the same window, start an interactive command session by typing <code><span class=\'cmdname\'>db2</span></code> and then execute these commands:<br><code><span class=\'cmdname\'>CONNECT TO USERS</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"}]}},{"section":"Create an integration node, set up your credentials, define a default policy project and then deploy by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class=\'cmdname\'>mqsistop TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code>"},{"details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."},{"details":"When using the mapping node with a database, the JDBCProvider policy is located by App Connect Enterprise runtime based upon the name of the physical data model file (in our example named <span class=\'resource\'>USERS.dbm</span>) which is used by the Mapping node to describe the structure of the database table where data is being inserted. This policy (in our example named <span class=\'resource\'>USERS.policyxml</span>) must be placed into the default policy project, so that it can be found by the runtime. The default policy project which the runtime will use is defined in the server.conf.yaml file. If you are on Windows using the default workpath location, using an integration node called TESTNODE which owns an integration server called server, then you will find this file at the location <span class=\'resource\'>C:\\\\ProgramData\\\\IBM\\\\MQSI\\\\components\\\\TESTNODE\\\\servers\\\\server\\\\server.conf.yaml</span>"},{"details":"Search in the file for the text <code>#policyProject: \'DefaultPolicies\'</code> and replace this text with <code>policyProject: \'MyPolicies\'</code>. <span class=\'resource\'>Remember to remove the hash symbol at the start of this line!</span> Having made this change, the line should look like this:<br><code>  policyProject: \'MyPolicies\'   # Name of the Policy project that will be used for unqualified Policy references, default is \'DefaultPolicies\'</code>"},{"details":"<span class=\'resource\'>Remember to save</span> the updated server.conf.yaml file and then restart your integration node."},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>DatabaseMapping.bar</span> which you will find inside the <span class=\'application\'>ExampleDatabaseRetrieve</span> application. This BAR file includes the JDBC Provider policy and the application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>DatabaseMapping.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class=\'resource\'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage1</span> contains this data:<br><span class=\'resource\'>{\\"PrimaryKey\\": 1,\\"FirstName\\":\\"Ben\\",\\"LastName\\":\\"Thompson\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."}]}}]}},{"section":"This tutorial has shown the Mapping node communicating with a DB2 database using JDBC in order to insert data."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Modifying data in a database using Mapping","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/cm28831_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Databases - Using a JavaCompute node to insert data into a DB2 database via JDBC":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Databases - Using a JavaCompute node to insert data into a DB2 database via JDBC","shortDescription":"Learn how to use the JavaCompute node to insert data into DB2 using a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JavaCompute node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to insert data into a database."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The JavaCompute node can be used in conjunction with a JDBCProvider policy to establish a JDBC type 4 connection to the database by using the getJDBCType4Connection call on the MbNode interface."},{"section":"The JavaCompute node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the empty DB2 database which is then used by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Interacting with databases by using the JavaCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30494_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleDatabaseJCN</span>, and the policy project named <span class=\'application\'>MyPolicies</span>."},{"section":"<span class=\'application\'>ExampleDatabaseJCN</span> provides a single message flow named <span class=\'resource\'>DatabaseJCN</span> which uses an HTTPInput node to receive a JSON input message, a JavaCompute node to communicate with DB2, and an HTTPReply node."},{"section":"<span class=\'application\'>MyPolicies</span> contains a single policy named <span class=\'application\'>MyJDBCPolicy</span>. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class=\'cmdname\'>Name of the database = USERS</span></code><br><code><span class=\'cmdname\'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class=\'cmdname\'>Database server name = localhost</span></code><br><code><span class=\'cmdname\'>Database server port number = 50000</span></code><br><code><span class=\'cmdname\'>Type 4 driver class JARs URL = C:\\\\Program Files\\\\IBM\\\\SQLLIB\\\\java</span></code><br><code><span class=\'cmdname\'>Security identity (DSN) = mydbidentity</span></code><br><code><span class=\'cmdname\'>Supports XA coordinated transactions = false</span></code>"},{"section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the database, set up your credentials and deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:","steps":{"type":"ordered","details":[{"details":"Start a DB2 Command Window and execute the command:<br><code><span class=\'cmdname\'>db2 create database USERS</span></code>"},{"details":"Next we will connect to the database which was just created and create a table. From the same window, start an interactive command session by typing <code><span class=\'cmdname\'>db2</span></code> and then execute these commands:<br><code><span class=\'cmdname\'>CONNECT TO USERS</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"}]}},{"section":"Create an integration node, set up your credentials and deploy by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class=\'cmdname\'>mqsistop TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code>"},{"details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>DatabaseJCN.bar</span> which you will find inside the <span class=\'application\'>ExampleDatabaseJCN</span> application. This BAR file includes the JDBC Provider policy and the application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>DatabaseJCN.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class=\'resource\'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage1</span> contains this data:<br><span class=\'resource\'>{\\"PrimaryKey\\": 1,\\"FirstName\\":\\"Ben\\",\\"LastName\\":\\"Thompson\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."}]}}]}},{"section":"This tutorial has shown the JavaCompute node communicating with a DB2 database using JDBC in order to insert data."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Interacting with databases by using the JavaCompute node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac30494_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Databases - Using a Compute node to insert data into a DB2 database via ODBC":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Databases - Using a Compute node to insert data into a DB2 database via ODBC","shortDescription":"Learn how to use Compute node ESQL to insert data into DB2 using a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Knowledge Center","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Compute node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to insert data into a database."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The Compute node\'s ESQL dcommunicates with the database through an ODBC connection which is configured as part of the tutorial."},{"section":"The tutorial requires an integration node owned server, or a standalone server. In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. The instructions also describe how to create the empty DB2 database which is then used by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Interaction with databases using ESQL","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ak05800_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleDatabaseCompute</span>."},{"section":"<span class=\'application\'>ExampleDatabaseCompute</span> provides a single message flow named <span class=\'resource\'>DatabaseCompute</span> which uses an HTTPInput node to receive a JSON input message, a Compute node to communicate with DB2, and an HTTPReply node."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. The project will be deployed to the integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the database, set up your credentials and deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flow will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:","steps":{"type":"ordered","details":[{"details":"Start a DB2 Command Window and execute the command:<br><code><span class=\'cmdname\'>db2 create database USERS</span></code>"},{"details":"Next we will connect to the database which was just created and create a table. From the same window, start an interactive command session by typing <code><span class=\'cmdname\'>db2</span></code> and then execute these commands:<br><code><span class=\'cmdname\'>CONNECT TO USERS</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"}]}},{"section":"Set up an ODBC connection in the operating system:","steps":{"type":"ordered","details":[{"details":"This tutorial assumes you are using Windows, but if this is not the case, full instructions are provided for configuring ODBC in the Knowledge Center links at the base of this section. On Windows, open the <span class=\'resource\'>ODBC Data Source Administrator (64-bit)</span>, switch to the <span class=\'resource\'>System DSN</span> tab, click the Add button, and select a driver for your database."},{"details":"Using DB2 in a default set-up, you should find an entry in the list labelled <span class=\'resource\'>IBM DB2 ODBC Driver - DB2COPY1</span>. Select this entry and click Finish."},{"details":"In the resulting Add dialog, set the <span class=\'resource\'>Data source name = USERS</span>, leave the <span class=\'resource\'>Database alias = USERS</span> and click OK. You will be returned to the <span class=\'resource\'>ODBC Data Source Administrator (64-bit)</span> window and you should clikc OK again to close this window too."}]}},{"section":"Create an integration node, set up your credentials and deploy by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class=\'cmdname\'>mqsistop TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsisetdbparms TESTNODE -n odbc::USERS -u db2admin -p pass123</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code>"},{"details":"The above mqsisetdbparms command configures the runtime with the required credentials to access the USERS database."},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>DatabaseCompute.bar</span> which you will find inside the <span class=\'application\'>ExampleDatabaseCompute</span> application."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Enabling ODBC Connections to the databases","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ah14440_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>DatabaseCompute.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class=\'resource\'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage1</span> contains this data:<br><span class=\'resource\'>{\\"PrimaryKey\\": 1,\\"FirstName\\":\\"Ben\\",\\"LastName\\":\\"Thompson\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."}]}}]}},{"section":"This tutorial has shown the Compute node using ESQL to communicate with a DB2 database using ODBC in order to insert data."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Interaction with databases using ESQL","link":"com.ibm.etools.mft.doc/ak05800_.htm"},{"title":"Knowledge Center link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Databases - Using a Database node to insert data into a DB2 database via ODBC":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Databases - Using a Database node to insert data into a DB2 database via ODBC","shortDescription":"Learn how to use Database node ESQL to insert data into DB2 using a message flow driven by a JSON message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Database node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to insert data into a database."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The Database node\'s ESQL communicates with the database through an ODBC connection which is configured as part of the tutorial."},{"section":"The tutorial requires an integration node owned server, or a standalone server. In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. The instructions also describe how to create the empty DB2 database which is then used by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Interaction with databases using ESQL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ak05800_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleDatabase</span>."},{"section":"<span class=\'application\'>ExampleDatabase</span> provides a single message flow named <span class=\'resource\'>Database</span> which uses an HTTPInput node to receive a JSON input message, a Database node to communicate with DB2, and an HTTPReply node."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. The project will be deployed to the integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the database, set up your credentials and deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flow will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:","steps":{"type":"ordered","details":[{"details":"Start a DB2 Command Window and execute the command:<br><code><span class=\'cmdname\'>db2 create database USERS</span></code>"},{"details":"Next we will connect to the database which was just created and create a table. From the same window, start an interactive command session by typing <code><span class=\'cmdname\'>db2</span></code> and then execute these commands:<br><code><span class=\'cmdname\'>CONNECT TO USERS</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"}]}},{"section":"Set up an ODBC connection in the operating system:","steps":{"type":"ordered","details":[{"details":"This tutorial assumes you are using Windows, but if this is not the case, full instructions are provided for configuring ODBC in the Knowledge Center links at the base of this section. On Windows, open the <span class=\'resource\'>ODBC Data Source Administrator (64-bit)</span>, switch to the <span class=\'resource\'>System DSN</span> tab, click the Add button, and select a driver for your database."},{"details":"Using DB2 in a default set-up, you should find an entry in the list labelled <span class=\'resource\'>IBM DB2 ODBC Driver - DB2COPY1</span>. Select this entry and click Finish."},{"details":"In the resulting Add dialog, set the <span class=\'resource\'>Data source name = USERS</span>, leave the <span class=\'resource\'>Database alias = USERS</span> and click OK. You will be returned to the <span class=\'resource\'>ODBC Data Source Administrator (64-bit)</span> window and you should clikc OK again to close this window too."}]}},{"section":"Create an integration node, set up your credentials and deploy by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class=\'cmdname\'>mqsistop TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsisetdbparms TESTNODE -n odbc::USERS -u db2admin -p pass123</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code>"},{"details":"The above mqsisetdbparms command configures the runtime with the required credentials to access the USERS database."},{"details":"Drag and drop deploy the provided BAR file named <span class=\'application\'>Database.bar</span> which you will find inside the <span class=\'application\'>ExampleDatabase</span> application."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Enabling ODBC Connections to the databases","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ah14440_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Database.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class=\'resource\'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."},{"details":"<span class=\'resource\'>InputMessage1</span> contains this data:<br><span class=\'resource\'>{\\"PrimaryKey\\": 1,\\"FirstName\\":\\"Ben\\",\\"LastName\\":\\"Thompson\\",\\"Country\\":\\"GB\\"}</span>"},{"details":"The Database node interacts with the database but does not impact the format of the message passing through the flow. For this reason, you will find the same JSON has been returned to the test client from the HTTPReply node."},{"details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."}]}}]}},{"section":"This tutorial has shown the Database node using ESQL to communicate with a DB2 database using ODBC in order to insert data."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Interaction with databases using ESQL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ak05800_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Databases - Using a DatabaseInput node to trigger a flow on insert into DB2 via ODBC":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Databases - Using a DatabaseInput node to trigger a flow on insert into DB2 via ODBC","shortDescription":"Learn how to use a DatabaseInput node to trigger a flow when data is inserted into DB2.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Knowledge Center","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"DatabaseInput node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to trigger flows when data is inserted into a database."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that is driven by a DatabaseInput node which is triggered when a new row is inserted into a DB2 database table. The DatabaseInput node communicates with the database through an ODBC connection which is configured as part of this tutorial."},{"section":"The tutorial requires an integration node owned server, or a standalone server. In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. The instructions also describe how to create the DB2 database which is used by the scenario. This includes two database tables (an Application table named EMPLOYEES and an Event table named EVENTS) and a Database Trigger."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Interaction with databases using ESQL","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ak05800_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleDatabaseInput</span> and a data design project named <span class=\'application\'>ExampleDataDesign</span>."},{"section":"<span class=\'application\'>ExampleDatabaseInput</span> provides a single message flow named <span class=\'resource\'>DatabaseInput</span> which uses a DatabaseInput node which is triggered when a new row is created in a nominated Event table. The Event table row is created by a DB2 Trigger, whenever a new row is inserted into an Application table. Once the message flow is triggered it will simply propagate data to a FileOutput node which is configured to write a simple JSON message to the file system."},{"section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. The projects will be deployed to the integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database tables and trigger, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the database, set up your credentials, create the output directory and deploy","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flow will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:","steps":{"type":"ordered","details":[{"details":"Start a DB2 Command Window and execute the command:<br><code><span class=\'cmdname\'>db2 create database USERS</span></code>"},{"details":"Next we will connect to the database which was just created and create two tables and a trigger. From the same window, start an interactive command session by typing <code><span class=\'cmdname\'>db2</span></code> and then execute these commands:<br><code><span class=\'cmdname\'>CONNECT TO USERS</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code><br><code><span class=\'cmdname\'>CREATE TABLE MYSCHEMA.EVENTS (EVENT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 NO CYCLE NO CACHE), OBJECT_KEY INTEGER NOT NULL, OBJECT_VERB VARCHAR(6), OBJECT_NAME VARCHAR(20), EVENT_PRIORITY INTEGER, EVENT_TIME TIMESTAMP, EVENT_STATUS INTEGER, PRIMARY KEY(EVENT_ID))</span></code><br><code><span class=\'cmdname\'>CREATE TRIGGER MYSCHEMA.EMPLOYEES_TRIGGER AFTER INSERT ON MYSCHEMA.EMPLOYEES REFERENCING NEW AS N FOR EACH ROW INSERT INTO MYSCHEMA.EVENTS (OBJECT_KEY, OBJECT_VERB, OBJECT_NAME, EVENT_PRIORITY, EVENT_TIME, EVENT_STATUS) VALUES (N.PKEY,\'CREATE\',\'EMPLOYEE\',1,CURRENT_TIMESTAMP,0)</span></code>"}]}},{"section":"Set up an ODBC connection in the operating system:","steps":{"type":"ordered","details":[{"details":"This tutorial assumes you are using Windows, but if this is not the case, full instructions are provided for configuring ODBC in the Knowledge Center links at the base of this section. On Windows, open the <span class=\'resource\'>ODBC Data Source Administrator (64-bit)</span>, switch to the <span class=\'resource\'>System DSN</span> tab, click the Add button, and select a driver for your database."},{"details":"Using DB2 in a default set-up, you should find an entry in the list labelled <span class=\'resource\'>IBM DB2 ODBC Driver - DB2COPY1</span>. Select this entry and click Finish."},{"details":"In the resulting Add dialog, set the <span class=\'resource\'>Data source name = USERS</span>, leave the <span class=\'resource\'>Database alias = USERS</span> and click OK. You will be returned to the <span class=\'resource\'>ODBC Data Source Administrator (64-bit)</span> window and you should clikc OK again to close this window too."}]}},{"section":"Create an integration node, and set up your credentials by completing the following steps:","steps":{"type":"ordered","details":[{"details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class=\'cmdname\'>mqsistop TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsisetdbparms TESTNODE -n odbc::USERS -u db2admin -p pass123</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code>"},{"details":"The above mqsisetdbparms command configures the runtime with the required credentials to access the USERS database."}]}},{"section":"Create the required output directory on your file system and then deploy:","steps":{"type":"ordered","details":[{"details":"The message flow assumes a Windows runtime platform will be used and will attempt to write an output file to the directory <code>C:\\\\temp</code>. If you are using Linux, change the <span class=\'application\'>Directory</span> property on the <span class=\'application\'>Basic</span> tab of the <span class=\'application\'>FileOutput</span> node in the message flow <span class=\'application\'>DatabaseInput</span>"},{"details":"If you have changed the flow to use a different directory then rebuild the provided BAR file named <span class=\'application\'>DatabaseInput.bar</span> which you will find inside the <span class=\'application\'>ExampleDatabaseInput</span> application. Drag and drop deploy the BAR file on to your integration server."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Enabling ODBC Connections to the databases","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ah14440_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>DatabaseInput.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Return to your DB2 Command Window and make an insert into the EMPLOYEES table using this command:<br><code><span class=\'cmdname\'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (1, \'Ben\', \'Thompson\', \'GB\')</span></code>"},{"details":"Click the View Path icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png\' alt=\'\' /> to show the path taken through the message flow. This should show a blue line highlighting that the DatabaseInput node propagated data to the FileOutput node."},{"details":"Check the output directory <span class=\'resource\'>C:\\\\temp</span> and you should find an output file named <span class=\'resource\'>Output.xml</span> has been created which contains this data:<br><span class=\'resource\'>&lt;NS1:EMPLOYEES xmlns:NS1=\\"http://users/myschema\\"&gt;&lt;PKEY&gt;1&lt;/PKEY&gt;&lt;FIRSTNAME&gt;Ben&lt;/FIRSTNAME&gt;&lt;LASTNAME&gt;Thompson&lt;/LASTNAME&gt;&lt;COUNTRY&gt;GB&lt;/COUNTRY&gt;&lt;/NS1:EMPLOYEES&gt;</span>"},{"details":"You may wish to explore the row entry which has been left in the EVENTS table. Once an event record has been processed, its EVENT_STATUS column will be updated from the value 0 to the value 1. "}]}}]}},{"section":"This tutorial has shown the DatabaseInput node which communicates with a DB2 database using ODBC in order to be triggered when data is inserted."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Configuring a DatabaseInput node","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc34042_.htm","type":"web"},{"title":"Knowledge Center link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"MQ - Using the MQInput, MQGet and MQOutput nodes with messages and queues":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"MQ - Using the MQInput, MQGet and MQOutput nodes with messages and queues","shortDescription":"Learn how to use the MQInput, MQGet and MQOutput nodes to interact with queues defined on a local queue manager.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"MQInput node"},{"title":"MQOutput node"},{"title":"MQGet node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to interact with queues defined on a local queue manager."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates two simple message flows. The first is driven from an input XML file which contains data representing three famous couples (Romeo and Juliet, Lennon and McCartney, Laurel and Hardy). After this data is read by a FileInput node, a Compute node iterates over the data and divides each pair. MQOutput nodes send separate messages with the name of one person to one queue and the name of the other person to a second queue. Both MQ messages are given the same MsgId in their MQMD header. A second message flow is driven by an MQInput node reading one of these messages from its queue. Next an MQGet node uses the MsgId to read in the second message. Finally a downstream Trace node writes out a trace file containing both pieces of data reunited together."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses MQ nodes which are configured to interact with a local queue manager. The flows expect to be deployed to an integration node associated with a local queue manager. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, a project will be created in your workspace: An application named <span class=\'application\'>ExampleMQ</span>."},{"section":"<span class=\'application\'>ExampleMQ</span> provides two message flows named <span class=\'resource\'>MQOutput</span> and <span class=\'resource\'>MQInput_MQGet</span>."},{"section":"The <span class=\'resource\'>MQOutput</span> message flow is driven by a FileInput node configured to receive an XML input message containing three famous couples (Romeo and Juliet, Lennon and McCartney, Laurel and Hardy). The FileInput is wired to a Compute node which loops over the data, dividing each pair. MQOutput nodes send separate messages (but both given the same MsgId) with the name of one person to QUEUE1 and the name of the other person to QUEUE2"},{"section":"The <span class=\'resource\'>MQInput_MQGet</span> message flow uses an MQInput node to read a message from QUEUE1. Next, an MQGet node reads the associated message (using the matching MsgId) from QUEUE2. Finally a Trace node records the re-unified information from the message pair to a local file."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExampleMQ</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flows","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The tutorial includes a Trace node which uses a trace directory. The tutorial also requires MQ definitions for two queues.  Execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"The message flow\'s Trace node will attempt to write a trace file to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment. The tutorial scenario also uses a FileInput node which is configured to read from this directory, so if you choose an alternative you will also need to modify this part of the flow."},{"details":"Create an IBM MQ queue manager and configure it by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'>TESTQM</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'>TESTQM</span></code>"},{"details":"Next create the two queues by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>define ql(QUEUE1)</code><br><code>define ql(QUEUE2)</code>"}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>TESTQM</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>ExampleMQ.bar</span> which you will find inside the <span class=\'application\'>ExampleMQ</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>MQOutput.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Copy the input file named <span class=\'resource\'>input.xml</span> to the input directory which is being monitored by the FileInput node deployed as part of message flow <span class=\'resource\'>MQOutput</span>, which by default is <span class=\'resource\'>C:\\\\temp</span>."},{"details":"Click the View Path icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png\' alt=\'\' /> and a blue line is plotted showing the path travelled by the message through the flow. You can click on the wires between nodes to view what the message data looked like at different points in the flow."},{"details":"To inspect the result of the second message flow <span class=\'resource\'>MQInput_MQGet.msgflow</span>, using a text editor open the trace file <span class=\'resource\'>C:\\\\temp\\\\TraceMQInput_MQGet.txt</span>, which should contain three entries with correctly re-paired data like this:<br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.080488</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  \'Romeo\' and \'Juliet\'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.082225</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  \'Lennon\' and \'McCartney\'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.083049</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  \'Laurel\' and \'Hardy\'</code><br><code>================================================================================</code>"}]}}]}},{"section":"This tutorial has shown how to use the MQInput, MQGet and MQOutput nodes to interact with queues defined on a local queue manager."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"MQInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04560_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"MQOutput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04570_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"MQGet node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20806_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"MQ - Using the LocalEnvironment and MQEndpoint Policy to override MQOutput configuration":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"MQ - Using the LocalEnvironment and MQEndpoint Policy to override MQOutput configuration","shortDescription":"Learn how to use the LocalEnvironment tree to dynamically configure the output queue written to by the MQOutput node and how to use an MQEndpoint Policy to override its queue manager connection.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"MQOutput node"},{"title":"MQEndpoint Policy"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to dynamically configure message flow settings when interacting with MQ."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow which is driven from a JSON input over HTTP. After receiving the message using an HTTPInput node, the same message is echoed back using an HTTPReply node. The HTTPInput node also drives an HTTPHeader node which removes the HTTP Input header. Next, a Mapping node sets the name of the output queue into the LocalEnvironment tree to dynamically control the MQOutput node later in the message flow. Before reaching the MQOutput node, an MQHeader node adds an MQMD header on to the message ready for output."},{"section":"The flow is configured to communicate with a local queue manager. The flow itself does not include configuration for the name of the queue manager. This is determined by the queue manager which is associated with the integration node where you deploy the flow (or associated with a standalone integration server if you choose to deploy it to this kind of environment)."},{"section":"The tutorial also provides an MQEndpoint Policy in a Policy Project which is used to specify the connection information to another queue manager. After testing the initial flow, the tutorial redeploys the flow using a BAR file which contains an override setting which associates the flow with the MQEndpoint Policy."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses an MQOutput node which is configured to interact with a local queue manager. The flows expect to be deployed to an integration node associated with a local queue manager. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleMQOutput</span> and a policy project named <span class=\'application\'>MyExamplePolicies</span>."},{"section":"<span class=\'application\'>ExampleMQOutput</span> provides a single message flow named <span class=\'resource\'>MQOutput</span>. The <span class=\'resource\'>MQOutput</span> message flow is driven by an HTTPInput node configured to receive a simple JSON input message. The HTTPInput echoes the message to an HTTPReply, but also drives an HTTPHeader node to remove the HTTP Input header and then invoke a Mapping node. The Mapping node configures the LocalEnvironment tree at <code>LocalEnvironment.Destination.MQ.DestinationData.queueName</code> with the name of a desired output queue. After an MQHeader node, which creates the MQMD header, an MQOutput node is configured to distribute the message based upon the queue name in the LocalEnvironment, courtesy of the setting on the <span class=\'resource\'>Advanced</span> tab which specifies <code>Destination Mode = Destination List</code>. Note that on the <span class=\'resource\'>Basic</span> tab the property <code>Queue name = NOT_USED</code> will be ignored because of the other property settings just discussed."},{"section":"The Policy Project <span class=\'application\'>MyExamplePolicies</span> provides a single policy named <span class=\'resource\'>MyMQPolicy.policyxml</span> which is configured with a different queue manager: <code>Queue manager name = TESTQM2</code>. This policy is used by the second part of the tutorial where the flow settings are overidden using a second BAR file which also carries this policy project."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExampleMQOutput</span> is ready to be deployed and tested. To deploy, two separate BAR files are provided: <span class=\'resource\'>MQOutputDeploy1.bar</span> and <span class=\'resource\'>MQOutputDeploy2.bar</span>. When to use each of these BAR files, is described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare two queue managers and an integration node, and then deploy the message flows","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The tutorial requires two MQ queue managers, each with the definition of a queue named OUTPUT.  Execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"Create an IBM MQ queue manager and configure it by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'>TESTQM</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'>TESTQM</span></code>"},{"details":"Next create a queue by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>define ql(OUTPUT)</code>"},{"details":"Create and start a second queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'>TESTQM2</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'>TESTQM2</span></code>"},{"details":"Create a queue of the same name on this second queue manager by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM2</span></code><br><code>define ql(OUTPUT)</code>"}]}},{"details":"Create an integration node which is associated with the first queue manager you created above by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>TESTQM</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>MQOutputDeploy1.bar</span> which you will find inside the <span class=\'application\'>ExampleMQOutput</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>MQOutput.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved input message is provided named <span class=\'resource\'>InputMessage</span> which contains this data:<br><span class=\'resource\'>{\\"Message\\":\\"Hello World\\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. Close the dialog and a blue line is shown plotting the path of the message. You can click on the wires to inspect what the message looked like as it travelled through the flow. When you are finished return the flow to edit mode."},{"details":"The MQOutput node should have written a message to the queue OUTPUT on queue manager TESTQM.  You can check the queue depth using these commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>dis ql(OUTPUT) CURDEPTH</code><br>You can also read the message from the queue like this:<br><code>amqsget OUTPUT TESTQM</code><br><code>Sample AMQSGET0 start</code><br><code>message &lt;{\\"Message\\":\\"Hello World\\"}&gt;</code>"},{"details":"Back in the Toolkit, we will now use another method of overriding configuration. Look inside the <span class=\'application\'>ExampleMQOutput</span> application to locate a second provided BAR file named <span class=\'application\'>MQOutputDeploy2.bar</span>. Open the BAR file, and look at the Manage tab. You will see it contains both the <span class=\'application\'>ExampleMQOutput</span> application and also a policy named <span class=\'application\'>MyMQPolicy</span>. Expand the application and message flow:  <span class=\'application\'>ExampleMQOutput / MQOutput.msgflow / MQOutput</span>. With the message flow node named <span class=\'application\'>MQOutput</span> selected, look at the properties and you should see that the Policy property has been overriden."},{"details":"Drag and drop deploy <span class=\'application\'>MQOutputDeploy2.bar</span>. As discussed above, in this BAR file the message flow\'s MQOutput node has an override property which has been set: <code>Policy = {MyExamplePolicies}:MyMQPolicy</code>  (IMPORTANT WARNING! Be careful not to accidentally remove this override if you choose to rebuild the BAR file!)"},{"details":"Repeat the same test, and you should find that this time, the message is written to the queue OUTPUT on queue manager TESTQM2 instead of queue manager TESTQM."}]}}]}},{"section":"This tutorial has shown how to use the LocalEnvironment tree to dynamically configure the output queue written to by the MQOutput node and also how to use an MQEndpoint Policy to override its queue manager connection."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"MQOutput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04570_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"MQ - Using the Publication node to publish messages on a topic":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"MQ - Using the Publication node to publish messages on a topic","shortDescription":"Learn how to use the Publication node to publish messages on an MQ topic defined on a local queue manager.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Publication node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to publish messages on an MQ topic defined on a local queue manager."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that is driven from a JSON input message over HTTP. An HTTPInput node receives the message and passes it unchanged to an HTTPReply node which echoes the same message back to the Requestor. The HTTPInput node also drives an HTTP Header node which deletes the HTTP input header, before invoking a Mapping node whose role is to set a message topic in the logical tree. Finally, a Publication node publishes to the defined MQ topic. A second message flow is provided which receives messages from three separate input queues, each of which receive messages courtesy of MQ subscriptions to the same topic used by the publication flow."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses the Publication node which requires your integration node or server to be associated with a local queue manager, so an MQ installation is required. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, a project will be created in your workspace: An application named <span class=\'application\'>ExamplePublication</span>."},{"section":"<span class=\'application\'>ExamplePublication</span> provides two message flows named <span class=\'resource\'>Publication</span> and <span class=\'resource\'>Subscription</span>."},{"section":"The <span class=\'resource\'>Publication</span> message flow is driven by an HTTPInput nodes configured to receive a JSON input message. The HTTPInput is wired to an HTTPHeader node which deletes the input HTTP header and then drives a Mapping node to set the Topic name in the logical tree. The last node in the flow is the Publication node which publishes the message on the MQ topic."},{"section":"The <span class=\'resource\'>Subscription</span> message flow contains three separate MQInput nodes which each read from separate queues. Each MQInput is wired to the same Trace node which records information from the message to a local file."},{"section":"Once imported using the link on the right, the application <span class=\'application\'>ExamplePublication</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flows","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The tutorial includes a Trace node which uses a trace directory. The tutorial also requires MQ definitions for three queues and three subscriptions.  Execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"The message flow\'s Trace node will attempt to write a trace file to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."},{"details":"Create an IBM MQ queue manager and configure it by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'>TESTQM</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'>TESTQM</span></code>"},{"details":"Next create the three queues and three subscriptions by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>define ql(SUBQ1)</code><br><code>define ql(SUBQ2)</code><br><code>define ql(SUBQ3)</code><br><code>define sub(SUB1) TOPICSTR(EXAMPLE_TOPIC) DEST(SUBQ1)</code><br><code>define sub(SUB2) TOPICSTR(EXAMPLE_TOPIC) DEST(SUBQ2)</code><br><code>define sub(SUB3) TOPICSTR(EXAMPLE_TOPIC) DEST(SUBQ3)</code>"}]}},{"details":"Create an integration node which is associated with the above queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span> -q <span class=\'varname\'>TESTQM</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>PublishSubscribe.bar</span> which you will find inside the <span class=\'application\'>ExamplePublication</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Publication.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved input message is provided named <span class=\'resource\'>InputMessage</span> which contains this data:<br><span class=\'resource\'>{\\"Message\\":\\"Hello World\\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The same data should be echoed in the response. Close the dialog and a blue line is shown plotting the full path of the message through the flow."},{"details":"Using a text editor open the trace file <span class=\'resource\'>C:\\\\temp\\\\TracePublication.txt</span>, which should contain three entries, one for each of the paths in the Subscription flow:<br><code>================================================================================</code><br><code>A message arrived at the Trace node at 2019-08-12 21:53:11.597892</code><br><code>The flow propagation arrived through input queue \'SUBQ3\'</code><br><code>The received message contained this data: \'Hello World\'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>A message arrived at the Trace node at 2019-08-12 21:53:11.597892</code><br><code>The flow propagation arrived through input queue \'SUBQ2\'</code><br><code>The received message contained this data: \'Hello World\'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>A message arrived at the Trace node at 2019-08-12 21:53:11.597892</code><br><code>The flow propagation arrived through input queue \'SUBQ1\'</code><br><code>The received message contained this data: \'Hello World\'</code><br><code>================================================================================</code>"}]}}]}},{"section":"This tutorial has shown the Publication node publishing messages on an MQ topic defined on a local queue manager."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Publication node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac04590_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"JMS - Using the JMSOutput and JMSInput nodes with messages and queues":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JMS - Using the JMSOutput and JMSInput nodes with messages and queues","shortDescription":"Learn how to use the JMSOutput and JMSInput nodes to interact with queues defined on an IBM MQ queue manager.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JMSOutput node"},{"title":"JMSInput node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to interact with IBM MQ using JMS configuration."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates two simple message flows. The first is driven using an input message over HTTP which is echoed back to the requestor unchanged, and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node adds a JMS header, and then a Mapping node prepares a fixed string of data in the message body. The message is passed to a JMSOutput node and written to a JMS destination queue. The second message flow starts from a JMSInput message which reads the output message from the JMS destination which was produced by the first message flow. The JMSInput is wired to a trace node which records the output in a trace file."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses JMS nodes which are configured to interact with an IBM MQ queue manager, but which could easily be substituted for another JMS provider if you wish. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleJMSOutput</span> and an application named <span class=\'application\'>ExampleJMSInput</span>."},{"section":"<span class=\'application\'>ExampleJMSOutput</span> provides a message flow named <span class=\'resource\'>JMSOutput</span>."},{"section":"<span class=\'application\'>ExampleJMSInput</span> provides a message flow named <span class=\'resource\'>JMSInput</span>."},{"section":"The <span class=\'resource\'>JMSOutput</span> message flow is driven by an HTTPInput node configured to receive any input message as BLOB. The message is echoed back using an HTTPReply node and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node creates a new JMS header, followed by a Mapping node which creates a new message body which is hardcoded to the value <code>This hardcoded data will be written to and read from the JMS queue</code>. Finally a JMSOutput node puts the message on to a JMS destination queue with the name jmsexample."},{"section":"The <span class=\'resource\'>JMSInput</span> message flow uses a JMSInput node to read a message from the output queue of the first flow - jmsexample. The JMSInput node passes the message to a Trace node which records data to a local file."},{"section":"Once imported using the link on the right, the applications <span class=\'application\'>ExampleJMSOutput</span> and <span class=\'application\'>ExampleJMSInput</span> are ready to be deployed and tested. To deploy, you can use the provided BAR files, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare a trace directory, create a queue manager and integration node, set up the JMS configuration, and then deploy the message flows","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The tutorial includes a Trace node which uses a trace directory. The tutorial also requires MQ and JMS definitions.  Execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"The message flow\'s Trace node will attempt to write a trace file to the directory <code><span class=\'cmdname\'>C:\\\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."},{"details":"Create an IBM MQ queue manager and configure it by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'>TESTQM</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'>TESTQM</span></code>"},{"details":"Next create a queue and a listener by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>define ql(EXAMPLE)</code><br><code>define listener(LISTENER1) TRPTYPE(TCP) PORT(2414)</code><br><code>start listener(LISTENER1)</code>"},{"details":"The connection to the queue manager will attempt to use the default server connection channel named SYSTEM.DEF.SVRCONN and will not flow a username / password on the connection. If the user running the tutorial is an MQ Administrator then it is necessary to disable MQ Channel Authentication before running the tutorial by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>alter qmgr CHLAUTH(DISABLED)</code><br><code>alter authinfo(SYSTEM.DEFAULT.AUTHINFO.IDPWOS) AUTHTYPE(IDPWOS) CHCKCLNT(OPTIONAL)</code><br><code>end</code><br><code>endmqm -i TESTQM</code><br><code>strmqm TESTQM</code>"}]}},{"details":"When using the IBM App Connect Enterprise JMS nodes in a message flow, the configuration required to locate the JMS provider queues is defined using a JNDI (Java Naming and Directory Interface) bindings file. Your JMS provider is likely to provide an adminstration tool or script to help you generate this bindings file. This tutorial uses IBM MQ as JMS provider, and the instructions below describe how to set up this bindings file. These instructions assume you are running this tutorial on a Windows machine. For help with other platforms, please consult the product documentation. Set up the JMS configuration for the IBM MQ queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"On the filesystem, create the folder <code>C:\\\\JNDI-Directory</code> (unless you have previously editted your JMSAdmin.config file, this is where the JNDI bindings file will be generated when you complete the following instructions)."},{"details":"IBM MQ provides a JMS Admin Tool Execution Script called <span class=\'resource\'>JMSAdmin.bat</span>. Run this script, passing in a definitions file which is provided in the ExampleJMS application project which you previously imported to your Toolkit workspace. Assuming you used the default location for your MQ installation, and that your Toolkit workspace is defined at C:\\\\ToolkitWorkspace, open a command console and execute the following commands:<br><code>cd C:\\\\Program Files\\\\IBM\\\\MQ\\\\Java\\\\bin</code><br><code>JMSAdmin &lt; \\"C:\\\\ToolkitWorkspace\\\\ExampleJMSOutput\\\\jms.defs\\"</code>"}]}},{"details":"Create an integration node by completing the following steps. Note that the integration node does not necessarily need to be co-located with the queue manager:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR files named <span class=\'application\'>JMSOutput.bar</span> which you will find inside the <span class=\'application\'>ExampleJMSOutput</span> application and <span class=\'application\'>JMSInput.bar</span> which you will find inside the <span class=\'application\'>ExampleJMSInput</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>JMSOutput.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved input message is provided named <span class=\'resource\'>InputMessage</span> which contains this data:<br><span class=\'resource\'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The same data should be echoed in the response. Close the dialog and a green line is shown plotting the full path of the message through the flow."},{"details":"Using a text editor open the trace file which should have been written by <span class=\'resource\'>JMSInput.msgflow</span>. The trace file is <span class=\'resource\'>C:\\\\temp\\\\TraceJMSInput.txt</span>, which should contain text like this:<br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-14 14:12:10.103358</code><br><code>The message from the JMSInput node queue is placed in the Root of the logical message tree</code><br><code>Casting this message back to a string shows that the data from the queue was:</code><br><code>This hardcoded data will be written to and read from the JMS queue</code><br><code>================================================================================</code>"}]}}]}},{"section":"This tutorial has shown how to use the JMSOutput and JMSInput nodes to interact with queues defined on an IBM MQ queue manager."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"JMSInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac24820_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"JMSOutput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac24830_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"JMS - Using the JMSOutput and JMSReceive nodes with messages and queues":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JMS - Using the JMSOutput and JMSReceive nodes with messages and queues","shortDescription":"Learn how to use the JMSOutput and JMSReceive nodes to interact with queues defined on an IBM MQ queue manager.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JMSOutput node"},{"title":"JMSReceive node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to interact with IBM MQ using JMS configuration."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates two simple message flows. The first is driven using an input message over HTTP which is echoed back to the requestor unchanged, and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node adds a JMS header, and then a Mapping node prepares a fixed string of data in the message body. The message is passed to a JMSOutput node and written to a JMS destination queue. The second message flow starts from an HTTPInput message which can receive any input. The next node is a JMSReceive node which reads a meesage from the same JMS destination which was written to by the first flow. If a message is read from the queue, then the following JMSHeader node removes the JMS header, and passes the body back to the original requestor using an HTTPReply node.  If no message is read from the queue, a Mapping node constructs a simple HTTP reply instead."},{"section":"The tutorial requires an integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses JMS nodes which are configured to interact with an IBM MQ queue manager, but which could easily be substituted for another JMS provider if you wish. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleJMSOutput</span> and an application named <span class=\'application\'>ExampleJMSReceive</span>."},{"section":"<span class=\'application\'>ExampleJMSOutput</span> provides a message flow named <span class=\'resource\'>JMSOutput</span>."},{"section":"<span class=\'application\'>ExampleJMSReceive</span> provides a message flow named <span class=\'resource\'>JMSReceive</span>."},{"section":"The <span class=\'resource\'>JMSOutput</span> message flow is driven by an HTTPInput node configured to receive any input message as BLOB. The message is echoed back using an HTTPReply node and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node creates a new JMS header, followed by a Mapping node which creates a new message body which is hardcoded to the value <code>This hardcoded data will be written to and read from the JMS queue</code>. Finally a JMSOutput node puts the message on to a JMS destination queue with the name jmsexample."},{"section":"The <span class=\'resource\'>JMSReceive</span> message flow is driven by an HTTPInput node and uses a JMSReceive node to read a message from the output queue of the first flow - jmsexample. If a message is read from the queue, then the following JMSHeader node removes the JMS header, and passes the body back to the original requestor using an HTTPReply node.  If no message is read from the queue, a Mapping node constructs a simple HTTP reply instead."},{"section":"Once imported using the link on the right, the applications <span class=\'application\'>ExampleJMSOutput</span> and <span class=\'application\'>ExampleJMSReceive</span> are ready to be deployed and tested. To deploy, you can use the provided BAR files, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create a queue manager and integration node, set up the JMS configuration, and then deploy the message flows","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The tutorial requires MQ and JMS definitions.  Execute the following steps to prepare your environment accordingly:","steps":{"type":"ordered","details":[{"details":"Create an IBM MQ queue manager and configure it by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"Open the IBM App Connect Enterprise Console. If you don\'t already have one, create and start a queue manager:<br><code><span class=\'cmdname\'>crtmqm</span> <span class=\'varname\'>TESTQM</span></code><br><code><span class=\'cmdname\'>strmqm</span> <span class=\'varname\'>TESTQM</span></code>"},{"details":"Next create a queue and a listener by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>define ql(EXAMPLE)</code><br><code>define listener(LISTENER1) TRPTYPE(TCP) PORT(2414)</code><br><code>start listener(LISTENER1)</code>"},{"details":"The connection to the queue manager will attempt to use the default server connection channel named SYSTEM.DEF.SVRCONN and will not flow a username / password on the connection. If the user running the tutorial is an MQ Administrator then it is necessary to disable MQ Channel Authentication before running the tutorial by typing the following commands:<br><code>runmqsc <span class=\'varname\'>TESTQM</span></code><br><code>alter qmgr CHLAUTH(DISABLED)</code><br><code>alter authinfo(SYSTEM.DEFAULT.AUTHINFO.IDPWOS) AUTHTYPE(IDPWOS) CHCKCLNT(OPTIONAL)</code><br><code>end</code><br><code>endmqm -i TESTQM</code><br><code>strmqm TESTQM</code>"}]}},{"details":"When using the IBM App Connect Enterprise JMS nodes in a message flow, the configuration required to locate the JMS provider queues is defined using a JNDI (Java Naming and Directory Interface) bindings file. Your JMS provider is likely to provide an adminstration tool or script to help you generate this bindings file. This tutorial uses IBM MQ as JMS provider, and the instructions below describe how to set up this bindings file. These instructions assume you are running this tutorial on a Windows machine. For help with other platforms, please consult the product documentation. Set up the JMS configuration for the IBM MQ queue manager by completing the following steps:","substeps":{"type":"ordered","details":[{"details":"On the filesystem, create the folder <code>C:\\\\JNDI-Directory</code> (unless you have previously editted your JMSAdmin.config file, this is where the JNDI bindings file will be generated when you complete the following instructions)."},{"details":"IBM MQ provides a JMS Admin Tool Execution Script called <span class=\'resource\'>JMSAdmin.bat</span>. Run this script, passing in a definitions file which is provided in the ExampleJMS application project which you previously imported to your Toolkit workspace. Assuming you used the default location for your MQ installation, and that your Toolkit workspace is defined at C:\\\\ToolkitWorkspace, open a command console and execute the following commands:<br><code>cd C:\\\\Program Files\\\\IBM\\\\MQ\\\\Java\\\\bin</code><br><code>JMSAdmin &lt; \\"C:\\\\ToolkitWorkspace\\\\ExampleJMSOutput\\\\jms.defs\\"</code>"}]}},{"details":"Create an integration node by completing the following steps. Note that the integration node does not necessarily need to be co-located with the queue manager:","substeps":{"type":"ordered","details":[{"details":"In the console window, create an integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreatebroker</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Start the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsistart</span> <span class=\'varname\'>TESTNODE</span></code>"},{"details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class=\'cmdname\'>mqsicreateexecutiongroup</span> <span class=\'varname\'>TESTNODE</span> -e <span class=\'varname\'>default</span></code>"}]}},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR files named <span class=\'application\'>JMSOutput.bar</span> which you will find inside the <span class=\'application\'>ExampleJMSOutput</span> application and <span class=\'application\'>JMSReceive.bar</span> which you will find inside the <span class=\'application\'>ExampleJMSReceive</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>JMSOutput.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved input message is provided named <span class=\'resource\'>InputMessage</span> which contains this data:<br><span class=\'resource\'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The same data should be echoed in the response. Close the dialog and a blue line is shown plotting the full path of the message through the flow."}]}},{"details":"Open <span class=\'resource\'>JMSReceive.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />."},{"details":"A saved input message is provided named <span class=\'resource\'>InputMessage</span> which contains this data:<br><span class=\'resource\'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The response message which is returned should match the data which was written to the JMS queue by the first message flow which contains this text:<br><span class=\'resource\'>This hardcoded data will be written to and read from the JMS queue</span>"}]}}]}},{"section":"This tutorial has shown how to use the JMSOutput and JMSReceive nodes to interact with queues defined on an IBM MQ queue manager."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"JMSReceive node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bc19200_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"JMSOutput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac24830_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"File - Using the FileExists node to selectively invoke the FileRead node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"File - Using the FileExists node to selectively invoke the FileRead node","shortDescription":"Learn how to use the FileExists node to trigger a message flow (requires v12.0.4.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"FileExists node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to trigger a message flow based upon the discovery of a file in a local directory."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how the FileExists node works using a message flow that has two sections. The first part of the flow is driven by an HTTP input message in JSON format containing a country code that abbreviates the name of a country (such as UK or DE for example). The flow uses an in-memory cache (if populated with data) to translate the country code into the full name of the country which is returned in an HTTP reply. The second part of the flow is driven by a FileExists message flow node which polls a directory, expecting to find a text file in a comma-separated-value format that contains a list of country codes and country names paired together. The FileExists node does not immediately parse the content of the file, but carries meta-data about the file downstream to later nodes in the flow. These later nodes compare the time when the file was last modified to the time when the in-memory cache was last updated. If the file is more recent, then the cache is updated. However if the file is older, then the cache is not updated."},{"section":"This tutorial provides an application to hold the message flow, and a message model for parsing the file in comma-separated-value format. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ApplicationFileExists</span>"},{"section":"<span class=\'application\'>ApplicationFileExists</span> provides a single message flow named <span class=\'application\'>FlowFileExists</span> which uses a FileExists node to poll a directory and triggers the message flow when it notices that a file has arrived. The file itself is not parsed, but information about the file is propagated through the flow. Downstream nodes use the time when the file was last modified to determine whether or not to update an in-memory cache. The following descriptions summarize the functionality of each message flow node:"},{"section":"<span class=\'uicontrol\'>HTTP Input</span>: An Input node that receives an input message across HTTP that contains a country code (an abbreviated country name)."},{"section":"<span class=\'uicontrol\'>TranslateCountryCode</span>: A Compute node that uses an ESQL shared variable as an in-memory cache providing a Lookup facility to retrieve the full country name, by using the abbreviated country code as a key."},{"section":"<span class=\'uicontrol\'>HTTP Reply</span>: A Reply node that returns a message across HTTP that contains the full country name, and to help you understand how the flow is operating, the time at which the cache was last updated."},{"section":"<span class=\'uicontrol\'>FileExists</span>: A FileExists node that triggers the flow when it notices that a file has been written to a directory which it is polling on a 20 second interval."},{"section":"<span class=\'uicontrol\'>Update Cache?</span>: A Filter node that compares the time when the file was last modified to the time when the in-memory cache was last updated, and depending on the comparison, routes the data in different directions."},{"section":"<span class=\'uicontrol\'>CacheNotUpdated</span>: A Trace node that records that the cache does not need updating."},{"section":"<span class=\'uicontrol\'>File Read</span>: A File Read node that reads the file and parses it using a DFDL message model, ready to populate the in-memory cache."},{"section":"<span class=\'uicontrol\'>Update Cache</span>: A Compute node that updates the shared variable in-memory cache with the content from the file."},{"section":"<span class=\'uicontrol\'>CacheUpdated</span>: A Trace node that records that the cache has been updated."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. The rest of these instructions will describe how to do this using the Toolkit\'s built-in Flow Exerciser."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"FileExists node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-fileexists-node","type":"web"},{"title":"IBM Documentation link to ","description":"Long-lived variable","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=overview-long-lived-variables","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"The following steps help you to prepare your environment ready for running the message flow.","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog. "}]}},{"section":"<b>Create a temporary directory and configure the message flow\'s trace nodes</b>","steps":{"type":"ordered","details":[{"details":"The message flow includes two trace nodes (named CacheUpdated and CacheNotUpdated) which are both currently configured to write a trace file named <code>C:\\\\temp\\\\TraceFileExists.txt</code>. Make sure this temporary directory exists, or update the message flow nodes\' properties to point to a different file location."}]}},{"section":"<b>Create the directory which the FileExists node will poll</b>","steps":{"type":"ordered","details":[{"details":"On Windows: Create the directory <code>C:\\\\temp\\\\FileExistsDemo</code>."},{"details":"On Linux: Create a suitable directory such as <code>/tmp/FileExistsDemo</code> and change the Input directory property of the FileExists node accordingly to point to the same directory."}]}},{"section":"Next you will use the Flow exerciser to send HTTP requests to the message flow."}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>FileExistsFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (if you have already deployed the flow you will be asked whether you want to redeploy it which should only be necessary if you have subsequently changed the flow since it was last deployed)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. One saved message is provided, named Input1, which can be used to invoke the HTTP Input node..."},{"details":"The input message <span class=\'resource\'>Input1</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CountryCode\\": \\"UK\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message structured like this:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CountryCode\\": \\"UK\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CountryName\\": \\"Unknown\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CacheInfo\\": \\"Cache has not yet been initialised\\"<br>}</code><br><br>After you close the dialog, the path taken through the message flow will be highlighted."},{"details":"Copy the provided input file from <code>&lt;Integration Toolkit workspace&gt;/ApplicationFileExists/CountryCodes.txt</code> to the input directory that you created on your file system earlier. The file will be processed by the message flow to update its cache and will then be deleted. This may take a few seconds as the polling interval of the flow is set to 20 seconds."},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. You should now see a second path highlighted in the flow (FileExists > Update Cache? > File Read > Update Cache > CacheUpdated) demonstrating the actions of the FileExists node. The flow will have noticed that the in-memory cache had not previously been populated and will have used the content of the file you copied to populate the cache. The Trace node at the end of the flow named CacheUpdated should have created an entry in the trace file (file location discussed earlier in the Prepare section of this tutorial) with content similar to the following:<br><code>===== Trace at 2022-03-30 15:32:44.841308 =====<br>File Name = \'CountryCodes.txt\'<br>File LastModified = GMTTIMESTAMP \'2022-03-30 11:24:28\'<br>Cache LastModified = GMTTIMESTAMP \'2022-03-30 15:32:44.840285\'<br>The flow has updated its cache, either because it has not previously been initialised, or because the FileExists node was triggered by a file whose LastModified timestamp was more recent than the time of the last cache update.<br></code>"},{"details":"Now that the cache has been populated we will re-test the bottom branch of the flow by clicking the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Using the same saved message, named Input1, we will repeat the earlier test but this time you should see a different reply message..."},{"details":"The input message <span class=\'resource\'>Input1</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CountryCode\\": \\"UK\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message structured like this (but with a different timestamp):<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CountryCode\\": \\"UK\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CountryName\\": \\"United Kingdom\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"CacheInfo\\": \\"Cache was last updated at GMTTIMESTAMP \'2022-03-30 15:32:44.840285\'\\"<br>}</code><br><br>After you close the dialog, the path taken through the messageflow will be highlighted."},{"details":"You can now run a further test, demonstrating the last branch of the message flow. Repeat the copy of the provided input file from <code>&lt;Integration Toolkit workspace&gt;/ApplicationFileExists/CountryCodes.txt</code> to the input directory that you created on your file system earlier. This time, the cache won\'t need initialising and will have already been updated more recently than the Last Modified timestamp of the file, so after the flow propagates to the trace node named CacheNotUpdated, the last action of the flow will be to delete the file. If you check back in the trace file, you should see a slightly different trace message has been appended by the node CacheNotUpdated:<br><code>===== Trace at 2022-03-30 15:36:44.946730 =====<br>File Name = \'CountryCodes.txt\'<br>File LastModified = GMTTIMESTAMP \'2022-03-30 11:24:28\'<br>There is nothing further for the flow to do at this time, because the FileExists node was triggered by a file whose LastModified timestamp was earlier than the latest cache update time.<br></code>"},{"details":"If you make an edit to the CountryCodes.txt file (for example, add a new country to the list) and resave the file so that it has been recently modified (after the last update to the cache), then you should be able to copy it to the input directory for the FileExists node and the flow will update its cache again."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileExists node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-fileexists-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"File - Using the FileExists node and the FileIterator node together in a message flow":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"File - Using the FileExists node and the FileIterator node together in a message flow","shortDescription":"Learn how to use the FileIterator node to iterate over file listings generated by the FileExists node (requires v12.0.6.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"FileIterator node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to trigger a message flow based upon the discovery of a list of files in a local directory, which are then processed one at a time using the File Iterator node."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how the File Exists node can be used with its <code>List mode</code> property in order to discover meta-data about a list of files which are discovered in an input directory. This information is sent downstream to later nodes in the flow. The File Iterator node is used to loop over the list of files, and for each entry in the list propagates a LocalEnvironment that is compatible with driving the behaviour of a subsequent FileRead node to read and parse that specific file. The File Iterator node allows each file to be processed one at a time. If an exception occurs for a particular propagation, the exception is stored, and the remaining file entries are processed to completion. In the provided example, a Filter node is used after the File Iterator node to determine whether the file was last modified before today. If the file was last modified before today then the Filter node propagates down its True terminal and after logging some information using the node Trace2, the file will be deleted.  If the file was last modified today, then the Filter node propagates down its False terminal and the File Read node will parse the file and log its contents using the node Trace3."},{"section":"This tutorial provides an application to hold the message flow, and three input files. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleFileIterator</span>"},{"section":"<span class=\'application\'>ExampleFileIterator</span> provides a single message flow named <span class=\'application\'>ExampleFileIteratorFlow</span> which uses a File Exists node to poll a directory and triggers the message flow when it notices that files have arrived.   The files themselves are not parsed, but information about them is propagated through the flow. Downstream, the File Iterator node will loop over the provided list of files and will use the time when each file was last modified to determine whether or not to parse the data content of the file before deleting it. The following descriptions summarize the functionality of each message flow node:"},{"section":"<span class=\'uicontrol\'>File Exists</span>: A FileExists node that triggers the flow when it notices that one or more files have been written to a directory which it is polling on a 20 second interval."},{"section":"<span class=\'uicontrol\'>Trace1</span>: A Trace node which saves the LocalEnvironment which was generated by the prior File Exists node (with List mode turned on)"},{"section":"<span class=\'uicontrol\'>File Iterator</span>: A File Iterator node that loops over the list of files which were discovered by the File Exists node."},{"section":"<span class=\'uicontrol\'>Filter</span>: A Filter node that compares the time when the file was last modified to today\'s date."},{"section":"<span class=\'uicontrol\'>Trace2</span>: A Trace node which records the timestamp information used in the Filter node before the file is deleted by the message flow."},{"section":"<span class=\'uicontrol\'>File Read</span>: A File Read node that parses the content of the file."},{"section":"<span class=\'uicontrol\'>Trace3</span>: A Trace node that records the content of the file which was just parsed, before the file is deleted by the message flow."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. The rest of these instructions will describe how to do this using the Toolkit\'s built-in Flow Exerciser."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"FileExists node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-fileexists-node","type":"web"},{"title":"IBM Documentation link to ","description":"FileIterator node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-fileiterator-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"The following steps help you to prepare your environment ready for running the message flow.","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog. "}]}},{"section":"<b>Create a temporary directory and configure the message flow\'s trace nodes</b>","steps":{"type":"ordered","details":[{"details":"The message flow includes three trace nodes (named Trace1, Trace2 and Trace3) which are currently configured to write their trace files to the directory named <code>C:\\\\temp\\\\FileIterator\\\\Traces</code>. Make sure this temporary directory exists, or update the message flow nodes\' properties to point to a different file location."}]}},{"section":"<b>Create the directory which the FileExists node will poll</b>","steps":{"type":"ordered","details":[{"details":"On Windows: Create the directory <code>C:\\\\temp\\\\FileIterator\\\\Input</code>."},{"details":"On Linux: Create a suitable directory such as <code>/tmp/FileIterator/Input</code> and change the Input directory property of the FileExists node accordingly to point to the same directory."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>ExampleFileIteratorFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (if you have already deployed the flow you will be asked whether you want to redeploy it which should only be necessary if you have subsequently changed the flow since it was last deployed)."},{"details":"For convenience three input messages have been provided, which have been stored inside the <span class=\'resource\'>ExampleFileIterator</span> application project. The last modified times of these files were earlier in time (from when this tutorial was written, which happens to have been in September 2022) than the current date on which you are now reading this tutorial. Open one of the files, for example <code>Fruit2.txt</code>. You will find the content of the file is:<code>{&quot;Fruit&quot;:&quot;ORANGES&quot;}</code>. Change the file content to be <code>{&quot;Fruit&quot;:&quot;STRAWBERRIES&quot;}</code>"},{"details":"Copy the three provided files <code>Fruit1.txt</code>, <code>Fruit2.txt</code> and <code>Fruit3.txt</code> from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileIterator</code> and paste them all at once into the input directory that you created on your file system earlier (by default <code>C:\\\\temp\\\\FileIterator\\\\Input</code>). The polling interval of the FileExists node is set to 5 seconds so you may have a short pause before the files have been processed."},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. You should see that there have been two propagations which passed out of the True terminal of the Filter node into Trace2. There will be one propagation (relating to the file which you editted earlier in the tutorial - on today\'s date!) which passed out of the False terminal of the Filter node into the FileRead and then on into Trace3. Check out the trace files which have been written by Trace2 and Trace3. <code>Trace2.txt</code> will have content like this:<br><br><code>===== 2022-09-29 23:23:48.371834  =====<br>The message flow is not going to bother reading and parsing the file \'Fruit1.txt\'<br>The file \'Fruit1.txt\' had a LastModified timestamp of GMTTIMESTAMP \'2022-09-29 22:04:00.619\'<br>The current timestamp is 2022-09-29 23:23:48.371834<br>The file \'Fruit1.txt\' was last modified before today and so will just be deleted by the message flow.<br><br><br>===== 2022-09-29 23:23:48.376716  =====<br>The message flow is not going to bother reading and parsing the file \'Fruit3.txt\'<br>The file \'Fruit3.txt\' had a LastModified timestamp of GMTTIMESTAMP \'2022-09-29 22:04:14.739\'<br>The current timestamp is 2022-09-29 23:23:48.376716<br>The file \'Fruit3.txt\' was last modified before today and so will just be deleted by the message flow.</code><br><br><code>Trace3.txt</code> will have content like this:<br><br><code></code>===== 2022-09-29 23:19:46.838665 =====<br>The file \'Fruit2.txt\' has been parsed and contained the following data:<br>\'STRAWBERRIES\'"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileExists node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-fileexists-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"File - Using the FileInput node with Whole File record detection":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"File - Using the FileInput node with Whole File record detection","shortDescription":"Learn how to use the FileInput node to parse the whole content of a file.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"FileInput node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to read the whole content of an input file."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that parses a whole input XML file using a FileInput node, and propagates all of the data as a single propagation downstream through the flow. A Mapping node transforms the XML format data to a comma separated output format, and writes it to an output file with a specified file name and directory, using a FileOutput node."},{"section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be created in your workspace: An application named <span class=\'application\'>ExampleFileInputWholeFile</span> and a shared library named <span class=\'application\'>FileCSV</span>."},{"section":"<span class=\'application\'>ExampleFileInputWholeFile</span> provides a single message flow named <span class=\'resource\'>FileInputWholeFile</span> which uses a FileInput node to receive an input XML file and propagate the data downstream through the flow. The XML data is transformed into a comma separated output format and written to an output file using a FileOutput node."},{"section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileInput node will attempt to read input files from the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."},{"details":"The message flow\'s FileOutput node will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>FileInputWholeFile.bar</span> which you will find inside the <span class=\'application\'>ExampleFileInputWholeFile</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>FileInputWholeFile.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputWholeFile/WholeFileInput.xml</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."},{"details":"<span class=\'resource\'>WholeFileInput.xml</span> contains this data:<br><code>&lt;Message xmlns=&quot;http://www.ibm.com/ace/dev/FileXML&quot;&gt;<br>&lt;Field1&gt;United Kingdom&lt;/Field1&gt;<br>&lt;Field2&gt;USA&lt;/Field2&gt;<br>&lt;Field3&gt;Germany&lt;/Field3&gt;<br>&lt;Field4&gt;France&lt;/Field4&gt;<br>&lt;Field5&gt;India&lt;/Field5&gt;<br>&lt;/Message&gt;</code>"},{"details":"The flow should create an output file named <span class=\'resource\'>C:\\\\temp\\\\FileOutput\\\\WholeFileOutput.txt</span> which contains this data:<br><code>United Kingdom,USA,Germany,France,India</code>"}]}}]}},{"section":"This tutorial has shown the FileInput node parsing the whole content of a file."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55150_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"File - Using the FileInput node with Fixed Length record detection":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"File - Using the FileInput node with Fixed Length record detection","shortDescription":"Learn how to use the FileInput node to parse fixed length records from a file.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"FileInput node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to read fixed length input data from a file."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives fixed length data from an input file using a FileInput node, and propagates records downstream through the flow one at a time. A Mapping node transforms each data record into an XML format, and adds it to a staging file using a FileOutput node. Once all records have been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."},{"section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleFileInputFixedLength</span>."},{"section":"<span class=\'application\'>ExampleFileInputFixedLength</span> provides a single message flow named <span class=\'resource\'>FileInputFixedLength</span> which uses a FileInput node to receive fixed length data from an input file and propagate the records downstream through the flow one at a time. Each record is transformed into XML and added to a staging file using a FileOutput node. After the last record has been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileInput node will attempt to read input files from the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."},{"details":"The message flow\'s FileOutput node will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>FileInputFixedLength.bar</span> which you will find inside the <span class=\'application\'>ExampleFileInputFixedLength</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>FileInputFixedLength.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputFixedLength/FixedLengthInput.txt</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."},{"details":"<span class=\'resource\'>FixedLengthInput.txt</span> contains this data:<br><code>UnitedKingdom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;USA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Germany&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;France&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;India&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>"},{"details":"The flow should create an output file named <span class=\'resource\'>C:\\\\temp\\\\FileOutput\\\\FixedLengthOutput.txt</span> which contains this data:<br><code>&lt;Message&gt;&lt;RecordNumber&gt;1&lt;/RecordNumber&gt;&lt;RecordData&gt;UnitedKingdom&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;2&lt;/RecordNumber&gt;&lt;RecordData&gt;USA&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;3&lt;/RecordNumber&gt;&lt;RecordData&gt;Germany&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;4&lt;/RecordNumber&gt;&lt;RecordData&gt;France&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;5&lt;/RecordNumber&gt;&lt;RecordData&gt;India&lt;/RecordData&gt;&lt;/Message&gt;</code>"}]}}]}},{"section":"This tutorial has shown the FileInput node parsing fixed length records from a file."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55150_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"File - Using the FileInput node with Delimited record detection":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"File - Using the FileInput node with Delimited record detection","shortDescription":"Learn how to use the FileInput node to parse delimited records from a file.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"FileInput node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to read delimited input data from a file."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives comma separated data from an input file using a FileInput node, and propagates records downstream through the flow one at a time. A Mapping node transforms each data record into an XML format, and adds it to a staging file using a FileOutput node. Once all records have been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."},{"section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleFileInputDelimited</span>."},{"section":"<span class=\'application\'>ExampleFileInputDelimited</span> provides a single message flow named <span class=\'resource\'>FileInputDelimited</span> which uses a FileInput node to receive comma separated data from an input file and propagate the records downstream through the flow one at a time. Each record is transformed into XML and added to a staging file using a FileOutput node. After the last record has been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileInput node will attempt to read input files from the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."},{"details":"The message flow\'s FileOutput node will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>FileInputDelimited.bar</span> which you will find inside the <span class=\'application\'>ExampleFileInputDelimited</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>FileInputDelimited.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputDelimited/DelimitedInput.txt</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."},{"details":"<span class=\'resource\'>DelimitedInput.txt</span> contains this data:<br><code>UnitedKingdom,USA,Germany,France,India</code>"},{"details":"The flow should create an output file named <span class=\'resource\'>C:\\\\temp\\\\FileOutput\\\\DelimitedOutput.txt</span> which contains this data:<br><code>&lt;Message&gt;&lt;RecordNumber&gt;1&lt;/RecordNumber&gt;&lt;RecordData&gt;UnitedKingdom&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;2&lt;/RecordNumber&gt;&lt;RecordData&gt;USA&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;3&lt;/RecordNumber&gt;&lt;RecordData&gt;Germany&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;4&lt;/RecordNumber&gt;&lt;RecordData&gt;France&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;5&lt;/RecordNumber&gt;&lt;RecordData&gt;India&lt;/RecordData&gt;&lt;/Message&gt;</code>"}]}}]}},{"section":"This tutorial has shown the FileInput node parsing delimited records from a file."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55150_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"File - Using the FileInput node with Parsed Record Sequence record detection":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"File - Using the FileInput node with Parsed Record Sequence record detection","shortDescription":"Learn how to use the FileInput node to parse records from a file using a message model.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"FileInput node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to read input data from a file using a message model."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives modeled XML data from an input file using a FileInput node, and propagates records downstream through the flow one at a time. A Mapping node transforms each data record into a string format (propagated using the BLOB domain), and adds it to a staging file using a FileOutput node. Once all records have been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."},{"section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>ExampleFileInputParsedRecordSequence</span>."},{"section":"<span class=\'application\'>ExampleFileInputParsedRecordSequence</span> provides a single message flow named <span class=\'resource\'>FileInputParsedRecordSequence</span> which uses a FileInput node to receive modeled XML data from an input file and propagate the records downstream through the flow one at a time. Each XML record is transformed into a string format (propagated using the BLOB domain) and added to a staging file using a FileOutput node. After the last record has been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."},{"section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an output directory, create an integration node and deploy the message flow","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"The message flow\'s FileInput node will attempt to read input files from the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."},{"details":"The message flow\'s FileOutput node will attempt to write output files to the directory <code><span class=\'cmdname\'>C:\\\\temp\\\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."},{"details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class=\'cmdname\'>mqsicreatebroker TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsistart TESTNODE</span></code><br><code><span class=\'cmdname\'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"},{"details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class=\'application\'>FileInputParsedRecordSequence.bar</span> which you will find inside the <span class=\'application\'>ExampleFileInputParsedRecordSequence</span> application."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Use the Flow Exerciser to test the tutorial scenario","steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>FileInputParsedRecordSequence.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputParsedRecordSequence/ParsedRecordSequenceInput.txt</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."},{"details":"In the Flow Exerciser toolbar, click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."},{"details":"<span class=\'resource\'>ParsedRecordSequenceInput.txt</span> contains this data:<br><code>&lt;Message&gt;&lt;RecordData&gt;UnitedKingdom&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;USA&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;Germany&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;France&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;India&lt;/RecordData&gt;&lt;/Message&gt;</code>"},{"details":"The flow should create an output file named <span class=\'resource\'>C:\\\\temp\\\\FileOutput\\\\ParsedRecordSequenceOutput.txt</span> which contains this data:<br><code>Record Number 1 Data = UnitedKingdom<br>Record Number 2 Data = USA<br>Record Number 3 Data = Germany<br>Record Number 4 Data = France<br>Record Number 5 Data = India</code>"}]}}]}},{"section":"This tutorial has shown the FileInput node parsing records from a file using a message model."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"FileInput node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac55150_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Integration services (SOAP/HTTP inputs)":{"version":"0.6","pageContent":{"comments":"Must use underscore for en-us.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Integration services (SOAP/HTTP inputs)","shortDescription":"Learn about integration services that use SOAP/HTTP inputs","durationText":"This tutorial takes approximately","durationTime":"5 minutes","resourceToOpen":"MainService","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","topicList":[{"title":"Integration services"},{"title":"SOAP/HTTP web services"},{"title":"Transformation using graphical data mapping"}],"outcomesName":"Learning outcomes","outcomeList":[{"title":"Understand how a SOAP/HTTP web service interface is defined via an integration service."},{"title":"Learn how to implement web service operations in an integration service."},{"title":"Learn how a web service request is represented in App Connect Enterprise, for transformation or routing to another system."}],"summary":{"comments":"","overviewName":"OVERVIEW","sections":[{"section":"App Connect Enterprise provides a specific project type, an integration service, for developing web service implementations. These help you define and implement a web service interface which can be called from other standard clients, and where the interface is defined by WSDL. This tutorial shows a simple example where a web service operation implements a transformation between temperature formats."},{"section":"The integration service editor separates the tasks of defining an interface from implementing that interface. In this example, the interface defines two operations, both of which have numeric inputs and outputs representing temperature in different scales. The interface is stored as a standard WSDL document. An editor is provided to show the interface, and help you build or change it. Each operation is implemented as a subflow, using the built-in Mapping nodes to transform the incoming requests."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using integration services","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12004_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Transforming a SOAP message in a message map","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/br30017_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and an integration service project called <span class=\'uicontrol\'>TemperatureConverter</span> will be added to your workspace, and the integration service editor will be opened to show you its contents. Next, click Prepare for an explanation of the different parts of the integration service editor."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using integration services","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12004_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare the tutorial","_prepareComment":"Prepare the tutorial","sections":[{"section":"Explore the imported integration service:","steps":{"type":"ordered","details":[{"details":"In the main pane you will see the integration service editor, which you can reopen by clicking on the integration service Description inside the <b>TemperatureConverter</b> project. The editor has two tabs, one called <b>Service</b> and another called <b>Interface</b>."},{"details":"If you click on <b>Interface</b>, you will see the two web service operations which have been defined, along with their input and output types. These are called <b>CtoF</b> and <b>FtoC</b>."},{"details":"If you click back on Service, you will see a link for each operation name defined in the Interface tab, along with links for error handling (named Timeout, Failure and Catch). Click on each of <b>CtoF</b> and <b>FtoC</b> to see the subflow which implements that operation. There is a Mapping node in each one which performs a transformation on the input data, to convert between Celsius and Fahrenheit temperatures."},{"details":"Finally, click on the SOAP/HTTP Binding link and look at the Properties pane; this will show you properties which apply to all operations, such as the URL prefix and whether https is enabled."}]}},{"section":"Create an integration server and connect your App Connect Enterprise Toolkit:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"},{"details":"Locate <b>TemperatureConverter.bar</b> inside the <b>TemperatureConverter</b> integration service in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using integration services","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12004_.htm","type":"web"}]},"actions-removed":{"title":"Prepare Actions","details":[{"name":"Deploy","method":"deployArtifacts()"}]}},"run":{"overview":{"name":"Run","heading":"Test the integration service to complete the tutorial","_runComment":"","sections":[{"section":"Test the <b>TemperatureConverter</b> integration service by sending it data using an HTTP client such as cURL:","steps":{"type":"ordered","details":[{"details":"<code>cd C:\\\\workspace</code><br> where <b>C:\\\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/TemperatureConverter/TemperatureConverter -d @.\\\\TemperatureConverter\\\\CtoFrequest.xml</code>"},{"details":"This input message looks like this:<br><b>&lt;soapenv:Envelope xmlns:soapenv=\\"http://schemas.xmlsoap.org/soap/envelope/\\" xmlns:tem=\\"http://TemperatureConverter\\"&gt;<br>&lt;soapenv:Body&gt;<br>&lt;tem:CtoF&gt;&lt;TemperatureInC&gt;0&lt;/TemperatureInC&gt;&lt;/tem:CtoF&gt;<br>&lt;/soapenv:Body&gt;<br>&lt;/soapenv:Envelope&gt;</b>"},{"details":"The reply message should look like this:<br><b>&lt;?xml version=\\"1.0\\" encoding=\\"utf-8\\"?&gt;<br>&lt;soapenv:Envelope xmlns:soapenv=\\"http://schemas.xmlsoap.org/soap/envelope/\\"&gt;<br>&lt;soapenv:Body&gt;<br>&lt;io:CtoFResponse xmlns:io=\\"http://TemperatureConverter\\"&gt;&lt;TemperatureInF&gt;32&lt;/TemperatureInF&gt;&lt;/io:CtoFResponse&gt;<br>&lt;/soapenv:Body&gt;<br>&lt;/soapenv:Envelope&gt;</b>"},{"details":"You can use the provided input file named <b>FtoCrequest.xml</b> to test the integration service\'s other operation."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using integration services","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12004_.htm","type":"web"}]}}}}},"Modeling CSV data by using DFDL":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Modeling CSV data by using DFDL","shortDescription":"Learn how to model CSV data by using Data Format Description Language (DFDL).","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainDataFile","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Modeling CSV messages"},{"title":"Editing DFDL schema"},{"title":"Testing DFDL schema"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"An understanding of how the DFDL editor can be used to model and parse CSV data."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to model Comma Separated Value (CSV) data by using DFDL schema."},{"section":"CSV is a data format for storing tabular data in the form of text records. For example, it can be used as an export format for spreadsheets and databases. "},{"section":"A CSV file consists of any number of records, each terminated by a new line of some kind. Each record consists of fields, separated by a literal comma. All records have an identical sequence of fields, and the first record is often a header. Double quotation marks are used as \'escape\' characters in fields that contain a literal comma or a new line as part of their value."},{"section":"The DFDL editor provides a wizard to help you create a DFDL schema that models your particular CSV file."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"CSV messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad20830_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a shared library is imported into your workspace."},{"section":"Library <span class=\'library\'>CommaSeparatedValues</span> contains an example CSV file in \'Other resources\'. Open the file and look at the records. The first record is a header, and there are five fields in each record: last name, first name, middle name, address, and date of birth. Note that address field has double quotation marks so that the comma in the address is not treated as a delimiter."},{"section":"You will now create a DFDL schema to model the example CSV file, by using the <span class=\'wintitle\'>New Message Model</span> wizard."},{"section":"<b>Tip:</b> Ensure that steps 1 to 6 below are all visible in the <span class=\'uicontrol\'>Tutorial Steps View</span> view before proceeding."},{"steps":{"type":"ordered","details":[{"details":"Click <span class=\'uicontrol\'>New...</span> in the <span class=\'uicontrol\'>Application Development</span> view, and select <span class=\'uicontrol\'>Message Model...</span>. The <span class=\'wintitle\'>New Message Model</span> wizard opens."},{"details":"Select <span class=\'uicontrol\'>CSV text</span> and click <span class=\'uicontrol\'>Next</span>."},{"details":"Select the option <span class=\'uicontrol\'>Create a DFDL schema file using this wizard to guide you</span> and then click <span class=\'uicontrol\'>Next</span>."},{"details":"Click the <span class=\'uicontrol\'>Browse</span> button and select the <span class=\'library\'>CommaSeparatedValues</span> library."},{"details":"In the <span class=\'uicontrol\'>DFDL schema file name</span> field, type <span class=\'userinput\'>CSV</span>, and in the <span class=\'uicontrol\'>Message name</span> field, type <span class=\'userinput\'>CSV_message</span>, then click <span class=\'uicontrol\'>Next</span>."},{"details":"Next, specify the details of the CSV file. In the <span class=\'uicontrol\'>End of record character</span> list, select <span class=\'uicontrol\'>Any newline</span>. Select the check box <span class=\'uicontrol\'>The first record is a header</span>. In the <span class=\'uicontrol\'>Number of fields</span> field, type <span class=\'userinput\'>5</span>. Select <span class=\'uicontrol\'>CSV Escape Scheme</span>, then click <span class=\'uicontrol\'>Finish</span>."}]}},{"section":"Two DFDL schemas are created in the library. The <span class=\'filepath\'>CSV.xsd</span> schema models the overall CSV message. The <span class=\'filepath\'>CommaSeparatedFormat.xsd</span> schema defines suitable default values for DFDL properties."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"CSV messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad20830_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Exploring the schemas","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The <span class=\'library\'>CommaSeparatedValues</span> library is shown in the <span class=\'uicontrol\'>Application Development</span> view of your workspace."},{"section":"The <span class=\'filepath\'>CSV.xsd</span> DFDL schema opens in the DFDL editor. If it does not, double-click the DFDL schema to open it in the editor."},{"section":"CSV_message is highlighted and models a CSV file with a header record and an unbounded number of body records. Each record has five fields. The main editor view shows the logical components of the message, such as elements and sequences. You can explore the CSV_message structure by expanding the elements."},{"section":"The physical rendering of each logical component is described by the DFDL properties in the <span class=\'uicontrol\'>Representation Properties</span> tab. DFDL properties can either be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png\' alt=\'\' /> shown next to them, and hovering the cursor over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class=\'filepath\'>CommaSeparatedFormat.xsd</span> file."},{"section":"You will be test parsing the example CSV file using CSV_message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial, and no Deploy step. Before test parsing, switch to the <span class=\'uicontrol\'>DFDL Test</span> perspective by clicking the menu item <span class=\'uicontrol\'>Window &gt; Open Perspective</span> and then selecting <span class=\'uicontrol\'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png\' alt=\'\' />)."},{"section":"<b>Tip:</b> If this <span class=\'uicontrol\'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class=\'uicontrol\'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class=\'uicontrol\'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The <span class=\'filepath\'>CSV.xsd</span> DFDL schema is open in the DFDL editor. CSV_message should be highlighted in green."},{"steps":{"type":"ordered","details":[{"details":"Test parse the example CSV file:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Parse Model</span> window opens."},{"details":"In the Message section, select <span class=\'uicontrol\'>CSV_message</span>."},{"details":"In the Parser Input section, select <span class=\'uicontrol\'>Content from a data file</span> then click <span class=\'uicontrol\'>Browse</span>."},{"details":"Select the <span class=\'filepath\'>simpleCSV.txt</span> file from <span class=\'library\'>CommaSeparatedValues</span> then click <span class=\'uicontrol\'>OK</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>. If asked to confirm switching to the <span class=\'uicontrol\'>DFDL Test</span> perspective, click <span class=\'uicontrol\'>Yes</span>."}]}},{"details":"The results of the test parse are displayed. You should see the message <span class=\'systemoutput\'>Parsing completed successfully</span>. You can dismiss this message."},{"details":"You can view the parsed data file in the <span class=\'uicontrol\'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class=\'uicontrol\'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Test serialize the logical instance that resulted from the parse:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Serialize Model</span> window opens."},{"details":"In the Serializer Input section, select <span class=\'uicontrol\'>Content from \'DFDL Test - Logical Instance\' </span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>."}]}},{"details":"The results of the test serialize are displayed. You should see the message <span class=\'systemoutput\'>Serialization completed successfully</span>. You can dismiss this message."},{"details":"You can view the serialized data file in the <span class=\'uicontrol\'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"As an alternative to the toolbar buttons, you can also test from the <span class=\'uicontrol\'>DFDL Test - Parse</span> and <span class=\'uicontrol\'>DFDL Test - Serialize</span> views, using the <span class=\'uicontrol\'>Browse</span> button to select a data source and the green play icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png\' alt=\'\' /> to run the DFDL parser or serializer."}]}},{"section":"Optional: You can further refine the DFDL schema that you created. "},{"steps":{"type":"ordered","details":[{"details":"Switch back to the <span class=\'uicontrol\'>Integration Development</span> perspective."},{"details":"Give the fields more descriptive names. Expand header and record, then click into each field name and type the new field name."},{"details":"Model the \'date of birth\' field as <span class=\'varname\'>xs:date</span>. Expand record, select the 5th field, click on <span class=\'uicontrol\'>string</span> and select <span class=\'uicontrol\'>date</span> from the list of types. Be sure you make this change to the data type of the 5th field in the <span class=\'uicontrol\'>record</span> structure, not in the <span class=\'uicontrol\'>header</span> structure (all the fields in the header should be modelled as string)."},{"details":"Save the updated schema. Check the <span class=\'uicontrol\'>Problems</span> view; there should be no errors."},{"details":"Use the <span class=\'uicontrol\'>Test Parse Model</span> button again to test parse using the updated schema."},{"details":"Check the <span class=\'uicontrol\'>DFDL Test - Logical Instance</span> view. The new field names and data types are displayed."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing a DFDL schema file","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20065_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"CSV messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad20830_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Modeling COBOL data by using DFDL":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Modeling COBOL data by using DFDL","shortDescription":"Learn how to model COBOL data by using Data Format Description Language (DFDL).","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainCopybook","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Modeling COBOL messages"},{"title":"Editing DFDL schema"},{"title":"Testing DFDL schema"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"An understanding of how the DFDL editor can be used to model and parse COBOL data."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to model COBOL data by using DFDL schema."},{"section":"COBOL is a programming language most commonly used on mainframe computers. In-memory COBOL data structures are defined either in COBOL programs or COBOL copybooks. These data structures are commonly written to files or message queues."},{"section":"COBOL data structures can contain fields of several different physical types, including character strings (PIC X), zoned decimals (PIC 9), packed decimals (PIC 9 COMP-3) and two\'s complement integers (PIC 9 COMP)."},{"section":"The DFDL editor provides a COBOL importer which can read COBOL copybooks and programs and generate the equivalent DFDL schema."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with COBOL data","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd22930_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects and create schema","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a shared library is imported into your workspace."},{"section":"Library <span class=\'library\'>COBOL-Purchases</span> contains a COBOL copybook called <span class=\'filepath\'>PurchaseData.cpy</span> in \'Other resources\'. It defines a COBOL data structure that records the purchases made by a customer. Open the copybook and look at the COBOL structure which is called PurchaseData. The main points of interest are:"},{"steps":{"type":"ordered","details":[{"details":"OCCURS DEPENDING ON. The purchases are recorded by an array of Item structures. There can be between 1 and 50 occurrences of Item, with the actual number provided by the ItemCount field at the start of the data."},{"details":"REDEFINES. Structure ItemGrocery is followed by structure ItemNonGrocery which overlays it. This means that either ItemGrocery or ItemNonGrocery will be present, but not both. The preceding ItemType field indicates which is actually present."}]}},{"section":"You will now create a DFDL schema to model the COBOL PurchaseData structure, using the <span class=\'wintitle\'>New Message Model</span> wizard."},{"section":"<b>Tip:</b> Ensure that steps 1 to 7 below are all visible in the <span class=\'uicontrol\'>Tutorial Steps View</span> before proceeding."},{"steps":{"type":"ordered","details":[{"details":"With <span class=\'filepath\'>PurchaseData.cpy</span> selected, click <span class=\'uicontrol\'>New...</span> in the <span class=\'uicontrol\'>Application Development</span> view, then select <span class=\'uicontrol\'>Message Model...</span>. The <span class=\'wintitle\'>New Message Model</span> wizard opens."},{"details":"Select <span class=\'uicontrol\'>COBOL</span> then click <span class=\'uicontrol\'>Next</span>."},{"details":"Select the option <span class=\'uicontrol\'>Create a DFDL schema file by importing a COBOL copybook or program</span> then click <span class=\'uicontrol\'>Next</span>."},{"details":"<span class=\'filepath\'>PurchaseData.cpy</span> should be highlighted. Click <span class=\'uicontrol\'>Next</span>."},{"details":"The wizard loads and compiles the copybook, and presents all the 01 level structures it finds. Click the <span class=\'uicontrol\'>&gt;&gt;</span> button then click <span class=\'uicontrol\'>Next</span>."},{"details":"Here you can choose settings for DFDL properties such as default values, null values and padding characters. Leave the options to default and click <span class=\'uicontrol\'>Next</span>."},{"details":"Here you can choose platform dependent settings such as encoding and zoned decimal sign representation. Leave the options to default and click <span class=\'uicontrol\'>Finish</span>."}]}},{"section":"Two DFDL schemas are created in the library. The <span class=\'filepath\'>PurchaseData.xsd</span> schema models the overall COBOL data structure. The <span class=\'filepath\'>CobolDataDefinitionFormat.xsd</span> schema defines suitable default values for DFDL properties. The imported copybook is copied into the importFile folder and a report is created in the log folder."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with COBOL data","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd22930_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Exploring the schemas","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The <span class=\'library\'>COBOL-Purchases</span> library is shown in the <span class=\'uicontrol\'>Application Development</span> view of your workspace."},{"section":"The <span class=\'filepath\'>PurchaseData.xsd</span> DFDL schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."},{"section":"The PurchaseData message is highlighted and models the COBOL PurchaseData structure from the copybook. The main editor view shows the logical components of the message such as elements and sequences. You can explore the PurchaseData structure by expanding the elements."},{"section":"The physical rendering of each logical component is described by the DFDL properties in the <span class=\'uicontrol\'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png\' alt=\'\' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from schema <span class=\'filepath\'>CobolDataDefinitionFormat.xsd</span>."},{"section":"The COBOL REDEFINES within Item has been imported as <span class=\'varname\'>xs:choice</span>. The COBOL OCCURS DEPENDING ON has resulted in the DFDL property <span class=\'varname\'>Occurs Count Kind</span> for Item being set to \'expression\', and the DFDL property <span class=\'varname\'>Occurs Count</span> is a DFDL expression that refers to ItemCount."},{"section":"You will be test parsing an example binary data file using the PurchaseData message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class=\'uicontrol\'>DFDL Test</span> perspective by clicking <span class=\'uicontrol\'>Window &gt; Open Perspective</span> and then clicking <span class=\'uicontrol\'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png\' alt=\'\' />)."},{"section":"<b>Tip:</b> If this <span class=\'uicontrol\'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class=\'uicontrol\'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class=\'uicontrol\'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The <span class=\'filepath\'>PurchaseData.xsd</span> DFDL schema is open in the DFDL editor. The PurchaseData message should be highlighted in green."},{"steps":{"type":"ordered","details":[{"details":"Test parse an example COBOL file:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Parse Model</span> window opens."},{"details":"In the Message section, select <span class=\'uicontrol\'>PurchaseData</span>."},{"details":"In the Parser Input section, select <span class=\'uicontrol\'>Content from a data file</span> then click <span class=\'uicontrol\'>Browse</span>."},{"details":"Select the <span class=\'filepath\'>PurchaseData1.bin</span> file from <span class=\'library\'>COBOL-Purchases</span> then click <span class=\'uicontrol\'>OK</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>. If asked to confirm switching to the <span class=\'uicontrol\'>DFDL Test</span> perspective, click <span class=\'uicontrol\'>Yes</span>."}]}},{"details":"The results of the test parse are displayed. You should see the message <span class=\'systemoutput\'>Parsing completed successfully</span>. You can dismiss this message."},{"details":"You can view the parsed data file in the <span class=\'uicontrol\'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class=\'uicontrol\'>DFDL Test - Logical Instance</span> view, as a tree or as XML. If you expand Invoice and then each Item, you can see that the parser has correctly resolved the <span class=\'varname\'>xs:choice</span> to either ItemGrocery or ItemNonGrocery."},{"details":"When the parser encounters a <span class=\'varname\'>xs:choice</span>, its default strategy is to parse the data by trying the first branch of the choice. If that fails, the parser backtracks and tries the second branch. And so on, until a branch parses successfully. In our example, the parser tries ItemGrocery first, and if that fails it backtracks and tries ItemNonGrocery."},{"details":"Open the <span class=\'uicontrol\'>DFDL Test - Trace</span> view and scroll back through the trace entries. You will see an error message CTDP3053E saying that a zoned number conversion error occurred. At this point the parser was attempting to parse the choice by trying ItemGrocery, but the error occurred. The trace entries after that show the parser backtracking and attempting to parse the choice by trying ItemNonGrocery, which succeeded."},{"details":"Sometimes the default strategy of the parser is not sufficient to resolve a <span class=\'varname\'>xs:choice</span> resulting from a COBOL REDEFINES. If that is the case, DFDL provides two other features to help you - discriminators and direct dispatch. These DFDL features are covered in detail by other IBM Integration Bus tutorials."},{"details":"Test serialize the logical instance that resulted from the parse:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Serialize Model</span> window opens."},{"details":"In the Serializer Input section, select <span class=\'uicontrol\'>Content from a DFDL Test - Logical Instance</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>."}]}},{"details":"The results of the test serialize are displayed. You should see the message <span class=\'systemoutput\'>Serialization completed successfully</span>. You can dismiss this message."},{"details":"You can view the serialized data file in the <span class=\'uicontrol\'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"As an alternative to the toolbar buttons, you can also test from the <span class=\'uicontrol\'>DFDL Test - Parse</span> and <span class=\'uicontrol\'>DFDL Test - Serialize</span> views, using the <span class=\'uicontrol\'>Browse</span> button to select a data source and the green play icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png\' alt=\'\' /> to run the DFDL parser or serializer."}]}},{"section":"The shared library can be deployed to an integration node for use by message flows."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing a DFDL schema file","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20065_.htm","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Modeling EDIFACT data by using DFDL":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Modeling EDIFACT data by using DFDL","shortDescription":"Learn how to model EDIFACT data by using Data Format Description Language (DFDL).","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainSchema","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Modeling EDIFACT messages"},{"title":"Editing DFDL schema"},{"title":"Testing DFDL schema"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"An understanding of how the DFDL editor can be used to model and parse EDIFACT data."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to model UN/EDIFACT data by using DFDL schema."},{"section":"UN/EDIFACT is an international standard for EDI trading in commercial and non-commercial sectors. UN/EDIFACT data streams have a hierarchical structure where the top level is referred to as an interchange, and lower levels contain multiple messages, which consist of segments, which in turn consist of composites. Composites in turn consist of elements. Segments, composites, and elements are delimited by separators. Only segments have initiators."},{"section":"An interchange starts with a UNB segment and ends with a UNZ segment. A message starts with a UNH segment and ends with a UNT segment. An element in the UNH segment identifies the message type. Messages may be grouped into functional groups, which start with a UNG segment and end with a UNE segment. Optionally, the interchange can start with a UNA segment that defines the delimiters used by the interchange; defaults are used if there is no UNA."},{"section":"UN/EDIFACT data streams adopt one of several syntax levels, the most common versions being version 3 or version 4."},{"section":"The DFDL schema editor is used to view the model and parse example EDIFACT data files."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"EDIFACT messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad09560_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas EDIFACT repository","link":"http://dfdlschemas.github.io/EDIFACT/","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and two shared libraries are imported into your workspace."},{"section":"Library <span class=\'library\'>EDIFACT-D03B</span> contains a pair of DFDL schemas that model a UN/EDIFACT Supply Chain interchange for release D.03B. Definitions for message types INVOIC and ORDERS are provided. Test data files are included in the library."},{"section":"Library <span class=\'library\'>EDIFACT-Common</span> contains a DFDL schema to define default values for DFDL properties, and a DFDL schema to model the Uxx service segments and service messages for syntax version 4."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"EDIFACT messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad09560_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas EDIFACT repository","link":"http://dfdlschemas.github.io/EDIFACT/","type":"web"},{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Exploring the schemas","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The <span class=\'library\'>EDIFACT-D03B</span> and <span class=\'library\'>EDIFACT-Common</span> libraries are shown in the <span class=\'uicontrol\'>Application Development</span> view of your workspace."},{"section":"The <span class=\'filepath\'>EDIFACT-SupplyChain-Messages-D.03B.xsd</span> DFDL schema in the <span class=\'library\'>EDIFACT-D03B</span> library opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."},{"section":"The Interchange message is highlighted and it models a whole EDIFACT interchange. The main editor view shows the logical components of the message, such as elements and sequences. You can explore the Interchange message structure by expanding the elements."},{"section":"The physical rendering of each logical component is described by the DFDL properties in the <span class=\'uicontrol\'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png\' alt=\'\' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from schema <span class=\'filepath\'>IBM_EDI_Format.xsd</span> in the <span class=\'library\'>EDIFACT-Common</span> library."},{"section":"Because the settings of delimiters in an EDIFACT interchange can vary, the DFDL properties <span class=\'varname\'>Terminator</span>, <span class=\'varname\'>Separator</span>, <span class=\'varname\'>Escape Character</span> and <span class=\'varname\'>Decimal Separator</span> are set dynamically using DFDL expressions that refer to DFDL variables. The variables have default values and are overridden by the settings in a UNA segment if present. You can see this if you expand the UNA element in Interchange, select any of the child elements, and click on the <span class=\'uicontrol\'>Variables</span> tab next to <span class=\'uicontrol\'>Representation Properties</span>."},{"section":"You will be test parsing example EDIFACT data by using the Interchange message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class=\'uicontrol\'>DFDL Test</span> perspective by clicking <span class=\'uicontrol\'>Window &gt; Open Perspective</span> and then clicking <span class=\'uicontrol\'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png\' alt=\'\' />)."},{"section":"<b>Tip:</b> If this <span class=\'uicontrol\'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class=\'uicontrol\'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class=\'uicontrol\'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The <span class=\'filepath\'>EDIFACT-SupplyChain-Messages-D.03B.xsd</span> DFDL schema is open in the DFDL editor. The Interchange message should be highlighted in green.","steps":{"type":"ordered","details":[{"details":"Test parse an example data file:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Parse Model</span> window opens."},{"details":"In the Message section, select <span class=\'uicontrol\'>Interchange</span>."},{"details":"In the Parser Input section, select <span class=\'uicontrol\'>Content from a data file</span> then click <span class=\'uicontrol\'>Browse</span>."},{"details":"Select the <span class=\'filepath\'>ORDERS_D.03B_Interchange.txt</span> file from <span class=\'library\'>EDIFACT-D03B</span> then click <span class=\'uicontrol\'>OK</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>. If asked to confirm switching to the <span class=\'uicontrol\'>DFDL Test</span> perspective, click <span class=\'uicontrol\'>Yes</span>."}]}},{"details":"The results of the test parse are displayed. You should see the message <span class=\'systemoutput\'>Parsing completed successfully</span>. You can dismiss this message."},{"details":"You can view the parsed data file in the <span class=\'uicontrol\'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class=\'uicontrol\'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Test serialize the logical instance that resulted from the parse:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Serialize Model</span> window opens."},{"details":"In the Serializer Input section, select <span class=\'uicontrol\'>Content from a DFDL Test - Logical Instance</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>."}]}},{"details":"The results of the test serialize are displayed. You should see the message <span class=\'systemoutput\'>Serialization completed successfully</span>. You can dismiss this message."},{"details":"You can view the serialized data file in the <span class=\'uicontrol\'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Repeat steps 1 through 6 for the <span class=\'filepath\'>INVOIC_D.03B_Interchange_with_UNA.txt</span> example data file."},{"details":"As an alternative to the toolbar buttons, you can also test from the <span class=\'uicontrol\'>DFDL Test - Parse</span> and <span class=\'uicontrol\'>DFDL Test - Serialize</span> views, using the <span class=\'uicontrol\'>Browse</span> button to select a data source and the green play icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png\' alt=\'\' /> to run the DFDL parser or serializer."}]}},{"section":"The supplied DFDL schemas parse UN/EDIFACT interchanges with or without new lines at the end of each segment, but will serialize interchanges without new lines. If you need to serialize with new lines, you can edit the <span class=\'filepath\'>EDIFACT-Service-Segments-4.1.xsd</span> file in the <span class=\'library\'>EDIFACT-Common</span> library and change the DFDL expression used by setting the <span class=\'varname\'>SegmentTerm</span> DFDL variable to the commented-out value."},{"section":"If you need to support UN/EDIFACT syntax version 3 instead of syntax version 4, you can edit the <span class=\'filepath\'>IBM_EDI_Format.xsd</span> file in the <span class=\'library\'>EDIFACT-Common</span> library. In this file, set the <span class=\'varname\'>RepeatSep</span> DFDL variable to take the default value \'+\' (plus) instead of \'*\' (asterisk)."},{"section":"If you need to support \',\' (comma) as the default decimal separator instead of \'.\' (period), you can edit the <span class=\'filepath\'>IBM_EDI_Format.xsd</span> file in the <span class=\'library\'>EDIFACT-Common</span> library. In this file, change the <span class=\'varname\'>DecimalSep</span> DFDL variable to take the default value \',\' (comma) instead of \'.\' (period)."},{"section":"The two shared libraries can be deployed to an integration node for use by message flows."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing a DFDL schema file","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20065_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"EDIFACT messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad09560_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas EDIFACT repository","link":"http://dfdlschemas.github.io/EDIFACT/","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Modeling HL7 data by using DFDL":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Modeling HL7 data by using DFDL","shortDescription":"Learn how to model HL7 healthcare data by using Data Format Description Language (DFDL).","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainSchema","helpLink":{"text":"IBM Knowledge Center","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Modeling HL7 messages"},{"title":"Editing DFDL schema"},{"title":"Testing DFDL schema"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"An understanding of how the DFDL editor can be used to model and parse HL7 data."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to model HL7 data by using DFDL schema."},{"section":"HL7 Version 2.x defines a series of electronic messages to support clinical, administrative, logistical and financial processes. Since 1987 the standard has been updated regularly, resulting in the latest version 2.7 which is backward compatible with earlier 2.x versions. HL7 Version 2 messages use a non-XML text syntax based on segments (usually separated by carriage-return) and one-character delimiters."},{"section":"Segments contain fields separated by the field delimiter. A field can have components separated by the component delimiter, and a component can have sub-components separated by the sub-component delimiter. The default delimiters are pipe (|) for the field separator, caret (^) for the component separator, and ampersand (&) for the sub-component separator. The tilde (~) is the default repetition separator for fields that repeat. Each segment starts with a 3-character initiator which identifies the segment type. Fields, components and sub-components do not have initiators."},{"section":"Every message starts with a special MSH segment, which includes a field that identifies the message type. The message type determines the expected segment types in the message. The MSH also defines the delimiters that are used by the message. Each segment of the message contains one specific category of information. Healthcare organizations are able to extend the standard by providing their own segments with 3-character initiators starting with \'Z\'."},{"section":"The DFDL schema editor is used to view the model and parse example HL7 message files."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Message modeling overview","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"Knowledge Center link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"Knowledge Center link to ","description":"HL7 messaging standard","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09565_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas HL7 repository","link":"http://dfdlschemas.github.io/HL7-v2.7/","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a shared library is imported into your workspace."},{"section":"Library <span class=\'library\'>HL7-2.7</span> contains a set of DFDL schemas that model HL7 Version 2.7 messages."},{"section":"The <span class=\'filepath\'>GenericHL7.xsd</span> schema models the overall HL7 message in a generic manner that allows it to parse all HL7 message types. Segments are defined in <span class=\'filepath\'>segments.xsd</span> comprising fields, components and sub-components defined in <span class=\'filepath\'>fields.xsd</span> and <span class=\'filepath\'>datatypes.xsd</span>. Z segments may be added to <span class=\'filepath\'>Z_Segments.xsd</span>. The <span class=\'filepath\'>HL7Format.xsd</span> schema defines suitable default values for DFDL properties."},{"section":"Test data files are included in the library."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Message modeling overview","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"Knowledge Center link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"Knowledge Center link to ","description":"HL7 messaging standard","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09565_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas HL7 repository","link":"http://dfdlschemas.github.io/HL7-v2.7/","type":"web"},{"title":"Knowledge Center link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Exploring the schemas","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The <span class=\'library\'>HL7-2.7</span> library is shown in the <span class=\'uicontrol\'>Application Development</span> view of your workspace."},{"section":"The <span class=\'filepath\'>GenericHL7.xsd</span> schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."},{"section":"The HL7 message is highlighted and it models a HL7 message consisting of the MSH segment followed by any number of other HL7 segments or Z segments. The main editor view shows the logical components of the message, such as elements and sequences. You can explore the HL7 message structure by expanding the elements."},{"section":"The physical rendering of each logical component is described by the DFDL properties in the <span class=\'uicontrol\'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png\' alt=\'\' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class=\'filepath\'>HL7Format.xsd</span> schema."},{"section":"Because the settings of delimiters in a HL7 message can vary, the DFDL property <span class=\'varname\'>Separator</span> is set dynamically using DFDL expressions that refer to DFDL variables. The variables have default values and are overridden by the settings in the MSH segment. You can see this if you expand the MSH element in the HL7 message and look at the definition of MSH.1.FieldSeparator. Hover over MSH.1.FieldSeparator, click on the yellow \'Go to\' arrow that pops up, and then in the <span class=\'filepath\'>segments.xsd</span> schema that opens click on the <span class=\'uicontrol\'>Variables</span> tab next to <span class=\'uicontrol\'>Representation Properties</span>. When you have finished close <span class=\'filepath\'>segments.xsd</span>."},{"section":"You will be test parsing example HL7 data by using the HL7 message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class=\'uicontrol\'>DFDL Test</span> perspective by clicking <span class=\'uicontrol\'>Window &gt; Open Perspective</span> and then clicking <span class=\'uicontrol\'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png\' alt=\'\' />)."},{"section":"<b>Tip:</b> If this <span class=\'uicontrol\'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class=\'uicontrol\'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class=\'uicontrol\'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The <span class=\'filepath\'>GenericHL7.xsd</span> DFDL schema is open in the DFDL editor. The HL7 message should be visible in the Messages section of the editor.","steps":{"type":"ordered","details":[{"details":"Test parse an example data file:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Parse Model</span> window opens."},{"details":"In the Message section, select <span class=\'uicontrol\'>HL7</span>."},{"details":"In the Parser Input section, select <span class=\'uicontrol\'>Content from a data file</span> then click <span class=\'uicontrol\'>Browse</span>."},{"details":"Select the <span class=\'filepath\'>A01.txt</span> file from <span class=\'library\'>HL7-2.7</span> then click <span class=\'uicontrol\'>OK</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>. If asked to confirm switching to the <span class=\'uicontrol\'>DFDL Test</span> perspective, click <span class=\'uicontrol\'>Yes</span>."}]}},{"details":"The results of the test parse are displayed. You should see the message <span class=\'systemoutput\'>Parsing completed successfully</span>. You can dismiss this message."},{"details":"You can view the parsed data file in the <span class=\'uicontrol\'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class=\'uicontrol\'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Test serialize the logical instance that resulted from the parse:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Serialize Model</span> window opens."},{"details":"In the Serializer Input section, select <span class=\'uicontrol\'>Content from \'DFDL Test - Logical Instance\'</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>."}]}},{"details":"The results of the test serialize are displayed. You should see the message <span class=\'systemoutput\'>Serialization completed successfully</span>. You can dismiss this message."},{"details":"You can view the serialized data file in the <span class=\'uicontrol\'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Repeat steps 1 through 6 for the <span class=\'filepath\'>ORU.txt</span> example data file."},{"details":"As an alternative to the toolbar buttons, you can also test from the <span class=\'uicontrol\'>DFDL Test - Parse</span> and <span class=\'uicontrol\'>DFDL Test - Serialize</span> views, using the <span class=\'uicontrol\'>Browse</span> button to select a data source and the green play icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png\' alt=\'\' /> to run the DFDL parser or serializer."}]}},{"section":"The shared library can be deployed to an integration node for use by message flows."},{"section":"IBM App Connect for Healthcare contains a more comprehensive set of DFDL schemas for HL7, including definitions of all HL7 message types. It also contains prebuilt patterns and connections enabling rapid clinical application and device integration for connected healthcare systems."}]},"helpLinks":{"title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Testing a DFDL schema file","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20065_.htm","type":"web"},{"title":"Knowledge Center link to ","description":"HL7 messaging standard","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09565_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas HL7 repository","link":"http://dfdlschemas.github.io/HL7-v2.7/","type":"web"},{"title":"Product link to ","description":"IBM App Connect for Healthcare","link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.healthcare.doc/ha00000.html","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Modeling Toshiba 4690 TLog data by using DFDL":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Modeling Toshiba 4690 TLog data by using DFDL","shortDescription":"Learn how to model Toshiba 4690 Point of Sale Transaction Log data by using Data Format Description Language (DFDL).","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainSchema","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Modeling TLog messages"},{"title":"Editing DFDL schema"},{"title":"Testing DFDL schema"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"An understanding of how the DFDL editor can be used to model and parse TLog data."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to model Toshiba 4690 TLog data by using DFDL schema."},{"section":"A Transaction Log (TLog) is a complete, detailed record of everything that occurs at a Point of Sale (PoS) terminal, including events that are not directly related to a sales transaction. The precise TLog record format is unique to a given PoS application. This tutorial considers Toshiba (ex-IBM) 4690 ACE v7r5 TLog, a delimited binary format emitted by 4690 PoS terminals."},{"section":"4690 TLog messages consist of a number of transactions, each of which comprises one or more transaction records (sometimes called \'strings\'). Each transaction starts with x\'22\' and ends with x\'220D0A\'. Within a transaction, the transaction records are separated by x\'222C22\'. Within a transaction record, each field is typically separated by x\'3A\', though some records use x\'223A22\'. Fields are either ASCII text, hex binary or a BCD variant specific to 4690, and are fixed or variable length."},{"section":"There are many different types of transaction record, and the first field identifies the type. Some of the record types have sub-types which are identified by a subsequent field or fields. In the DFDL model, the record type field is treated as an initiator, for performance, and record sub-types are identified using a discriminator on the appropriate field(s)."},{"section":"4690 Tlogs are invariably customized by each retailer by adding extra transaction records, typically to the 99 range, or by adding extra fields to the end of records."},{"section":"The DFDL schema editor is used to view the model and parse example 4690 TLog message files."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TLOG messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad16940_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas TLOG repository","link":"https://dfdlschemas.github.io/IBM4690-TLOG/","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a shared library is imported into your workspace."},{"section":"Library <span class=\'library\'>TLOG-ACE</span> contains a set of DFDL schemas that model Toshiba 4690 ACE v7r5 (or earlier) messages."},{"section":"The <span class=\'filepath\'>TlogAce.xsd</span> schema models a file of ACE transactions in a flexible way that enables all transaction records to be parsed."},{"section":"The <span class=\'filepath\'>TlogAceCommon.xsd</span> schema provides common definitions for reuse."},{"section":"The <span class=\'filepath\'>TlogAceCustom.xsd</span> schema can be used to support custom transaction records."},{"section":"The <span class=\'filepath\'>TlogAceTypes.xsd</span> schema provides reusable type definitions."},{"section":"The <span class=\'filepath\'>TlogAceFormat.xsd</span> schema defines suitable default values for DFDL properties."},{"section":"Test data files with the extension .dat are also included in the library."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TLOG messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad16940_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas TLOG repository","link":"https://dfdlschemas.github.io/IBM4690-TLOG/","type":"web"},{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Exploring the schemas","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The <span class=\'library\'>TLOG-ACE</span> library is shown in the <span class=\'uicontrol\'>Application Development</span> view of your workspace."},{"section":"The <span class=\'filepath\'>TlogAce.xsd</span> schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."},{"section":"The Transactions message is highlighted and it models a file of 4690 ACE transactions. Each Transaction consists of any number of transaction records. The main editor view shows the logical components of the message, such as elements, sequences and choices. You can explore the Transactions message structure by expanding the elements."},{"section":"The physical rendering of each logical component is described by the DFDL properties in the <span class=\'uicontrol\'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png\' alt=\'\' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class=\'filepath\'>TlogAceFormat.xsd</span> schema."},{"section":"You will be test parsing example 4690 ACE data by using the Transactions message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class=\'uicontrol\'>DFDL Test</span> perspective by clicking <span class=\'uicontrol\'>Window &gt; Open Perspective</span> and then clicking <span class=\'uicontrol\'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png\' alt=\'\' />)."},{"section":"<b>Tip:</b> If this <span class=\'uicontrol\'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class=\'uicontrol\'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class=\'uicontrol\'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The <span class=\'filepath\'>TlogAce.xsd</span> DFDL schema is open in the DFDL editor. The Transactions message should be visible in the Messages section of the editor.","steps":{"type":"ordered","details":[{"details":"Test parse an example data file:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Parse Model</span> window opens."},{"details":"In the Message section, select <span class=\'uicontrol\'>Transactions</span>."},{"details":"In the Parser Input section, select <span class=\'uicontrol\'>Content from a data file</span> then click <span class=\'uicontrol\'>Browse</span>."},{"details":"Select the <span class=\'filepath\'>ace_00_01.dat</span> file from <span class=\'library\'>TLOG-ACE</span> then click <span class=\'uicontrol\'>OK</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>. If asked to confirm switching to the <span class=\'uicontrol\'>DFDL Test</span> perspective, click <span class=\'uicontrol\'>Yes</span>."}]}},{"details":"The results of the test parse are displayed. You should see the message <span class=\'systemoutput\'>Parsing completed successfully</span>. You can dismiss this message."},{"details":"You can view the parsed data file in the <span class=\'uicontrol\'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class=\'uicontrol\'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Test serialize the logical instance that resulted from the parse:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Serialize Model</span> window opens."},{"details":"In the Serializer Input section, select <span class=\'uicontrol\'>Content from \'DFDL Test - Logical Instance\'</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>."}]}},{"details":"The results of the test serialize are displayed. You should see the message <span class=\'systemoutput\'>Serialization completed successfully</span>. You can dismiss this message."},{"details":"You can view the serialized data file in the <span class=\'uicontrol\'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Repeat steps 1 through 6 for the other example data files <span class=\'filepath\'>ace_02_03_07.dat</span>, <span class=\'filepath\'>ace_05_97-05.dat</span> and <span class=\'filepath\'>ace_80-01_98_13_97-13.dat</span>."},{"details":"As an alternative to the toolbar buttons, you can also test from the <span class=\'uicontrol\'>DFDL Test - Parse</span> and <span class=\'uicontrol\'>DFDL Test - Serialize</span> views, using the <span class=\'uicontrol\'>Browse</span> button to select a data source and the green play icon <img src=\'https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png\' alt=\'\' /> to run the DFDL parser or serializer."}]}},{"section":"The shared library can be deployed to an integration node for use by message flows."},{"section":"DFDL schemas for Toshiba 4690 Supermarket Application (SA) are available in the DFDLSchemas TLOG repository on GitHub."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing a DFDL schema file","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20065_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"TLOG messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ad16940_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas TLOG repository","link":"https://dfdlschemas.github.io/IBM4690-TLOG/","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"Modeling ISO 8583 data by using DFDL":{"version":"0.6","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Modeling ISO 8583 data by using DFDL","shortDescription":"Learn how to model ISO 8583 data by using Data Format Description Language (DFDL).","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainSchema","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Modeling ISO8583 messages"},{"title":"Editing DFDL schema"},{"title":"Testing DFDL schema"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"An understanding of how the DFDL editor can be used to model and parse ISO 8583 data."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates the modeling of ISO 8583 data by using DFDL schema."},{"section":"ISO 8583 is a message format for representing card-based transactions including ATM and credit card transactions. There are three releases of the standard: 1987, 1993 and 2003."},{"section":"ISO 8583 messages consist of a number of optional fixed-length or prefixed-length fields without initiators. The presence of a given field in the message is indicated by the setting of a corresponding bit in a bitmap. The bitmaps occur near the start of the message, and can either be in \'packed\' format where each bitmap is encoded as 8 bytes of binary data (8 bits per byte), or in \'unpacked\' format where each bitmap is encoded as 16 text characters (4 bits per character)."},{"section":"The DFDL schema editor is used to view the model and parse example ISO 8583 data files."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.html","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"ISO8583 messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd34064_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas ISO8583 repository","link":"http://dfdlschemas.github.io/ISO8583/","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a shared library is imported into your workspace."},{"section":"Library <span class=\'library\'>ISO8583</span> contains a set of DFDL schemas that model ISO8583 1987 messages with \'packed\' bitmaps."},{"section":"The <span class=\'filepath\'>ISO8583_1987.xsd</span> schema models the overall ISO 8583 message using a set of re-usable types defined in the <span class=\'filepath\'>ISO8583Types.xsd</span>. The <span class=\'filepath\'>ISO8583Format.xsd</span> schema defines suitable default values for DFDL properties."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Message modeling overview","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd40430_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"How to model data with DFDL","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20125_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"ISO8583 messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd34064_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas ISO8583 repository","link":"http://dfdlschemas.github.io/ISO8583/","type":"web"},{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Exploring the schemas","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The <span class=\'library\'>ISO8583</span> library is shown in the <span class=\'uicontrol\'>Application Development</span> view of your workspace."},{"section":"The <span class=\'filepath\'>ISO8583_1987.xsd</span> schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."},{"section":"The ISO8583_1987 message is highlighted and models an ISO 8583 message with \'packed\' bitmaps. The main editor view shows the logical components of the message such as elements and sequences. You can explore the ISO8583_1987 message structure by expanding the elements."},{"section":"The physical rendering of each logical component is described by the DFDL properties in the <span class=\'uicontrol\'>Representation Properties</span> tab. DFDL properties can either be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png\' alt=\'\' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class=\'filepath\'>ISO8583Format.xsd</span> schema."},{"section":"The presence or absence of each element in the message is given by a corresponding bit in one of the bitmaps. The DFDL <span class=\'varname\'>Occurs Count Kind</span> property for each element is set to \'expression\', and the DFDL <span class=\'varname\'>Occurs Count</span> property is a DFDL expression that refers to the corresponding bit in the bitmap. You can see this if you select any of the child elements with a numeric suffix, and scroll down the <span class=\'uicontrol\'>Representation Properties</span> tab until you reach the \'Occurrences\' section. The bitmaps themselves can be viewed by expanding the Bitmaps_Group group reference. The secondary bitmap is itself optional and its presence or absence is given by Bit001."},{"section":"You will be test parsing example ISO 8583 data using the ISO8583_1987 message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class=\'uicontrol\'>DFDL Test</span> perspective by clicking <span class=\'uicontrol\'>Window &gt; Open Perspective</span> and then clicking <span class=\'uicontrol\'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png\' alt=\'\' />)."},{"section":"<b>Tip:</b> If this <span class=\'uicontrol\'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class=\'uicontrol\'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class=\'uicontrol\'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Working with DFDL schema files","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20061_.htm","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Follow these steps to complete the tutorial","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"The <span class=\'filepath\'>ISO8583_1987.xsd</span> DFDL schema is open in the DFDL editor. The ISO8583_1987 message should be highlighted in green.","steps":{"type":"ordered","details":[{"details":"Test parse an example data file:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Parse Model</span> window opens."},{"details":"In the Message section, select <span class=\'uicontrol\'>ISO8583_1987</span>."},{"details":"In the Parser Input section, select <span class=\'uicontrol\'>Content from a data file</span> then click <span class=\'uicontrol\'>Browse</span>."},{"details":"Select the <span class=\'filepath\'>ISO8583_1987_Test_Data_1.txt</span> file from <span class=\'library\'>ISO8583_1987</span> then click <span class=\'uicontrol\'>OK</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>. If asked to confirm switching to the <span class=\'uicontrol\'>DFDL Test</span> perspective, click <span class=\'uicontrol\'>Yes</span>."}]}},{"details":"The results of the test parse are displayed. You should see the message <span class=\'systemoutput\'>Parsing completed successfully</span>. You can dismiss this message."},{"details":"You can view the parsed data file in the <span class=\'uicontrol\'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class=\'uicontrol\'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Test serialize the logical instance that resulted from the parse:","substeps":{"type":"ordered","details":[{"details":"Click the <span class=\'uicontrol\'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class=\'wintitle\'>Test Serialize Model</span> window opens."},{"details":"In the Serializer Input section, select <span class=\'uicontrol\'>Content from a DFDL Test - Logical Instance</span>."},{"details":"Set the Encoding to <span class=\'uicontrol\'>ASCII</span>."},{"details":"Click <span class=\'uicontrol\'>OK</span>."}]}},{"details":"The results of the test serialize are displayed. You should see the message <span class=\'systemoutput\'>Serialization completed successfully</span>. You can dismiss this message."},{"details":"You can view the serialized data file in the <span class=\'uicontrol\'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class=\'uicontrol\'>DFDL Test - Trace</span> view."},{"details":"Repeat steps 1 through 6 for the <span class=\'filepath\'>ISO8583_1987_Test_Data_2.txt</span> example data file. This is an example of message type 0200."},{"details":"As an alternative to the toolbar buttons, you can also test from the <span class=\'uicontrol\'>DFDL Test - Parse</span> and <span class=\'uicontrol\'>DFDL Test - Serialize</span> views, using the <span class=\'uicontrol\'>Browse</span> button to select a data source and the green play icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png\' alt=\'\' /> to run the DFDL parser or serializer."}]}},{"section":"The supplied DFDL schemas will parse ISO 8583 1987 messages with \'packed\' bitmaps. If you need to parse 1993 messages, or messages with \'unpacked\' bitmaps, there are suitable DFDL schemas in the ISO8583 repository of the DFDLSchemas organization on GitHub."},{"section":"The shared library can be deployed to an integration node for use by message flows."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Testing a DFDL schema file","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/df20065_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"ISO8583 messaging standard","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bd34064_.htm","type":"web"},{"title":"GitHub link to ","description":"DFDLSchemas ISO8583 repository","link":"http://dfdlschemas.github.io/ISO8583/","type":"web"}]},"exits":{"title":"Run Exits","details":[{"name":"Clean Up","description":"Clean up and remove any changes in your workspace made by the tutorial.","method":"cleanUp()"}]}}}}},"JSON - Using a Compute node to create a JSON Object message":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON - Using a Compute node to create a JSON Object message","shortDescription":"Learn how to use a Compute node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"Example_JSONObject_ESQL","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Compute node"},{"title":"JSON writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms XML to JSON data using ESQL."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a JSON Object output structure using a Compute node (whose behaviour is based on ESQL), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures, or create entirely new data structures from scratch. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node (which uses a graphical user interface) and a JavaCompute node (which uses Java). This tutorial focusses on creating a JSON Object payload from scratch. Other tutorials similar to this one focus on a JSON Array payload and other transformation mechanisms."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Example_JSONObject_ESQL</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Example_JSONObject_ESQL</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Next you will test the message flow using a local integration server, which is created from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The imported message flow <span class=\'application\'>Example_JSONObject_ESQL</span> should still be open. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>&lt;Message&gt;&lt;Country&gt;&lt;Name&gt;UK&lt;/Name&gt;&lt;Greeting&gt;Hello&lt;/Greeting&gt;&lt;/Country&gt;&lt;/Message&gt;</code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The XML will have been transformed into a JSON Object messag :<br><code>{\\"Message\\":{\\"Country\\":{\\"Name\\":\\"UK\\",\\"Greeting\\":\\"Hello\\"}}}</code>"}]}}]}}}}},"JSON - Using a Compute node to create a JSON Array message":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON - Using a Compute node to create a JSON Array message","shortDescription":"Learn how to use a Compute node to create a new JSON Array message in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"Example_JSONArray_ESQL","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Compute node"},{"title":"JSON writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms XML to JSON data using ESQL."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a JSON Array output structure using a Compute node (whose behaviour is based on ESQL), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures, or create entirely new data structures from scratch. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node (which uses a graphical user interface) and a JavaCompute node (which uses Java). This tutorial focusses on creating a JSON Array payload from scratch. Other tutorials similar to this one focus on a JSON Object payload and other transformation mechanisms."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Example_JSONArray_ESQL</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Example_JSONArray_ESQL</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Next you will test the message flow using a local integration server, which is created from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The imported message flow <span class=\'application\'>Example_JSONArray_ESQL</span> should still be open. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>&lt;Message&gt;<br>  &lt;Country&gt;<br>    &lt;Name&gt;UK&lt;/Name&gt;<br>    &lt;Greeting&gt;Hello&lt;/Greeting&gt;<br>  &lt;/Country&gt;<br>  &lt;Country&gt;<br>    &lt;Name>France&lt;/Name&gt;<br>    &lt;Greeting&gt;Bonjour&lt;/Greeting&gt;<br>  &lt;/Country&gt;<br>  &lt;Country&gt;<br>    &lt;Name&gt;Germany&lt;/Name&gt;<br>    &lt;Greeting&gt;Guten Tag&lt;/Greeting&gt;<br>  &lt;/Country&gt;<br>&lt;/Message&gt;</code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The XML will have been transformed into a JSON Array message:<br><code>[{\\"Name\\":\\"UK\\", \\"Greeting\\":\\"Hello\\"},{\\"Name\\":\\"France\\",\\"Greeting\\":\\"Bonjour\\"},{\\"Name\\":\\"Germany\\",\\"Greeting\\":\\"Guten Tag\\"}]</code>"}]}}]}}}}},"JSON - Using a Mapping node to create a JSON Object message":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON - Using a Mapping node to create a JSON Object message","shortDescription":"Learn how to use a Mapping node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"Example_JSONObject_Mapping","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Mapping node"},{"title":"JSON writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms XML to JSON data using a Mapping."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a JSON Object output structure using a Mapping node (whose behaviour is based on a graphical map), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures, or create entirely new data structures from scratch. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node (which uses a graphical user interface) and a JavaCompute node (which uses Java). This tutorial focusses on creating a JSON Object payload from scratch. Other tutorials similar to this one focus on a JSON Array payload and other transformation mechanisms."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Example_JSONObject_Mapping</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Example_JSONObject_Mapping</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Next you will test the message flow using a local integration server, which is created from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The imported message flow <span class=\'application\'>Example_JSONObject_Mapping</span> should still be open. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>&lt;Message&gt;&lt;Country&gt;&lt;Name&gt;UK&lt;/Name&gt;&lt;Greeting&gt;Hello&lt;/Greeting&gt;&lt;/Country&gt;&lt;/Message&gt;</code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The XML will have been transformed into a JSON Object messag :<br><code>{\\"Message\\":{\\"Country\\":{\\"Name\\":\\"UK\\",\\"Greeting\\":\\"Hello\\"}}}</code>"}]}}]}}}}},"JSON - Using a Mapping node to create a JSON Array message":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON - Using a Mapping node to create a JSON Array message","shortDescription":"Learn how to use a Mapping node to create a new JSON Array message in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"Example_JSONArray_Mapping","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Mapping node"},{"title":"JSON writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms XML to JSON data using a Mapping."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a JSON Object output structure using a Mapping node (whose behaviour is based on a graphical map), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures, or create entirely new data structures from scratch. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node (which uses a graphical user interface) and a JavaCompute node (which uses Java). This tutorial focusses on creating a JSON Array payload from scratch. Other tutorials similar to this one focus on a JSON Object payload and other transformation mechanisms."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Example_JSONArray_Mapping</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Example_JSONArray_Mapping</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Next you will test the message flow using a local integration server, which is created from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The imported message flow <span class=\'application\'>Example_JSONArray_Mapping</span> should still be open. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>&lt;Message&gt;&lt;Country&gt;&lt;Name&gt;UK&lt;/Name&gt;&lt;Greeting&gt;Hello&lt;/Greeting&gt;&lt;/Country&gt;&lt;/Message&gt;</code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The XML will have been transformed into a JSON Array message:<br><code>[{\\"Name\\":\\"UK\\", \\"Greeting\\":\\"Hello\\"},{\\"Name\\":\\"France\\",\\"Greeting\\":\\"Bonjour\\"},{\\"Name\\":\\"Germany\\",\\"Greeting\\":\\"Guten Tag\\"}]</code>"}]}}]}}}}},"JSON - Using a JavaCompute node to create a JSON Object message":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON - Using a JavaCompute node to create a JSON Object message","shortDescription":"Learn how to use a JavaCompute node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"Example_JSONObject_Java","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JavaCompute node"},{"title":"JSON writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms XML to JSON data using Java."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a JSON Object output structure using a JavaCompute node (whose behaviour is based on Java), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures, or create entirely new data structures from scratch. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node (which uses a graphical user interface) and a JavaCompute node (which uses Java). This tutorial focusses on creating a JSON Object payload from scratch. Other tutorials similar to this one focus on a JSON Array payload and other transformation mechanisms."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Example_JSONObject_Java</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Example_JSONObject_Java</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Next you will test the message flow using a local integration server, which is created from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The imported message flow <span class=\'application\'>Example_JSONObject_Java</span> should still be open. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>&lt;Message&gt;&lt;Country&gt;&lt;Name&gt;UK&lt;/Name&gt;&lt;Greeting&gt;Hello&lt;/Greeting&gt;&lt;/Country&gt;&lt;/Message&gt;</code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The XML will have been transformed into a JSON Object message:<br><code>{\\"Message\\":{\\"Country\\":{\\"Name\\":\\"UK\\",\\"Greeting\\":\\"Hello\\"}}}</code>"}]}}]}}}}},"JSON - Using a JavaCompute node to create a JSON Array message":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON - Using a JavaCompute node to create a JSON Array message","shortDescription":"Learn how to use a JavaCompute node to create a new JSON Array message in a message flow driven by an XML message over HTTP.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"Example_JSONArray_Java","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JavaCompute node"},{"title":"JSON writing"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use App Connect Enterprise to create and drive a message flow which transforms XML to JSON data using Java."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a JSON Array output structure using a JavaCompute node (whose behaviour is based on Java), and sends this back to the HTTP request."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures, or create entirely new data structures from scratch. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node (which uses a graphical user interface) and a JavaCompute node (which uses Java). This tutorial focusses on creating a JSON Array payload from scratch. Other tutorials similar to this one focus on a JSON Object payload and other transformation mechanisms."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>Example_JSONArray_Java</span> application will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>Example_JSONArray_Java</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare an Integration Server to test the message flow","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"<b>Create an Integration Server</b>","steps":{"type":"ordered","details":[{"details":"Next you will test the message flow using a local integration server, which is created from within the Toolkit. If you\'re using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href=\'https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bn03995_.html\'>IBM Documentation</a>, but we will progress in this tutorial assuming you\'re using our most up to date Toolkit capabilities."},{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"The imported message flow <span class=\'application\'>Example_JSONArray_ESQL</span> should still be open. At the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server that you just created and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the provided input message:<br><code>&lt;Message&gt;<br>  &lt;Country&gt;<br>    &lt;Name&gt;UK&lt;/Name&gt;<br>    &lt;Greeting&gt;Hello&lt;/Greeting&gt;<br>  &lt;/Country&gt;<br>  &lt;Country&gt;<br>    &lt;Name>France&lt;/Name&gt;<br>    &lt;Greeting&gt;Bonjour&lt;/Greeting&gt;<br>  &lt;/Country&gt;<br>  &lt;Country&gt;<br>    &lt;Name&gt;Germany&lt;/Name&gt;<br>    &lt;Greeting&gt;Guten Tag&lt;/Greeting&gt;<br>  &lt;/Country&gt;<br>&lt;/Message&gt;</code><br>Click Send to push the data into the flow."},{"details":"You should receive a reply message from the flow. The XML will have been transformed into a JSON Array message:<br><code>[{\\"Name\\":\\"UK\\", \\"Greeting\\":\\"Hello\\"},{\\"Name\\":\\"France\\",\\"Greeting\\":\\"Bonjour\\"},{\\"Name\\":\\"Germany\\",\\"Greeting\\":\\"Guten Tag\\"}]</code>"}]}}]}}}}},"Unit Testing - Generating test data and unit tests from the runtime":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Unit Testing - Generating test data and unit tests from the runtime","shortDescription":"Learn how to record messages passing through the runtime, and use them to automate the generation of large volumes of unit tests.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"ExampleRouterFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java Unit Testing"},{"title":"Command: ibmint generate tests"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"As part of an automated process, use IBM App Connect Enterprise to record message assembly files which represent the in-memory logical tree used as messages travel through a deployed message flow."},{"title":"Execute the ibmint generate tests command to use the recorded messages for the automated construction of Java unit tests."}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial provides a simple message flow in an application that receives a JSON input message over HTTP and then routes the data (using a Route node) and transforms the data (using a graphical mapping node) before responding to the requesting client with an HTTPReply node. Three input messages are provided, each containing different data causing the messages to pass through different flow paths."},{"section":"The tutorial provides the message flow already constructed, describes how to configure an integration server to record message assembly files, and then uses the Toolkit\'s Flow Exerciser to pass multiple messages through the flow. The captured message assembly files are used to generate unit tests for the flow using the <code>ibmint generate tests</code> command. Finally, the tutorial describes how to import the resulting unit tests back into the Toolkit, from where they are executed."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing unit tests using Test Projects","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Developing unit tests using the command: ibmint generate tests","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import a project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the application named <span class=\'application\'>ExampleRouterApp</span> will be added to your workspace."},{"section":"<span class=\'application\'>ExampleRouterApp</span> provides a single message flow named <span class=\'resource\'>ExampleRouterFlow</span> which receives data over HTTP."},{"section":"The HTTPInput node is configured to expect a JSON message. The next node in the flow is a Route node, which routes messages based upon the value they carry in the Country data field - either GB, US or DE. Each message is then transformed using a graphical mapping node. The HTTPReply node at the end of the flow returns the JSON to the requester."},{"section":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."},{"section":"Now move to the Prepare section where we will send data through the flow, and use this to generate some unit tests."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Configure the integration server to record message assembly files for all messages going through the message flow</b>","steps":{"type":"ordered","details":[{"details":"In the last instruction you created an integration server named <span class=\'application\'>TEST_SERVER</span>. Locate the project in your Toolkit workspace which has this name (you will find it in the section labelled <span class=\'application\'>Independent Resources</span>). This project represents the integration server\'s working directory that has inside it all of its configuration files. Right-click the <span class=\'application\'>server.conf.yaml</span> file and select <span class=\'application\'>Open with text editor</span>. Find the section shown below, uncomment the entries and specify a <span class=\'application\'>recordedMessagePath</span> of your choice where the server will record message assembly files and enable recording by settng <span class=\'application\'>recordAllMessages</span> to <span class=\'application\'>true</span>:<br><code>RecordedMessageManager:&nbsp;<br>&nbsp;&nbsp;recordedMessagePath: \'C:\\\\temp\\\\demo\'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Set the directory to store recorded messages<br>&nbsp;&nbsp;recordAllMessages: true&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# Set to \'true\' to enabling recording of messages from all message flows</code><br> Save and close the file."},{"details":"The integration server will need to be restarted to pick up the edits which were just made to its configuration. From the Integration Explorer view in the bottom left corner of the Toolkit, right-click <span class=\'application\'>TEST_SERVER</span> and select the option to <span class=\'uicontrol\'>Stop</span>. Once the server has stopped, right-click it again and select the option to <span class=\'uicontrol\'>Start</span>."}]}},{"section":"<b>Testing using the Flow Exerciser</b>","steps":{"type":"ordered","details":[{"details":"Open <span class=\'application\'>ExampleRouterFlow</span> and at the top of the flow canvas, click the Flow Exerciser icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' />. If prompted (which you will be if your Toolkit has known connections to more than one server), select the <span class=\'application\'>TEST_SERVER</span> integration server and agree to the confirmation dialog which warns that the message flow is owned by an Application. After a few seconds another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."},{"details":"Back at the top of the flow, click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the first provided input message named <span class=\'application\'>InputMessageJoeBloggs</span>:<br><code>{\\"FirstName\\": \\"Joe\\", \\"LastName\\": \\"Bloggs\\", \\"Country\\": \\"GB\\"}</code><br>Click Send to push the data into the flow. You should receive a reply message from the flow that looks like this:<br><code>{\\"Message\\":\\"Joe Bloggs lives in Great Britain\\"}</code><br>Click close on the testing dialog"},{"details":"We will now run a second message through the flow. Click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the second provided input message named <span class=\'application\'>InputMessageJohnDoe</span>:<br><code>{\\"FirstName\\": \\"John\\", \\"LastName\\": \\"Doe\\", \\"Country\\": \\"US\\"}</code><br>Click Send to push the data into the flow. You should receive a reply message from the flow that looks like this:<br><code>{\\"Message\\":\\"John Doe lives in the United States of America\\"}</code><br>Click close on the testing dialog"},{"details":"We will now run a third message through the flow. Click on the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> and when the dialog opens, select the third provided input message named <span class=\'application\'>InputMessageOttoNormalverbraucher</span>:<br><code>{\\"FirstName\\": \\"Otto\\", \\"LastName\\": \\"Normalverbraucher\\", \\"Country\\": \\"DE\\"}</code><br>Click Send to push the data into the flow. You should receive a reply message from the flow that looks like this:<br><code>{\\"Message\\":\\"Otto Normalverbraucher lives in Deutschland\\"}</code><br>Click close on the testing dialog"}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Generate the Unit Tests","steps":{"type":"ordered","details":[{"details":"Navigate to the directory location which you configured earlier in the tutorial in the server.conf.yaml for capturing recorded messages. The example given used <span class=\'Application\'>C:\\\\temp\\\\demo</span>. You will find a subdirectory named after the application, and inside that a subdirectory named after the message flow. This should contain nine message assembly files have been recorded. There will be a separate file for each message which passed along each wire in the flow. We used three input messages, and each flow run traversed three wires between message flow nodes. For example, the message assembly files will be named a bit like this:<br><code>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F06A0-00000002-0.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F0525-00000001-0.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F0525-00000001-1.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F0525-00000001-2.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F06A0-00000002-0.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F06A0-00000002-1.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F06A0-00000002-2.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F071E-00000003-0.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F071E-00000003-1.mxml<br>C:\\\\temp\\\\demo\\\\ExampleRouterApp\\\\ExampleRouterFlow\\\\0000BD9C-608F071E-00000003-2.mxml</code>"},{"details":"Open a <span class=\'Application\'>Command console</span> and execute the following command, which will generate unit tests based upon the recorded message assembly files.<br><code>ibmint generate tests --recorded-messages C:\\\\temp\\\\demo --output-test-project C:\\\\temp\\\\demo\\\\Test_ExampleRouterApp --java-class com.ibm.dev.MyTests<br>BIP15183I: Successfully generated test-suite containing \'6\' test-cases and written it to \'C:\\\\temp\\\\demo\\\\Test_ExampleRouterApp\'.<br>BIP8071I: Successful command completion.</code>"},{"details":"Return to the Toolkit, and select from the menu File > New > Test Project. In the resulting dialog specify the Project name to be <span class=\'Application\'>Test_ExampleRouterApp</span>."},{"details":"Right-click the <b>Test_ExampleRouterApp</b> test project which was just created and select <b>Import</b>. In the resulting dialog, expand the <b>IBM Integration</b> section and select the option to <b>Import generated test files into a Test Project.</b> Click Next and on the next page of the wizard, for the property <b>From directory</b>, use the Browse button to navigate to the output folder from the earlier command at location <code>C:\\\\temp\\\\demo\\\\Test_ExampleRouterApp</code>. When you select this directory, the two panels in the wizard will show the subdirectory structure of this location, and the files it contains on your filesystem. In the left window select the top level folder <b>Test_ExampleRouterApp</b>. This will cause all the subdirectories and files to be selected. Specifically it is very important that the testproject.descriptor file is included, because this links the Test Project to the actual application project which is under test. This reference tells the Toolkit which artifacts need to be deployed when you run the tests. The <b>Into folder</b> property should already be set to <b>Test_ExampleRouterApp</b>. Click Finish."},{"details":"Right click the Test Project named <b>Test_ExampleRouterApp</b> and choose the option <b>Run Test Project</b>. After a few seconds, the Console view should be opened, which will show an independent integration server being started in order to execute the unit test. There is no further deployment step required - This is taken care of for you so that the application under test, and the Test Project which we just created are automatically available to the server."},{"details":"The JUnit view will open in the top left corner (just to the right of the Application Development view and the Patterns Explorer) and will show that the test which was generated ran successfully and passed."}]}},{"section":"This tutorial has shown how to record messages passing through the runtime, and use them to automate the generation of large volumes of unit tests."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Unit Testing your message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Unit Testing - Creating a Message Assembly file for use with Test Driven Development":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Unit Testing - Creating a Message Assembly file for use with Test Driven Development","shortDescription":"Learn how to use the Message Assembly Editor for viewing, creating and updating Message Assembly (.mxml) files for use with Test Driven Development.","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"ExampleRouterFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java Unit Testing"},{"title":"Message Assembly Editor"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use the Message Assembly Editor to create a message assembly file which represents the logical tree for a JSON message."},{"title":"Update a provided unit test for a Compute node to use the message assembly file you created."},{"title":"Show the unit test fails until you change the Compute node\'s ESQL to match the new output, and then show the unit test passes!"}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial provides a simple message flow (HTTPInput > Compute > HTTPReply) in an application that receives an XML input message representing a simple fictitious purchase order over HTTP and simply echoes it back to the requester. A Test Project is provided which contains a simple unit test which uses two message assembly files representing the logical tree immediately before and after the Compute node in the flow."},{"section":"The tutorial describes how to use the message assembly editor to create a new message assembly file to represent a JSON output tree. The unit test is updated to reference the new output, and will fail until the message flow\'s Compute node ESQL is also updated to generate the new output. This demonstrates a very simplified piece of test driven development."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing unit tests using Test Projects","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Using the Message Assembly Editor","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import a project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and two projects will be added to your workspace. The application named <span class=\'application\'>ExampleTestDrivenDevelopment</span> provides a single message flow named <span class=\'resource\'>PurchaseFlow</span> which receives data over HTTP. The test project named <span class=\'application\'>ExampleTestDrivenDevelopment_IntegrationTest</span> contains two example message assembly files and a simple unit test for the Compute node in the message flow."},{"section":"Now move to the Prepare section where we will send data through the flow, experience the message assembly editor and do some test driven development using the scenario."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Run the provided unit test which should PASS</b>","steps":{"type":"ordered","details":[{"details":"The provided Test project, <span class=\'application\'>ExampleTestDrivenDevelopment_IntegrationTest</span> contains a reference to the application <span class=\'application\'>ExampleTestDrivenDevelopment</span>. Right-click the test project <span class=\'application\'>ExampleTestDrivenDevelopment_IntegrationTest</span> and choose the option to <span class=\'application\'>Run Test Project</span>. After a few seconds, an integration server will be started which runs the test. The console window at the base of the Toolkit should show the progress of the server being started to run the test. Final results are reported in the JUnit view in the top left of the Toolkit."}]}},{"section":"<b>Create a new Message Assembly file to represent a JSON output tree</b>","steps":{"type":"ordered","details":[{"details":"Right-click the resources folder in the <span class=\'application\'>ExampleTestDrivenDevelopment_IntegrationTest</span> and choose the menu option <span class=\'application\'>New > Message Assembly</span>. Type the Message assembly name of PurchaseFlow_Compute_output_JSON.mxml and click Finish."},{"details":"The new Message Assembly file will open in the Message Assembly editor. You will see the root folder named MessageAssembly. Right-click <b>MessageAssembly</b> and choose <b>Add Message</b>. When the <b>Create Message Tree</b> dialog launches, keep the <b>Message Tree Transport Protocol</b> as <b>HTTP</b> and for <b>Message Tree Body Parser</b>, select <b>JSON (Object)</b> and click Finish. Expand the JSON folder, and right-click the <b>Data</b> root element and select <b>Add JSON Child Object</b>. Rename <b>NewObject</b> to be <b>Name</b>, leave its <b>Type</b> as <b>CHARACTER</b>. In the <b>Value</b> column insert the value <b>Joe Bloggs</b>. Add another <b>JSON Child Object</b> named <b>Total</b>, change its data type to be <b>DECIMAL</b>, and make its value <b>15.98</b>. Save the file."},{"details":"To keep the message flow coding as simple as possible, we will rely on the HTTPReply node to construct the required HTTP header on the message at the end of the flow. For this reason, right click the HTTPInputHeader and choose the option to <b>Delete</b> the header. Save the file."},{"details":"In order to match the input test message, you also need to expand the Properties header, locate the ReplyIdentifier field and in the value column insert forty-eight zeros! To avoid making a mistake, you can copy and paste the value from the input message assembly file, or from here: <code>000000000000000000000000000000000000000000000000</code><br>Save the file."}]}},{"section":"<b>Edit the unit test to use the new Message Assembly file</b>","steps":{"type":"ordered","details":[{"details":"In the Test project <span class=\'application\'>ExampleTestDrivenDevelopment_IntegrationTest</span> open the file <span class=\'application\'>ExampleTestDrivenDevelopment_PurchaseFlow_Compute_0001_IntegrationTest.java</span> and edit the reference to the output message assembly file on Line 71 from<br><code>String messageAssemblyPath = \\"PurchaseFlow_Compute_output_data.mxml\\";</code> to <br><code>String messageAssemblyPath = \\"PurchaseFlow_Compute_output_JSON.mxml\\";</code><br>Save the file."}]}},{"section":"<b>Run the provided unit test again which should now FAIL</b>","steps":{"type":"ordered","details":[{"details":"Right-click the test project <span class=\'application\'>ExampleTestDrivenDevelopment_IntegrationTest</span> and choose the option to <span class=\'application\'>Run Test Project</span>. Just like before, after a few seconds, an integration server will be started which runs the test. This time the results will report that the test has failed, because the message flow logic has not yet been changed to generate the new JSON output. The error message will say something like <code>Actual name \\"XMLNSC\\" (path: /Root/XMLNSC) was different to expected name of \\"JSON\\"</code>. Move to the Run section of the tutorial where we will do the required test driven development and fix the message flow to generate the new output, before finally re-running the test."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Edit the Compute node ESQL to generate the JSON output</b>","steps":{"type":"ordered","details":[{"details":"Open <span class=\'application\'>PurchaseFlow_Compute.esql</span> in the application <span class=\'application\'>ExampleTestDrivenDevelopment</span>. Change the code as follows:<br><code>&nbsp;&nbsp;CREATE FUNCTION Main() RETURNS BOOLEAN<br>&nbsp;&nbsp;BEGIN<br>&nbsp;&nbsp;&nbsp;&nbsp;DECLARE Total DECIMAL 0;<br>&nbsp;&nbsp;&nbsp;&nbsp;DECLARE PurchaseRef REFERENCE TO InputRoot.XMLNSC.MyOrder.Items;<br>&nbsp;&nbsp;&nbsp;&nbsp;MOVE PurchaseRef FIRSTCHILD;<br>&nbsp;&nbsp;&nbsp;&nbsp;WHILE LASTMOVE(PurchaseRef) DO<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;SET Total = Total + CAST(PurchaseRef AS DECIMAL);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MOVE PurchaseRef NEXTSIBLING;<br>&nbsp;&nbsp;&nbsp;&nbsp;END WHILE;<br>&nbsp;&nbsp;&nbsp;&nbsp;SET OutputRoot.Properties = InputRoot.Properties;<br>&nbsp;&nbsp;&nbsp;&nbsp;SET OutputRoot.JSON.Data.Name = InputRoot.XMLNSC.MyOrder.Name;<br>&nbsp;&nbsp;&nbsp;&nbsp;SET OutputRoot.JSON.Data.Total = Total;<br>&nbsp;&nbsp;&nbsp;&nbsp;RETURN TRUE;<br>&nbsp;&nbsp;END;<br></code>Save and close the ESQL file."}]}},{"section":"<b>Run the provided unit test again which should now PASS</b>","steps":{"type":"ordered","details":[{"details":"Right-click the test project <span class=\'application\'>ExampleTestDrivenDevelopment_IntegrationTest</span> and choose the option to <span class=\'application\'>Run Test Project</span>. Just like before, after a few seconds, an integration server will be started which runs the test. This time the results will report that the test has now succeeded, because the message flow logic now correctly generates the JSON output tree which matches to the Message Assembly file which we created earlier in the tutorial."}]}},{"section":"This tutorial has shown how to use the message assembly editor and do test driven development whilst developing message flows."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Unit Testing your message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Unit Testing - Building and executing unit tests outside the Toolkit":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Unit Testing - Building and executing unit tests outside the Toolkit","shortDescription":"Learn how to build and execute IBM App Connect Enterprise unit tests outside the Toolkit development environment.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"ExampleRouterFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java Unit Testing"},{"title":"Command: ibmint generate tests"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"As part of an automated process, use IBM App Connect Enterprise to record message assembly files which represent the in-memory logical tree used as messages travel through a deployed message flow."},{"title":"Execute the ibmint generate tests command to use the recorded messages for the automated construction of Java unit tests."}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial assumes you have already written a message flow and have some unit tests which you would like to run. Other tutorials in the gallery provide details for how to create unit tests manually or automatically generate them for existing message flows, so if you don\'t already know how to do this it is recommended to complete one of those tutorials first and then return to this scenario. This tutorial provides a simple message flow in an application, and a corresponding set of tests. In this example, the tests were generated using the <code>ibmint generate tests</code> command, but the method dscribed in this tutorial could also be applied to tests that you have authored using the Toolkit\'s features."},{"section":"The tutorial provides the message flow already constructed, recorded message assembly files and some associated unit tests in a Test Project.  We will import these projects into the Toolkit, but then switch to a command console session to demonstrate how to build and execute the tests outside the Toolkit."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing unit tests using Test Projects","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Developing unit tests using the command: ibmint generate tests","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import a project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the application named <span class=\'application\'>MyApplicationToBeTested</span>, and the test project named <span class=\'application\'>GeneratedTestProject</span> will be added to your workspace."},{"section":"<span class=\'application\'>MyApplicationToBeTested</span> provides a single message flow named <span class=\'resource\'>MyMessageFlowToBeTested</span> which receives data over HTTP. The project also provides 10 sample input messages. These inputs have also been used to generate a set of unit tests which reside in the Test project named <span class=\'application\'>GeneratedTestProject</span>."},{"section":"The HTTPInput node is configured to expect a JSON message which carries a single field containing a number. There follows a series of Filter nodes and graphical mapping nodes in the flow which test the input to see whether it is exactly divisible by 3 and exactly divisible by 2. The results drive the message down alternate branches of the flow all of which ultimately pass in to an HTTPReply node at the end of the flow which responds back to the requestor."},{"section":"Now move to the Prepare section where we will leave the Toolkit and use a command console session to build the tests, which will then be executed in the Run section of the tutorial."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Build the provided unit tests into a jar file from a command line</b>","steps":{"type":"ordered","details":[{"details":"Launch a command console session, and change directory to the location of the Test project named <span class=\'application\'>GeneratedTestProject</span> in your Toolkit workspace (in the example below this is C:\\\\MyToolkitWorkspace\\\\GeneratedTestProject). <br><code>cd C:\\\\MyToolkitWorkspace\\\\GeneratedTestProject</code>"},{"details":"The Test project named <b>GeneratedTestProject</b>, which was imported in the Create stage of the tutorial, contains a file named <code>build.gradle</code> and a file named <code>settings.gradle</code> which can be used by the Gradle build tool in order to build a jar file which contains the JUnit tests. This tutorial assumes you already have gradle installed (if not, you can do this very easily, starting from https://gradle.org/install/). Simply execute the <code>gradle</code> command from the Test project directory (in this exmaple, gradle was installed into the location <code>C:\\\\gradle-7.0\\\\bin\\\\</code>:<br><code>C:\\\\MyToolkitWorkspace\\\\GeneratedTestProject>  C:\\\\gradle-7.0\\\\bin\\\\gradle<br>Starting a Gradle Daemon (subsequent builds will be faster)<br><br>BUILD SUCCESSFUL in 9s<br>3 actionable tasks: 3 executed<br></code>"},{"details":"Create a working directory which will be used by an integration server to execute the unit tests:<br><code>mqsicreateworkdir C:\\\\temp\\\\MyUnitTestServerWorkingDirectory<br><br>mqsicreateworkdir: Copying sample server.config.yaml to work directory<br>        1 file(s) copied.<br>Successful command completion.<br></code>"},{"details":"Copy the built unit tests into the run subdirectory of the working directory you just created:<br><code>mkdir C:\\\\temp\\\\MyUnitTestServerWorkingDirectory\\\\run\\\\GeneratedTestProject<br>copy C:\\\\MyToolkitWorkspace\\\\GeneratedTestProject C:\\\\temp\\\\MyUnitTestServerWorkingDirectory\\\\run\\\\GeneratedTestProject</code>"},{"details":"Copy the resources directory containing the test message assembly files into the run subdirectory of the working directory you just created:<br><code>copy C:\\\\MyToolkitWorkspace\\\\GeneratedTestProject\\resources C:\\\\temp\\\\MyUnitTestServerWorkingDirectory\\\\run\\\\GeneratedTestProject\\resources</code>"},{"details":"Copy the BAR file containing the application to be tested into the run subdirectory of the working directorty you just created:<br><code>copy C:\\\\MyToolkitWorkspace\\\\MyApplicationToBeTested\\\\MyDeploy.bar C:\\\\temp\\\\MyUnitTestServerWorkingDirectory\\\\run</code>"},{"details":"The tests are now ready to be executed. Now move to the Run section of the tutorial, where we will use an integration server to execute the built tests."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Execute the Unit Tests","steps":{"type":"ordered","details":[{"details":"Staying in the command console session which was used to build the tests, we will now execute the tests. When using an integration server to run unit tests, you will most likely not need to start an HTTP listener port (so set parameter <code>--http-port-number -1</code>), and most likely won\'t need the administrative REST API to be available (so set parameter <code>--admin-rest-api -1</code>), and you can choose to not start the message flows for normal operation. The output from executing the tests should look a bit like this:<br><code>IntegrationServer --work-dir C:\\\\temp\\\\MyUnitTestServerWorkingDirectory --test-project GeneratedTestProject --start-msgflows false --http-port-number -1 --admin-rest-api -1<br><br>2021-05-10 14:08:09.503418: BIP1990I: Integration server \'MyUnitTestServerWorkingDirectory9\' starting initialization; version \'12.0.0.0\' (64-bit)<br>2021-05-10 14:08:09.540150: BIP9905I: Initializing resource managers.<br>2021-05-10 14:08:15.434823: BIP9906I: Reading deployed resources.<br>2021-05-10 14:08:15.494805: BIP9907I: Initializing deployed resources.<br>2021-05-10 14:08:15.505393: BIP2155I: About to \'Initialize\' the deployed resource \'MyApplicationToBeTested\' of type \'Application\'.<br>2021-05-10 14:08:17.559504: BIP2155I: About to \'Start\' the deployed resource \'MyApplicationToBeTested\' of type \'Application\'.<br>2021-05-10 14:08:18.061      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_001()<br>2021-05-10 14:08:18.252      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_001() SUCCESSFUL<br>2021-05-10 14:08:18.252      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_002()<br>2021-05-10 14:08:18.262      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_002() SUCCESSFUL<br>2021-05-10 14:08:18.262      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_003()<br>2021-05-10 14:08:18.270      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_003() SUCCESSFUL<br>2021-05-10 14:08:18.270      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_MappingError_TestCase_001()<br>2021-05-10 14:08:18.282      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_MappingError_TestCase_001() SUCCESSFUL<br>2021-05-10 14:08:18.293      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_001()<br>2021-05-10 14:08:18.311      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_001() SUCCESSFUL<br>2021-05-10 14:08:18.313      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_002()<br>2021-05-10 14:08:18.313      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_002() SUCCESSFUL<br>2021-05-10 14:08:18.321      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_003()<br>2021-05-10 14:08:18.323      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_003() SUCCESSFUL<br>2021-05-10 14:08:18.323      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_004()<br>2021-05-10 14:08:18.333      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_004() SUCCESSFUL<br>2021-05-10 14:08:18.333      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_001()<br>2021-05-10 14:08:18.353      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_001() SUCCESSFUL<br>2021-05-10 14:08:18.353      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_002()<br>2021-05-10 14:08:18.363      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_002() SUCCESSFUL<br>2021-05-10 14:08:18.363      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_003()<br>2021-05-10 14:08:18.373      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_003() SUCCESSFUL<br>2021-05-10 14:08:18.373      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_001()<br>2021-05-10 14:08:18.383      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_001() SUCCESSFUL<br>2021-05-10 14:08:18.383      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_002()<br>2021-05-10 14:08:18.383      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_002() SUCCESSFUL<br>2021-05-10 14:08:18.393      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_003()<br>2021-05-10 14:08:18.402      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_003() SUCCESSFUL<br>2021-05-10 14:08:18.404      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_004()<br>2021-05-10 14:08:18.404      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_004() SUCCESSFUL<br>2021-05-10 14:08:18.412      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_005()<br>2021-05-10 14:08:18.422      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_005() SUCCESSFUL<br>2021-05-10 14:08:18.424      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_006()<br>2021-05-10 14:08:18.424      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_006() SUCCESSFUL<br>2021-05-10 14:08:18.432      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_007()<br>2021-05-10 14:08:18.434      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_007() SUCCESSFUL<br>2021-05-10 14:08:18.442      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_008()<br>2021-05-10 14:08:18.444      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_008() SUCCESSFUL<br>2021-05-10 14:08:18.454      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_009()<br>2021-05-10 14:08:18.464      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_009() SUCCESSFUL<br>2021-05-10 14:08:18.464      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_010()<br>2021-05-10 14:08:18.474      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_010() SUCCESSFUL<br>2021-05-10 14:08:18.474      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_011()<br>2021-05-10 14:08:18.482      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_011() SUCCESSFUL<br>2021-05-10 14:08:18.484      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_001()<br>2021-05-10 14:08:18.484      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_001() SUCCESSFUL<br>2021-05-10 14:08:18.492      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_002()<br>2021-05-10 14:08:18.494      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_002() SUCCESSFUL<br>2021-05-10 14:08:18.494      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_003()<br>2021-05-10 14:08:18.504      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_003() SUCCESSFUL<br>2021-05-10 14:08:18.504      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_004()<br>2021-05-10 14:08:18.515      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_004() SUCCESSFUL<br>2021-05-10 14:08:18.515      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_005()<br>2021-05-10 14:08:18.523      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_005() SUCCESSFUL<br>2021-05-10 14:08:18.523      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_006()<br>2021-05-10 14:08:18.523      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_006() SUCCESSFUL<br>2021-05-10 14:08:18.523      1 STARTING TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_007()<br>2021-05-10 14:08:18.535      1 FINISHED TEST:MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_007() SUCCESSFUL<br>2021-05-10 14:08:18.555      1<br>TEST RESULTS:<br>  com.ibm.dev.MyTests:<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_001():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_002():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_003():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_004():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_005():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_006():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_2_TestCase_007():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_001():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_002():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_003():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_004():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_005():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_006():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_007():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_008():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_009():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_010():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Divisible_by_3_TestCase_011():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_001():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_002():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping1_TestCase_003():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_001():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_002():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_003():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping2_TestCase_004():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_001():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_002():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_Mapping3_TestCase_003():SUCCESSFUL<br>    MyApplicationToBeTested_MyMessageFlowToBeTested_MappingError_TestCase_001():SUCCESSFUL<br><br>TOTALS:<br>  PASSED    :29<br>  FAILED    :0<br>  ABORTED   :0<br>  TIME(secs):0.577<br></code>"}]}},{"section":"This tutorial has shown how to build and execute IBM App Connect Enterprise unit tests outside the Toolkit development environment."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Unit Testing your message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Unit Testing - Testing multiple message flow nodes using propagate and evaluate":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Unit Testing - Testing multiple message flow nodes using propagate and evaluate","shortDescription":"Learn how unit tests can be used for testing a sequence of multiple message flow nodes.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"ExampleRouterFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java Unit Testing"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use the evaluate() and propagate() testing methods on a NodeSpy to control whether a single message flow node is tested in isolation, or whether control is propagated to subsequent message flow nodes as well."}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This provides a simple message flow and some corresponding unit tests. The simple flow is only intended as an educational aid to demonstrate how unit test authors can choose whether to test a single message flow node in isolation, or to propagate a message to subsequent message flow nodes which can also be tested within the scope of the same test case."},{"section":"The tutorial provides the message flow already constructed, recorded message assembly files and some associated unit tests in a Test Project.  We will import these projects into your Toolkit workspace, explore the flow design and tests, and then execute the tests - all from within the Toolkit."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing unit tests using Test Projects","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Developing unit tests using the command: ibmint generate tests","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import a project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the application named <span class=\'application\'>MySimpleApplication</span>, and the test project named <span class=\'application\'>MySimpleApplication_IntegrationTests</span> will be added to your workspace."},{"section":"<span class=\'application\'>MySimpleApplication</span> provides a single message flow named <span class=\'resource\'>MyMessageFlowWithTwoComputeNodes</span> which receives data over HTTP. The flow uses two Compute nodes in a row, followed by an HTTPReply node at the end of the flow which responds back to the requestor. Typically message flows would not wire two Compute nodes in a row, but we are using this particular flow design in this situation as a learning aid to help make it very clear how flow developers can choose the portion of their message flows which they would like to test. Each of the Compute nodes copies the input message to the output, whilst adding a new output field."},{"section":"Now move to the Prepare section where we will explore the tests which have been imported."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Explore TestCase_001 which demonstrates the NodeSpy evaluate() method, with the singleNodeTest parameter set to true</b>","steps":{"type":"ordered","details":[{"details":"Inside the imported project named <span class=\'application\'>MySimpleApplication_IntegrationTest</span>, look inside the package named <b>test</b> and open <b>MySimpleApplication_MyMessageFlowWithTwoComputeNodes_IntegrationTest.java</b>. This file contains three test cases which demonstrate different aspects of testing a sequence of multiple message flow nodes. Take a look at <b>MySimpleApplication_MyMessageFlowWithTwoComputeNodes_TestCase_001</b>. This test case declares two NodeSpy objects to represent the message flow nodes named <b>Compute1</b> and <b>Compute2</b>. An input message assembly file named <b>MyMessageFlowWithTwoComputeNodes_Compute1_input.mxml</b> is sent in to <b>Compute1</b> to start the test."},{"details":"The main part of the test demonstrates the behavior of the evaluate() method. When this is called on a NodeSpy with the singleNodeTest parameter set to <b>true</b>, it allows a single message flow node to be tested without propagating the message to any subsequent message flow nodes. In order to test a sequence of nodes, setting the singleNodeTest parameter to false allows message propagation from any of the output terminals on the NodeSpy. This first test case tests a single message flow node. After the evaluate method is called, further assertions check that Compute1 is called 1 time, and checks that Compute2 is called 0 times, as shown in the following passage of code:<br><code>// Call the message flow node Compute1 with the Message Assembly<br>// NOTE singleNodeTest is true so message propagation to Compute2 will not occur!<br>nodeSpyCompute1.evaluate(inputMessageAssembly, true, \\"in\\"); <br>// Assert that Compute1 is called 1 time<br>assertThat(nodeSpyCompute1, nodeCallCountIs(1));<br>// Assert that Compute1 output terminal propagate count is 1<br>assertThat(nodeSpyCompute1, terminalPropagateCountIs(\\"out\\", 1));<br>// Assert that Compute2 is called 0 times<br>assertThat(nodeSpyCompute2, nodeCallCountIs(0));<br>// Assert that Compute2 output terminal propagate count is 1<br>assertThat(nodeSpyCompute2, terminalPropagateCountIs(\\"out\\", 0));</code><br>"}]}},{"section":"<b>Explore TestCase_002 which demonstrates the NodeSpy evaluate() method, with the singleNodeTest parameter set to false</b>","steps":{"type":"ordered","details":[{"details":"Look further down <b>MySimpleApplication_MyMessageFlowWithTwoComputeNodes_IntegrationTest.java</b> at <b>MySimpleApplication_MyMessageFlowWithTwoComputeNodes_TestCase_002</b>. This test case also declares two NodeSpy objects which represent the message flow nodes named <b>Compute1</b> and <b>Compute2</b>. The same input message assembly file named <b>MyMessageFlowWithTwoComputeNodes_Compute1_input.mxml</b> is sent in to <b>Compute1</b> to start the test."},{"details":"The main part of the test demonstrates the behavior of the evaluate() method. When this is called on a NodeSpy with the singleNodeTest parameter set to <b>false</b>, it allows multiple message flow nodes to be tested through propagation of the message beyond a single NodeSpy to subsequent nodes downstream in the flow. In order to test a sequence of nodes, setting the singleNodeTest parameter to false allows message propagation from any of the output terminals on the NodeSpy. When the singleNodeTest parameter is false, execution of the flow will continue until the injected message reaches the end of the flow, or until an uncaught message flow exception occurs. This second test case tests both Compute1 and Compute2. After the evaluate method is called, further assertions check that Compute1 is called 1 time, and checks that Compute2 is called 1 time as well, as shown in the following passage of code:<br><code>// Call the message flow node Compute1 with the Message Assembly<br>// NOTE singleNodeTest is false so message propagation to Compute2 will occur!<br>nodeSpyCompute1.evaluate(inputMessageAssembly, false, \\"in\\");<br>// Assert that Compute1 is called 1 time<br>assertThat(nodeSpyCompute1, nodeCallCountIs(1));<br>// Assert that Compute1 output terminal propagate count is 1<br>assertThat(nodeSpyCompute1, terminalPropagateCountIs(\\"out\\", 1));<br>// Assert that Compute2 is called 1 time<br>assertThat(nodeSpyCompute2, nodeCallCountIs(1));<br>// Assert that Compute2 output terminal propagate count is 1<br>assertThat(nodeSpyCompute2, terminalPropagateCountIs(\\"out\\", 1));</code><br>"}]}},{"section":"<b>Explore TestCase_003 which demonstrates the NodeSpy propagate() method</b>","steps":{"type":"ordered","details":[{"details":"The propagate() method on a NodeSpy, is similar to the evaluate() method with the singleNodeTest parameter set to false, in that this technique allows for message propagation beyond a single NodeSpy so that multiple message flow nodes can be tested in a single test case. The propagate() method sends a Message Assembly to the output terminal of a NodeSpy. This third test case defines two NodeSpy objects - one for the HTTP Input node at the start of the flow and one for the HTTP Reply node at the end of the flow. Conceptually, the intervening Compute nodes, Compute1 and Compute2 are treated as a black box in this test. This test also demonstrates the method named setStopAtInputTerminal() which is called on the HTTP Reply NodeSpy. This prevents message propagation past a given message flow node terminal:<br><code>// Set up a stop at the in terminal of the NodeSpy for the HTTPReply<br>nodeSpyHTTPReply.setStopAtInputTerminal(\\"in\\");</code>"},{"details":"Take a careful look at this section of the third test case which demonstrates the effect of the setStopAtInputTerminal() by defining an assertion that the HTTP Repy NodeSpy is called zero times:<br><code>// Call the message flow node HTTP Input with the Message Assembly<br>// Use the propagate method to send the Message Assembly to the out terminal of the HTTPInput node<br>// Treat Compute1 and Compute2 as a \\"black box\\" for this test, then check the outcome at the in terminal of HTTPReply<br>nodeSpyHTTPInput.propagate(inputMessageAssembly, \\"out\\");<br>// Demonstrate that the HTTPReply has not been called due to the earlier setStopAtInputTerminal(\\"in\\")<br>assertThat(nodeSpyHTTPReply, nodeCallCountIs(0));</code>"},{"details":"Having explored and understood the purpose of the provided tests, now move to the Run section of the tutorial where we will use an integration server to execute them."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<h4>Execute the Unit Tests","steps":{"type":"ordered","details":[{"details":"Right click the Test Project named MySimpleApplication_IntegrationTest and choose the option <b>Run Test Project</b>. After a few seconds, the Console view should be opened, which will show an independent integration server being started in order to execute the unit test. There is no further deployment step required - This is taken care of for you so that the application under test, and the Test Project are automatically available to the server."},{"details":"The JUnit view will open in the top left corner (just to the right of the Application Development view and the Patterns Explorer) and will show that the three test cases which were discussed in depth in the Prepare section of the tutorial have all run successfully and passed."}]}},{"section":"This tutorial has shown how to how unit tests can be used for testing a sequence of multiple message flow nodes."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Unit Testing your message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Unit Testing - Running Test Cases in Test Projects and Integration Server JUnit configuration":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Unit Testing - Running Test Cases in Test Projects and Integration Server JUnit configuration","shortDescription":"Learn how to structure Test Cases inside Test projects, and how to configure test execution options for Integration Server JUnits.","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MyFlowUnderTest","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Java Unit Testing"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Explore some pre-defined unit tests for a message flow"},{"title":"Run the provided tests in the App Connect Enterprise Toolkit using the default execution options for Integration Server JUnits"},{"title":"Explore more complex configuration options for controlling how Integration Server JUnits are run by the App Connect Enterprise Toolkit."}],"summary":{"overviewName":"Overview","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial provides a relatively simple message flow in an application that is designed to receive a JSON input message over HTTP. Five input messages are provided which exercise different branches of logic in the message flow. A Test Project is also provided, which contains nine test cases. Each test case tests a single message flow node using a NodeSpy. Where required, Message Assembly files (.mxml) are provided which describe the expected output from each test case."},{"section":"The tutorial describes how to run the provided test cases agains the message flow using the default options for running an Integration Server JUnit. The tutorial then describes how you can run a single isolated test case, and use other more complex configuration options such as turning tracing on and how to run tests in an integration server which uses an existing work directory."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing unit tests using Test Projects","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Using the Message Assembly Editor","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import a project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and two projects will be added to your workspace. The application named <span class=\'application\'>MyApplicationUnderTest</span> provides a single message flow named <span class=\'resource\'>MyMessageFlowUnderTest</span> which receives data over HTTP. The test project named <span class=\'application\'>MyTestProject</span> contains eighteen example message assembly files, and nine unit tests."},{"section":"The message flow named <span class=\'resource\'>MyMessageFlowUnderTest</span> expects to receive input JSON messages which conform to the JSON schema named <b>InputMessageSchema.json</b> which you will find in the same application."},{"section":"Now move to the Prepare section where we will explore the provided message flow, test data and the Test Project\'s test cases in detail."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions by using applications","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"The message flow expects to receive JSON data over HTTP. Each message carries three string properties named FirstName, LastName and Country for a fictitious person. The Country field uses a two character abbreviation for a country. Four example valid input messages are saved in the application for use with the Flow Exerciser:<br><code>{\\"FirstName\\": \\"Jean\\", \\"LastName\\": \\"Dupont\\", \\"Country\\":\\"FR\\"}<br>{\\"FirstName\\": \\"Joe\\", \\"LastName\\": \\"Bloggs\\", \\"Country\\":\\"GB\\"}<br>{\\"FirstName\\": \\"John\\", \\"LastName\\": \\"Doe\\", \\"Country\\":\\"US\\"}<br>{\\"FirstName\\": \\"Otto\\", \\"LastName\\": \\"Normalverbraucher\\", \\"Country\\":\\"DE\\"}</code><br>One example invalid input message is saved in the application for use with the Flow Exerciser:<br><code>This message is deliberately not valid JSON</code><br>These input messages have been used to capture Message Assembly files which describe what the logical tree looks like for each step of the message flow. If you would like, you can use these inputs with the Flow Exerciser to become familiar with the behavior of the message flow. This is not a mandatory step for the tutorial - as we have already taken this message data and used it to create test cases which will be executed later in the tutorial - but it may help with your understanding of the scenario."},{"section":"Nine Test Cases have been defined inside the Test Project <span class=\'resource\'>MyTestProject</span> in the java file named <b>MyApplicationUnderTest_MyFlowUnderTest_UnitTests.java</b>. You can open this file to familiarise yourself with the detail of the test cases. In summary their purpose is as follows:<br><b>TestCase01:</b> Test the MappingError node to ensure it transforms data correctly<br><b>TestCase02:</b> Test the Route node to ensure a message with Country=FR is routed to the default output terminal<br><b>TestCase03:</b> Test the MappingDefault node to ensure it transforms data correctly<br><b>TestCase04:</b> Test the Route node to ensure a message with Country=GB is routed to the GB output terminal<br><b>TestCase05:</b> Test the MappingGB node to ensure it transforms data correctly<br><b>TestCase06:</b> Test the Route node to ensure a message with Country=US is routed to the US output terminal<br><b>TestCase07:</b> Test the MappingUS node to ensure it transforms data correctly<br><b>TestCase08:</b> Test the Route node to ensure a message with Country=DE is routed to the DE output terminal<br><b>TestCase09:</b> Test the MappingDE node to ensure it transforms data correctly"},{"section":"Now move to the Run section where we will execute the tests and explore more detailed configuration which controls how the Toolkit runs the tests in a Test Project."}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Execute all of the provided test cases, using the default Integration Server JUnit configuration</b>","steps":{"type":"ordered","details":[{"details":"Right-click the test project <span class=\'application\'>MyTestProject</span> and choose the option to <span class=\'application\'>Run Test Project</span>. After a few seconds, an integration server will be started which runs the test. The Console view at the base of the Toolkit window will show the progress of the server starting, and the tests being run. The output will look a bit like this:<br><code>mqsicreateworkdir: Copying sample server.config.yaml to work directory<br>        1 file(s) copied.<br>Successful command completion.<br>BIP8071I: Successful command completion.<br>2021-05-14 00:39:02.209710: BIP1990I: Integration server \'eclipse-work\' starting initialization; version \'12.0.0.0\' (64-bit)<br>2021-05-14 00:39:02.248816: BIP9905I: Initializing resource managers.<br>2021-05-14 00:39:17.407470: BIP9906I: Reading deployed resources.<br>2021-05-14 00:39:17.439984: BIP9907I: Initializing deployed resources.<br> 2021-05-14 00:39:17.445992: BIP2155I: About to \'Initialize\' the deployed resource \'MyApplicationUnderTest\' of type \'Application\'.<br>2021-05-14 00:39:26.946058: BIP2155I: About to \'Start\' the deployed resource \'MyApplicationUnderTest\' of type \'Application\'.<br>2021-05-14 00:39:27.005      1 this class com.ibm.broker.plugin.MbNonDelegatingJavaResourceClassLoader@bbb55a41<br>2021-05-14 00:39:27.017      1 Attempting Eclipse junit run with args |-version 3 -port 65079 -testLoaderClass org.eclipse.jdt.internal.junit5.runner.JUnit5TestLoader -loaderpluginname org.eclipse.jdt.junit5.runtime -packageNameFile C:\\\\Users\\\\BENJAM~1\\\\AppData\\\\Local\\\\Temp\\\\packageNames2998722845942089842.txt   |<br>2021-05-14 00:39:28.929      1 runnerClass class org.eclipse.jdt.internal.junit.runner.RemoteTestRunner<br>2021-05-14 00:39:28.932      1 runnerMainMethod public static void org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(java.lang.String[])<br></code><br>When the tests finish the JUnit view will be displayed in the top left of the Toolkit and should report that all nine test cases have passed."}]}},{"section":"<b>Advanced Options: Run Configuration for Integration Server JUnit - Integration Server Settings</b>","steps":{"type":"ordered","details":[{"details":"Right-click the Test project and choose <b>Run As > Run Configurations</b>. In the main section of the Run Configuration window, you will find separately named tabs displaying distinct aspects of configuration such as:<br><b>Integration Server Settings</b><br><b>Test</b><br><b>Common</b><br><b>Environment</b><br><b>Refresh</b><br>We will be exploring the properties on the <b>Integration Server Settings</b> tab and the <b>Test</b> tab. The main choice to make when executing Integration Server JUnits in the Tookit is whether you would like to use a temporary working directory to support the integration server, or an existing working directory which you have previously configured. It is expected that the majority of unit testing will be for individual message flow nodes, and will not require any further specialised settings for the configuration of the integration server, so it is expected that most users will typically use the default selection of <b>Use temporary working directory</b>. There may be circumstances where you wish to execute tests which rely on a server using particular port numbers, or to have access to other configuration resources such as particular policy documents or credentials for third party systems. This configuration can be set up in advance of running the test, and by pointing the server to an existing working directory, these additional configurations will be available to the server which is being used to execute the tests when it starts. Choosing this configuration approach brings its own additional complexities. For example you should make sure that there are no other active integration servers on your machine using the nominated working directory. You may also need to be concerned with potential port conflicts. If you select <b>Use an existing working directory</b> then you will also have the opportunity to select the option named <b>Clear the deployed resources in the existing working directory before the Test Run</b>. This is not selected by default, because typically if you have chosen to use an existing working directory, you are most likely to want to preserve what\'s already deployed (these files are stored in the run subdirectory of the working directory). You can experiment with the settings we have discussed, but for the instructions below in this tutorial we will assume the default choice to <b>Use temporary working directory</b>."},{"details":"Staying on the Integration Server Settings tab, at the bottom of the window you will find some further settings:<br><b>Start Flow threads</b> This checkbox is not selected by default. For most unit test at a granularity of a specific message flow node, you will not need to start message flow threads, but when doing whole flow testing there may be circumstances where you will need this option. Do not select it for the purpose of this tutorial.<br><b>Disable the REST API administration Port</b> This checkbox is selected by default. Typically you will not need to communicate with an integration server whilst it executes your unit tests so normally you will be advised to leave this checkbox selected. For the sake of this tutorial demonstration, untick the box.<br><b>Real/Fake MQ Manager Name for unit testing: FakeQueueManagerName</b> Some unit tests may involve message flows which contain message flow nodes such as the MQInput or MQOutput node whose purpose is to interact with MQ. It is likely that these kind of unit test won\'t actually need messages to be written to an actual queue, but to avoid configuration errors being encountered by the server when it starts it may be helpful to leave this property with its default value of FakeQueueManagerName. You can of course specify a Queue Manager name of your own choice if you prefer.<br><b>Trace options</b> provides a dropdown with three possible integration server tracing options - none, service and diagnostic. These options will only be needed when requested by an IBM Support representative. Tracing should only be used in rare circumstances when requested by IBM as it will significantly slow down the server. If tracing is being collected, it can be located after the tests have been run from the following directory locations:<br>On Windows: <code>%temp%\\\\eclipse-work\\\\config\\\\common\\\\log</code><br>On Unix: <code>/tmp/eclipse-work/config/common/log</code><br><b>Debug Port</b> to lets you specify a debug port number of your own choice and is only used in rare situations where you are attempting to attach the debugger whilst running test cases."},{"details":"Click the Run button and the tests will execute. You can examine the console entries and if you followed the suggestions above then you should see that the REST Admin port has now been enabled, as highlighted in bold below:<br><br><code><b>2021-05-15 16:06:55.952996: BIP3132I: The HTTP Listener has started listening on port \'7600\' for \'RestAdmin http\' connections.</b><br>2021-05-15 16:06:55.955660: BIP9910I: Running tests in test project \'ExampleTestDrivenDevelopment_IntegrationTest\'.<br>2021-05-15 16:06:56.049      1 this class com.ibm.broker.plugin.MbNonDelegatingJavaResourceClassLoader@e39ca18a<br>2021-05-15 16:06:56.055      1 Attempting Eclipse junit run with args |-version 3 -port 64610 -testLoaderClass org.eclipse.jdt.internal.junit5.runner.JUnit5TestLoader -loaderpluginname org.eclipse.jdt.junit5.runtime -packageNameFile C:\\\\Users\\\\BENJAM~1\\\\AppData\\\\Local\\\\Temp\\\\packageNames8489438107246072506.txt   |<br>2021-05-15 16:06:57.393      1 runnerClass class org.eclipse.jdt.internal.junit.runner.RemoteTestRunner<br>2021-05-15 16:06:57.393      1 runnerMainMethod public static void org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(java.lang.String[])<br>2021-05-15 16:06:58.243880: BIP9911I: Running tests in test project \'ExampleTestDrivenDevelopment_IntegrationTest\' completed successfully.<br></code>"}]}},{"section":"<b>Advanced Options: Run Configuration for Integration Server JUnit - Test</b>","steps":{"type":"ordered","details":[{"details":"Right-click the test project <span class=\'application\'>MyTestProject</span> and choose <b>Run As > Run Configurations</b>. This time, in the main panel, switch to the tab named <b>Test</b>. This panel lets you choose to:<br><b>Run a single test</b> or <br><b>Run all tests in the selected project, package or source folder</b><br>This time, choose the option to <b>Run a single test</b> and choose one of the tests to run, for example TestCase04:<br><b>Project = MyTestProject</b><br><b>Test class = tes.MyApplicationUnderTest_MyFlowUnderTest_UnitTests</b><br><b>Test method = MyApplicationUnderTest_MyFlowUnderTest_TestCase04</b><br>Click the Run button."},{"details":"As in the previous examples, the console will show the server starting but when the tests have executed the JUnit view in the top left corner of the Toolkit will show that only TestCase04 was executed. This technique is useful if you only wish to execute a single test."}]}},{"section":"This tutorial has shown how to structure Test Cases inside Test projects, and how to configure test execution options for Integration Server JUnits."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Unit Testing your message flow","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Commands - Using the ibmint command to package BAR files, apply overrides and deploy":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Commands - Using the ibmint command to package BAR files, apply overrides and deploy","shortDescription":"Learn how to use the ibmint command to prepare and deploy integration artifacts outside of the IBM App Connect Enterprise Toolkit","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MyDemoFlow","helpLink":{"text":"IBM Knowledge Center","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"The ibmint command"},{"title":"Compute node"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use the ibmint command to package and deploy a BAR file"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to use the ibmint command to package and deploy a BAR file. Similar tasks are executed as part of automated deployment pipelines for the IBM App Connect Enterprise product, so this tutorial may be especially helpful for anyone wishing to administer the product or learn more about how to automate the preparation of the runtime environment. The focus of this tutorial is not on the development process itself, so integration artifacts are provided which demonstrate some of the basic project types which are available including an application (containing a message flow, a graphical map and some test data), a Java project and a shared library (containing XML schemas which represent the input and output data)."},{"section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures, or create entirely new data structures from scratch. The message flow uses a graphical mapping node to upper-case the string values carried in three fields in the input message. The JavaCompute node enhances the output data structure with information about the operating environment including the Operating System where IBM App Connect Enterprise is running, the name of the Application, the name of the Message Flow and a value taken from the message flow User Defined Property named RuntimeEnvironmentDescription. The value of this property is intended to be overridden by the deployment process (using a setting in the BAR file) when deployed to a particular environment such as Development, Test, or Production."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Unlike most other tutorials, you are recommended to start this tutorial from an empty workspace. The reason for this advice, is that the tutorial includes running the ibmint package command which will scan your workspace to discover projects that can be built ready for deployment. Starting from a workspace which contains other projects could cause you to encounter other unexpected outputs or errors, so to keep the tutorial as easy as possible to follow it\'s best to start from a clean workspace."},{"section":"Click <span class=\'uicontrol\'>Import</span> and the following projects will be imported into your workspace:<br>The application named <span class=\'uicontrol\'>MyDemoApplication</span><br>The java project named <span class=\'uicontrol\'>MyDemoApplicationJava</span>The shared library named <span class=\'uicontrol\'>MyDemoSharedLibrary</span>"},{"section":"The <span class=\'uicontrol\'>MyDemoFlow</span> message flow will be opened for you."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Explore the provided integration artifacts","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"The main focus of this tutorial is to demonstrate how you can take integration artifacts which have been developed and prepare them for the IBM App COnnect Enterprise runtime. These actions will be described in detail in the <b>Run</b> section of this tutorial, but before moving to that section if you are interested in the provided development artifacts, they are described below."},{"details":"The message flow named MyDemoFlow expects to receive an XML message over HTTP which looks like this:<br><br><code>&lt;input:InputMessage xmlns:input=\\"http://www.example.org/MyDemoInput\\"&gt;<br>&lt;input:Field1&gt;this&lt;/input:Field1&gt;<br>&lt;input:Field2&gt;gets&lt;/input:Field2&gt;<br>&lt;input:Field3&gt;uppercased&lt;/input:Field3&gt;<br>&lt;/input:InputMessage&gt;</code><br><br>This input is transformed into an output message which looks like this:<br><br><code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;output:OutputMessage xmlns:output=\\"http://www.example.org/MyDemoOutput\\"&gt;<br>  &lt;output:Field1&gt;THIS&lt;/output:Field1&gt;<br>  &lt;output:Field2&gt;GETS&lt;/output:Field2&gt;<br>  &lt;output:Field3&gt;UPPERCASED&lt;/output:Field3&gt;<br>  &lt;output:OperatingEnvironment&gt;<br>    &lt;output:OperatingSystem&gt;Windows 8&lt;/output:OperatingSystem&gt;<br>    &lt;output:ApplicationName&gt;MyDemoApplication&lt;/output:ApplicationName&gt;<br>    &lt;output:MessageFlowName&gt;MyDemoFlow&lt;/output:MessageFlowName&gt;<br>    &lt;output:RuntimeEnvironmentDescription&gt;ThisPropertyHasNoOverrideApplied&lt;/output:RuntimeEnvironmentDescription&gt;<br>  &lt;/output:OperatingEnvironment&gt;<br>&lt;/output:OutputMessage&gt;</code><br><br> As you can see, the message flow takes the string values carried by Field1, Field2 and Field3 and uppercases them. This is done by the graphical mapping node in the message flow. Extra fields are added to a section in the output message which describe the operating environment in which the message flow is running. This is done by the JavaCompute node in the message flow."}]}}]}},"run":{"overview":{"name":"Run","heading":"Test the message flow using the local Integration Server","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"If you happen to have a local integration server whose working directory is defined in your workspace, then you will need to ensure it is stopped before running the commands which follow. Running integation servers lock some of the files in their working directory (such as log and trace files for example), so to avoid errors about the ibmint package command not being able to access files due to them being locked by another process, you should stop the server before executing the <code>ibmint package</code> command. Open an IBM App Connect Enterprise command console and execute the following command, using your Toolkit workspace as the value for the <b>--input-path</b> parameter, and an appropriate file path for the <b>--output-bar-file</b> parameter. For example on a Windows system:<br><code>ibmint package --input-path C:\\\\MyWorkspace --output-bar-file C:\\\\temp\\\\MyDemo.bar</code><br><br>The command will attempt to scan the directory specified by the <b>--input-path parameter</b> looking for resources which can be compiled and packaged. You should receive command output that looks a bit like this:<br><code>C:\\\\Program Files\\\\IBM\\\\ACE\\\\12.0.1.0>ibmint package --input-path C:\\\\MyWorkspace --output-bar-file C:\\\\temp\\\\MyDemo.bar<br>BIP8409I: Compiling Java project \'\\\\\\\\?\\\\C:\\\\MyWorkspace\\\\MyDemoApplicationJava\'<br>BIP1859I: Successfully added file \'application.descriptor\' to the BAR file.<br>BIP1859I: Successfully added file \'MyDemoFlow.msgflow\' to the BAR file.<br>BIP1859I: Successfully added file \'MyDemoFlow_inputMessage.xml\' to the BAR file.<br>BIP1859I: Successfully added file \'MyDemoFlow_Mapping.map\' to the BAR file.<br>BIP1859I: Successfully added file \'MyDemoApplicationJava.jar\' to the BAR file.<br>BIP1853I: Application file \'MyDemoApplication.appzip\' successfully added to the BAR file.<br>BIP8071I: Successful command completion.</code><br>Next, we will demonstrate how to apply overrides into your BAR file using the ibmint command. To do this, you will need a file containing the overrides in the standard IBM App Connect Enterprise format. The provided message flow (MyDemoFlow) contains a user defined property named <b>RuntimeEnvironmentDescription</b>, which we will override to take the value <b>DevelopmentEnvironment</b>. This override is expressed as shown below:<br><br><code>MyDemoFlow#RuntimeEnvironmentDescription=DevelopmentEnvironment</code><br><br>Save the above content into a file, such as <b>C:\\\\temp\\\\DemoPropertyOverridesFile.txt</b> for example. Execute the following command to apply the override:<br><br><code>ibmint apply overrides C:\\\\temp\\\\DemoPropertyOverridesFile.txt --bar-file C:\\\\temp\\\\MyDemo.bar</code><br><br>Deploy the BAR file using the ibmint deploy command<br><br><code>ibmint deploy --input-bar-file C:\\\\temp\\\\MyDemo.bar --output-work-directory C:\\\\temp\\\\DemoIntegrationServer</code><br><br>An alternative to scripting the three separate ibmint commands described above, would be to not even use a BAR file, and to combine all of the actions into a single command which takes your source files and directly prepares the integration server\'s working directory:<br><br><code>ibmint deploy --input-path C:\\\\MyWorkspace --overrides-file C:\\\\temp\\\\DemoPropertyOverridesFile.txt --output-work-directory C:\\\\temp\\\\DemoIntegrationServer</code>"},{"details":"This tutorial has shown how to use the ibmint command to prepare and deploy integration artifacts outside of the IBM App Connect Enterprise Toolkit."}]}}]}}}}},"Commands - Migrate from earlier product versions using the mqsiextractcomponents command":{"version":"0.1","pageContent":{"_comments":"JSON object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Commands - Migrate from earlier product versions using the mqsiextractcomponents command","shortDescription":"Learn how to use the mqsiextractcomponents command to create integration nodes and servers based on existing IBM Integration Bus 10 and IBM App Connect Enterprise 11 topologies.","durationText":"This tutorial takes approximately","durationTime":"15 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MyDemoFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.ace.home.doc/help_home.htm"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"The mqsiextractcomponents command"}],"outcomesName":"Learning outcomes","_outcomesComment":"Start learning some product basics with a very simple Toolkit use case","outcomeList":[{"title":"Use the mqsiextractcomponents command to create integration nodes and servers based on backups from earlier product versions"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates how to use the mqsiextractcomponents command to migrate your existing IBM Integration Bus 10 or IBM App Connect Enterprise 11 integration servers and integration nodes to IBM App Connect Enterprise 12. The command is used to extract configuration and resources on the same computer or a different computer. You can choose to extract components from an integration node or from an integration server. Extracting the configuration and resources from an integration node also extracts the configuration and resources of all the integration servers that are associated with the integration node. In either case, you will run the mqsibackupbroker command on the source system and then transfer the backup file that is created to the computer to which you are extracting the configuration and resources. To make this tutorial as convenient as possible to try out, example backup files are provided from both IBM Integration Bus 10 and IBM App Connect Enterprise 11."},{"section":"An integration server is used to provide an isolated runtime environment for a set of deployed message flows and resources. Each integration server runs as a unique process in a separate address space. You can configure integration servers to be associated with an integration node that looks after them, or to run independently of an integration node. If you are planning to run App Connect Enterprise directly on a physical machine or virtual machine image, then you are advised to define integration servers under an integration node to manage the associated integration servers. If you are planning to run the App Connect Enterprise in conjunction with a container framework such as Kubernetes, then it is the responsibility of this framework to ensure that the servers remain running (or are restarted appropriately) so in this situation using independent integration servers would be the better choice."}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and a single project named <b>MigrationTutorialHelperFiles</b> will be imported into your workspace. Most of this tutorial will use a command console session, but this project holds some files we will use. The project contains a folder name <b>Backups</b> which has an example backup zip file from IBM Integration Bus 10 and another example backup zip file from IBM App Connect Enterprise 11. The <b>BARfiles</b> folder provides two example BAR files, in case you wish to use them."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create example environments in earlier product versions","_prepareComment":"Creating an IntegrationServer:","sections":[{"section":"","steps":{"type":"ordered","details":[{"details":"This tutorial provides back-up zip files from example integration nodes which were created using IBM Integration Bus 10 and App Connect Enterprise 11. Most users of this tutorial can skip right over this section and use the provided backup files, but if you would prefer not to use the provided backups and would like to recreate an integration node which has the same settings yourself, then you can use the provided commands below:<br><br><b>For IBM Integration Bus 10:</b><br><br><code>mqsicreatebroker MY_NODE_V10<br>mqsistart MY_NODE_V10<br>mqsicreateexecutiongroup MY_NODE_V10 -e server1<br>mqsicreateexecutiongroup MY_NODE_V10 -e server2<br>mqsicreateexecutiongroup MY_NODE_V10 -e server3<br>mqsicreateconfigurableservice MY_NODE_V10 -c FtpServer -o MyFTPServer -n protocol,serverName,scanDelay,remoteDirectory,securityIdentity -v  SFTP,winlnx58,30,.,user1<br>mqsisetdbparms MY_NODE_V10 -n sftp::user1 -u ben -p pass123<br>mqsiwebuseradmin MY_NODE_V10 -c -u mywebuser1 -a mypassword1 -r iibadmin<br>mqsiwebuseradmin MY_NODE_V10 -c -u mywebuser2 -a mypassword2 -r iibuser<br>mqsichangefileauth MY_NODE_V10 -r iibadmin -e server1 -p all+<br>mqsichangefileauth MY_NODE_V10 -r iibuser -e server1 -p read+,execute+<br>mqsistop MY_NODE_V10<br>mqsistart MY_NODE_V10<br>mqsideploy MY_NODE_V10 -e server1 -a Transformation_ESQL.bar<br>mqsideploy MY_NODE_V10 -e server2 -a TemperatureConverter.bar</code><br><br><b>To create the backup:</b><br><br><code>mqsistop MY_NODE_V10<br>mqsibackupbroker MY_NODE_V10 -d C:\\\\temp -a Backup_MY_NODE_V10.zip</code><br><br><b>For App Connect Enterprise 11:</b><br><br><code>mqsicreatebroker MY_NODE_V11<br>mqsistart MY_NODE_V11<br>mqsicreateexecutiongroup MY_NODE_V11 -e serverA<br>mqsicreateexecutiongroup MY_NODE_V11 -e serverB<br>mqsicreateconfigurableservice MY_NODE_V11 -c FtpServer -o MyFTPServer -n protocol,serverName,scanDelay,remoteDirectory,securityIdentity -v  SFTP,winlnx58,30,.,user1<br>mqsisetdbparms MY_NODE_V11 -n sftp::user1 -u ben -p pass123<br>mqsiwebuseradmin MY_NODE_V11 -c -u mywebuser1 -a mypassword1 -r iibadmin<br>mqsiwebuseradmin MY_NODE_V11 -c -u mywebuser2 -a mypassword2 -r iibuser<br>mqsichangefileauth MY_NODE_V11 -r iibadmin -e serverA -p all+<br>mqsichangefileauth MY_NODE_V11 -r iibuser -e serverA -p read+,execute+<br>mqsistop MY_NODE_V11<br>mqsistart MY_NODE_V11<br>mqsideploy MY_NODE_V11 -e serverA -a Transformation_ESQL.bar<br>mqsideploy MY_NODE_V11 -e serverB -a TemperatureConverter.bar</code><br><br><b>To create the backup:</b><br><br><code>mqsistop MY_NODE_V11<br>mqsibackupbroker MY_NODE_V11 -d C:\\\\temp -a Backup_MY_NODE_V11.zip</code><br><br>"},{"details":"Now move to the <b>Run</b> section of the tutorial where we will extract configuration information from the backups which we just created."}]}}]}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Extract a whole IBM Integration Bus 10 integration node into an IBM App Connect Enterprise 12 integration node</b>","steps":{"type":"ordered","details":[{"details":"Launch an IBM App Connect Enterprise 12 command console session and run the following commands"},{"details":"<code>mqsiextractcomponents --backup-file C:\\\\MyToolkitWorkspace\\\\MigrationTutorialHelperFiles\\\\Backups\\\\Backup_MY_NODE_V10.zip --source-integration-node MY_NODE_V10 --target-integration-node MY_V10NEWNODENAME<br><br>The command response should look like this:<br><br><code>BIP8469I: Version \'10.0\' backup file supplied.<br>BIP8471I: Loading configuration for source integration node \'MY_NODE_V10\'.<br>BIP8389W: Property \'sslProtocol\' for the node wide httplistener \'HTTPSConnector\' is no longer available. The property was configured with value \'TLS\', which was not the default.<br>BIP8470I: Loading configuration for integration server \'server1\'.<br>BIP8470I: Loading configuration for integration server \'server2\'.<br>BIP8473I: Creating target integration node \'MY_V10NEWNODENAME\'.<br>BIP8691W: Migrating local web users accounts and configuring \'webUserPasswordHashAlgorithm\' with value \'SHA-1\' for compatibility.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsilist</code><br><br>The command response should look like this:<br><br><code>BIP1326I: Integration node \'MY_V10NEWNODENAME\' is stopped.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsistart MY_V10NEWNODENAME</code><br><br>The command response should look like this:<br><br><code>BIP8096I: Successful command initiation, check the system log to ensure that the component started without problem and that it continues to run without problem.</code>"},{"details":"<code>mqsilist MY_V10NEWNODENAME -e server1</code><br><br>The command response should look like this:<br><br><code>BIP1275I: Application \'Transformation_ESQL\' on integration server \'server1\' is running.<br>BIP1390I: Policy project \'DefaultPolicies\' is deployed to integration server \'server1\'.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsilist MY_V10NEWNODENAME -e server2</code><br><br>The command response should look like this:<br><br><code>BIP1390I: Policy project \'DefaultPolicies\' is deployed to integration server \'server2\'.<br>BIP1875I: Service \'TemperatureConverter\' on integration server \'server2\' is running.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsireportdbparms MY_V10NEWNODENAME -n sftp::user1 -u ben -p pass123</code><br><br>The command response should look like this:<br><br><code>BIP8180I: The resource name \'sftp::user1\' has userID \'ben\'.<br>BIP8201I: The password you entered, \'pass123\' for resource \'sftp::user1\' and userId \'ben\' is correct.<br>BIP8071I: Successful command completion.</code>"},{"details":"Open a web browser and go to the URL <b>http://localhost:4427</b> and you will see that the same administration port is being used by the migrated node. Navigate into the tiles representing server1 and server2 and you will find that the integrations which were deployed to IBM Integration Bus 10 have been retained. Note that the FTP configurable service has been converted into a policy and placed into a policy project name <b>DefaultPolicies</b>."}]}},{"section":"<b>Extract one integration server from an IBM Integration Bus 10 integration node into an IBM App Connect Enterprise 12 independent integration server</b>","steps":{"type":"ordered","details":[{"details":"We will now repeat the use of the mqsiextractcomponents command, but this time we will direct the command to extract only one integration server, and to create the working directory for an independent integration server. This is one approach you could take if you are considering moving from a traditional node-based architecture topology into a container model with an independent integration server."},{"details":"<code>mqsiextractcomponents --backup-file C:\\\\MyToolkitWorkspace\\\\MigrationTutorialHelperFiles\\\\Backups\\\\Backup_MY_NODE_V10.zip --source-integration-node MY_NODE_V10 --source-integration-server server1 --target-work-directory C:\\\\temp\\\\extracted_server1</code><br><br>The command response should look like this:<br><br><code>BIP8469I: Version \'10.0\' backup file supplied.<br>BIP8471I: Loading configuration for source integration node \'MY_NODE_V10\'.<br>BIP8470I: Loading configuration for integration server \'server1\'.<br>BIP8472I: Creating target work directory \'C:\\\\temp\\\\extracted_server1\'.<br>BIP8071I: Successful command completion.</code><br><br><code>dir C:\\\\temp\\\\extracted_server1\\\\run</code><br><br>The command response should look like this:<br><br><code>&nbsp;Volume in drive C is Windows<br>&nbsp;Volume Serial Number is 0483-269F<br><br>&nbsp;Directory of C:\\\\temp\\\\extracted_server1\\\\run<br><br>24/05/2021&nbsp;&nbsp;21:58&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<br>24/05/2021&nbsp;&nbsp;21:58&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;..<br>24/05/2021&nbsp;&nbsp;21:58&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultPolicies<br>24/05/2021&nbsp;&nbsp;21:58&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Transformation_ESQL<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 File(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 bytes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4 Dir(s)&nbsp;16,931,385,344 bytes free</code>"}]}},{"section":"<b>Extract a whole IBM App Connect Enterprise 11 integration node into an IBM App Connect Enterprise 12 integration node</b>","steps":{"type":"ordered","details":[{"details":"<code>mqsiextractcomponents --backup-file C:\\\\MyToolkitWorkspace\\\\MigrationTutorialHelperFiles\\\\Backups\\\\Backup_MY_NODE_V11.zip --source-integration-node MY_NODE_V11 --target-integration-node MY_V11NEWNODENAME</code><br><br>The command response should look like this:<br><br><code>BIP8469I: Version \'11.0\' backup file supplied.<br>BIP8471I: Loading configuration for source integration node \'MY_NODE_V11\'.<br>BIP8470I: Loading configuration for integration server \'serverA\'.<br>BIP8470I: Loading configuration for integration server \'serverB\'.<br>BIP8473I: Creating target integration node \'MY_V11NEWNODENAME\'.<br>BIP8691W: Migrating local web users accounts and configuring \'webUserPasswordHashAlgorithm\' with value \'SHA-1\' for compatibility.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsilist</code><br><br>The command response should look like this:<br><br><code>BIP1326I: Integration node \'MY_V11NEWNODENAME\' is stopped.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsistart MY_V11NEWNODENAME</code><br><br>The command response should look like this:<br><br><code>BIP8096I: Successful command initiation, check the system log to ensure that the component started without problem and that it continues to run without problem.</code>"},{"details":"<code>mqsilist MY_V11NEWNODENAME -e serverA</code><br><br>The command response should look like this:<br><br><code>BIP1275I: Application \'Transformation_ESQL\' on integration server \'serverA\' is running.<br>BIP1390I: Policy project \'DefaultPolicies\' is deployed to integration server \'serverA\'.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsilist MY_V11NEWNODENAME -e serverB</code><br><br>The command response should look like this:<br><br><code>BIP1390I: Policy project \'DefaultPolicies\' is deployed to integration server \'serverB\'.<br>BIP1875I: Service \'TemperatureConverter\' on integration server \'serverB\' is running.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>mqsireportdbparms MY_V10NEWNODENAME -n sftp::user1 -u ben -p pass123</code><br><br>The command response should look like this:<br><br><code>BIP8180I: The resource name \'sftp::user1\' has userID \'ben\'.<br>BIP8201I: The password you entered, \'pass123\' for resource \'sftp::user1\' and userId \'ben\' is correct.<br>BIP8071I: Successful command completion.</code>"},{"details":"Open a web browser and go to the URL <b>http://localhost:4442</b> and you will see that the same administration port is being used by the migrated node. Navigate into the tiles representing serverA and serverB and you will find that the integrations which were deployed to IBM App Connect Enterprise 11 have been retained."}]}},{"section":"<b>Extract one integration server from an IBM App Connect Enterprise 11 integration node into an IBM App Connect Enterprise 12 independent integration server</b>","steps":{"type":"ordered","details":[{"details":"We will now repeat the use of the mqsiextractcomponents command, but this time we will direct the command to extract only one integration server, and to create the working directory for an independent integration server. This is one approach you could take if you are considering moving from a traditional node-based architecture topology into a container model with an independent integration server."},{"details":"<code>mqsiextractcomponents --backup-file  C:\\\\MyToolkitWorkspace\\\\MigrationTutorialHelperFiles\\\\Backups\\\\Backup_MY_NODE_V11.zip --source-integration-node MY_NODE_V11 --source-integration-server serverA --target-work-directory C:\\\\temp\\\\extracted_serverA</code><br><br>The command response should look like this:<br><br><code>BIP8469I: Version \'11.0\' backup file supplied.<br>BIP8471I: Loading configuration for source integration node \'MY_NODE_V11\'.<br>BIP8470I: Loading configuration for integration server \'serverA\'.<br>BIP8472I: Creating target work directory \'C:\\\\temp\\\\extracted_serverA\'.<br>BIP8071I: Successful command completion.</code>"},{"details":"<code>dir C:\\\\temp\\\\extracted_serverA\\\\run</code><br><br>The command response should look like this:<br><br><code>&nbsp;Volume in drive C is Windows<br>&nbsp;Volume Serial Number is 0483-269F<br><br>&nbsp;Directory of C:\\\\temp\\\\extracted_serverA\\\\run<br><br>24/05/2021&nbsp;&nbsp;22:27&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.<br>24/05/2021&nbsp;&nbsp;22:27&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;..<br>24/05/2021&nbsp;&nbsp;22:27&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DefaultPolicies<br>24/05/2021&nbsp;&nbsp;22:27&nbsp;&nbsp;&nbsp;&nbsp;&lt;DIR&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Transformation_ESQL<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 File(s)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0 bytes<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4 Dir(s)&nbsp;16,656,842,752 bytes free</code>"},{"details":"This tutorial has shown how to use the mqsiextractcomponents command to create integration nodes and servers based on existing IBM Integration Bus 10 and IBM App Connect Enterprise 11 topologies."}]}}]}}}}},"JSON Input Validation using an OpenAPI Specification in JSON format":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON Input Validation using an OpenAPI Specification in JSON format","shortDescription":"Learn how to validate input JSON messages over HTTP by checking them against an OpenAPI Specification document in JSON format.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JSON validation"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to validate JSON message data in a flow using an OpenAPI Specification document."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and checks the data against an OpenAPI Specification document using the HTTP Input node. Three example input messages are provided, one which passes validation and two which will fail validation in different ways. A graphical mapping node transforms the input JSON message into an output XML message which is used to construct a reply message which is returned to the requesting client using an HTTPReply node."},{"section":"The tutorial requires an integration node owned server, or an independent integration server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>Validate_Using_OAS_JSON</span>. <span class=\'application\'>Validate_Using_OAS_JSON</span> provides a single message flow named <span class=\'application\'>Validate_Using_OAS_JSON</span> which receives data using an HTTP Input node. This node is configured to expect a JSON message which conforms to the OpenAPI Specification document named <span class=\'resource\'>ShoppingListAPI.json</span>."},{"section":"The Input Message Parsing settings on the HTTP Input node are as follows:<br><b>Message domain:</b><code>JSON: For JavaScript Object Notation messages</code><br><b>Message model:</b><code>ShoppingListAPI.json</code><br><b>Message:</b><code>#/components/schemas/Item</code><br><br>The node is configured to validate immediately when data arrives, and if the data is invalid, to throw an exception (in JSON format). Next the graphical mapping node generates a suitable reply which is returned using the HTTPReply node at the end of the flow."},{"section":"Once imported, the provided project is ready to be deployed and tested, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create a local integration server","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"Use the Flow Exerciser to test out the flow:","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Validate_Using_OAS_JSON.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Three saved messages are provided..."},{"details":"The input message <span class=\'resource\'>Valid</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": 2,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive an XML reply message like this:<br><code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;out:Item xmlns:out=\\"http://www.example.org/OutputXMLSchema\\"&gt;<br>&nbsp;&nbsp;&lt;out:Name&gt;Bread&lt;/out:Name&gt;<br>&nbsp;&nbsp;&lt;out:Department&gt;Bakery&lt;/out:Department&gt;<br>&nbsp;&nbsp;&lt;out:TotalCost&gt;1.64&lt;/out:TotalCost&gt;<br>&nbsp;&nbsp;&lt;out:Description&gt;The best loaf for nearly no dough&lt;/out:Description&gt;<br>&lt;/out:Item&gt;</code><br><br>After you close the dialog, the path taken through the messageflow will be highlighted."},{"details":"The input message <span class=\'resource\'>Invalid_WrongDataType</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the quantity field was of the wrong data type:<br><br><b>\'Property has a type \'string\' that is not in the following list: \'integer\'.\'.  The location of the error in the JSON message is \'#/quantity\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item/properties/quantity\'.</b>"},{"details":"The input message <span class=\'resource\'>Invalid_MissingField</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the description field was missing:<br><br><b>\'Object is missing the following members required by the schema: \'description\'.\'.  The location of the error in the JSON message is \'#\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item\'.</b>"}]}}]}},{"section":"This tutorial has shown how to validate input JSON messages over HTTP by checking them against an OpenAPI Specification document in JSON format."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Validate node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20803_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"JSON Input Validation using an OpenAPI Specification in YAML format":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON Input Validation using an OpenAPI Specification in YAML format","shortDescription":"Learn how to validate input JSON messages over HTTP by checking them against an OpenAPI Specification document in YAML format.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JSON validation"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to validate JSON message data in a flow using an OpenAPI Specification document."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and checks the data against an OpenAPI Specification document using the HTTP Input node. Three example input messages are provided, one which passes validation and two which will fail validation in different ways. A graphical mapping node transforms the input JSON message into an output XML message which is used to construct a reply message which is returned to the requesting client using an HTTPReply node."},{"section":"The tutorial requires an integration node owned server, or an independent integration server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>Validate_Using_OAS_YAML</span>. <span class=\'application\'>Validate_Using_OAS_YAML</span> provides a single message flow named <span class=\'application\'>Validate_Using_OAS_YAML</span> which receives data using an HTTP Input node. This node is configured to expect a JSON message which conforms to the OpenAPI Specification document named <span class=\'resource\'>ShoppingListAPI.yaml</span>."},{"section":"The Input Message Parsing settings on the HTTP Input node are as follows:<br><b>Message domain:</b><code>JSON: For JavaScript Object Notation messages</code><br><b>Message model:</b><code>ShoppingListAPI.yaml</code><br><b>Message:</b><code>#/components/schemas/Item</code><br><br>The node is configured to validate immediately when data arrives, and if the data is invalid, to throw an exception (in JSON format). Next the graphical mapping node generates a suitable reply which is returned using the HTTPReply node at the end of the flow."},{"section":"Once imported, the provided project is ready to be deployed and tested, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create a local integration server","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"Use the Flow Exerciser to test out the flow:","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Validate_Using_OAS_YAML.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Three saved messages are provided..."},{"details":"The input message <span class=\'resource\'>Valid</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": 2,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive an XML reply message like this:<br><code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;out:Item xmlns:out=\\"http://www.example.org/OutputXMLSchema\\"&gt;<br>&nbsp;&nbsp;&lt;out:Name&gt;Bread&lt;/out:Name&gt;<br>&nbsp;&nbsp;&lt;out:Department&gt;Bakery&lt;/out:Department&gt;<br>&nbsp;&nbsp;&lt;out:TotalCost&gt;1.64&lt;/out:TotalCost&gt;<br>&nbsp;&nbsp;&lt;out:Description&gt;The best loaf for nearly no dough&lt;/out:Description&gt;<br>&lt;/out:Item&gt;</code><br><br>After you close the dialog, the path taken through the messageflow will be highlighted."},{"details":"The input message <span class=\'resource\'>Invalid_WrongDataType</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the quantity field was of the wrong data type:<br><br><b>\'Property has a type \'string\' that is not in the following list: \'integer\'.\'.  The location of the error in the JSON message is \'#/quantity\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item/properties/quantity\'.</b>"},{"details":"The input message <span class=\'resource\'>Invalid_MissingField</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the description field was missing:<br><br><b>\'Object is missing the following members required by the schema: \'description\'.\'.  The location of the error in the JSON message is \'#\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item\'.</b>"}]}}]}},{"section":"This tutorial has shown how to validate input JSON messages over HTTP by checking them against an OpenAPI Specification document in YAML format."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Validate node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20803_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"JSON Input Validation using a JSON Schema in JSON format":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON Input Validation using a JSON Schema in JSON format","shortDescription":"Learn how to validate input JSON messages over HTTP by checking them against a JSON schema in JSON format.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JSON validation"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to validate JSON message data in a flow using a JSON schema in JSON format."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and checks the data against a JSON Schema using the HTTP Input node. Three example input messages are provided, one which passes validation and two which will fail validation in different ways. A graphical mapping node transforms the input JSON message into an output XML message which is used to construct a reply message which is returned to the requesting client using an HTTPReply node."},{"section":"The tutorial requires an integration node owned server, or an independent integration server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>Validate_Using_Schema_JSON</span>. <span class=\'application\'>Validate_Using_Schema_JSON</span> provides a single message flow named <span class=\'application\'>Validate_Using_Schema_JSON</span> which receives data using an HTTP Input node. This node is configured to expect a JSON message which conforms to the JSON Schema named <span class=\'resource\'>ItemSchema.json</span>."},{"section":"The Input Message Parsing settings on the HTTP Input node are as follows:<br><b>Message domain:</b><code>JSON: For JavaScript Object Notation messages</code><br><b>Message model:</b><code>ItemSchema.json</code><br><b>Message:</b><code>&lt;blank&gt;</code><br><br>The node is configured to validate immediately when data arrives, and if the data is invalid, to throw an exception (in JSON format). Next the graphical mapping node generates a suitable reply which is returned using the HTTPReply node at the end of the flow."},{"section":"Once imported, the provided project is ready to be deployed and tested, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create a local integration server","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"Use the Flow Exerciser to test out the flow:","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Validate_Using_Schema_JSON.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Three saved messages are provided..."},{"details":"The input message <span class=\'resource\'>Valid</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": 2,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive an XML reply message like this:<br><code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;out:Item xmlns:out=\\"http://www.example.org/OutputXMLSchema\\"&gt;<br>&nbsp;&nbsp;&lt;out:Name&gt;Bread&lt;/out:Name&gt;<br>&nbsp;&nbsp;&lt;out:Department&gt;Bakery&lt;/out:Department&gt;<br>&nbsp;&nbsp;&lt;out:TotalCost&gt;1.64&lt;/out:TotalCost&gt;<br>&nbsp;&nbsp;&lt;out:Description&gt;The best loaf for nearly no dough&lt;/out:Description&gt;<br>&lt;/out:Item&gt;</code><br><br>After you close the dialog, the path taken through the messageflow will be highlighted."},{"details":"The input message <span class=\'resource\'>Invalid_WrongDataType</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the quantity field was of the wrong data type:<br><br><b>\'Property has a type \'string\' that is not in the following list: \'integer\'.\'.  The location of the error in the JSON message is \'#/quantity\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item/properties/quantity\'.</b>"},{"details":"The input message <span class=\'resource\'>Invalid_MissingField</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the description field was missing:<br><br><b>\'Object is missing the following members required by the schema: \'description\'.\'.  The location of the error in the JSON message is \'#\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item\'.</b>"}]}}]}},{"section":"This tutorial has shown how to validate input JSON messages over HTTP by checking them against a JSON schema in JSON format."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Validate node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20803_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"JSON Input Validation using a JSON Schema in YAML format":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"JSON Input Validation using a JSON Schema in YAML format","shortDescription":"Learn how to validate input JSON messages over HTTP by checking them against a JSON schema in YAML format.","durationText":"This tutorial takes approximately","durationTime":"5 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"JSON validation"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to validate JSON message data in a flow using a JSON schema in YAML format."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and checks the data against a JSON Schema using the HTTP Input node. Three example input messages are provided, one which passes validation and two which will fail validation in different ways. A graphical mapping node transforms the input JSON message into an output XML message which is used to construct a reply message which is returned to the requesting client using an HTTPReply node."},{"section":"The tutorial requires an integration node owned server, or an independent integration server."},{"section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, one project will be created in your workspace: An application named <span class=\'application\'>Validate_Using_Schema_YAML</span>. <span class=\'application\'>Validate_Using_Schema_YAML</span> provides a single message flow named <span class=\'application\'>Validate_Using_Schema_YAML</span> which receives data using an HTTP Input node. This node is configured to expect a JSON message which conforms to the JSON Schema named <span class=\'resource\'>ItemSchema.yaml</span>."},{"section":"The Input Message Parsing settings on the HTTP Input node are as follows:<br><b>Message domain:</b><code>JSON: For JavaScript Object Notation messages</code><br><b>Message model:</b><code>ItemSchema.yaml</code><br><b>Message:</b><code>&lt;blank&gt;</code><br><br>The node is configured to validate immediately when data arrives, and if the data is invalid, to throw an exception (in JSON format). Next the graphical mapping node generates a suitable reply which is returned using the HTTPReply node at the end of the flow."},{"section":"Once imported, the provided project is ready to be deployed and tested, as described on the Prepare tab."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing integration solutions from scratch","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/bi12002_.htm","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Create a local integration server","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"Prepare the scenario by executing the following steps:","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit\'s workspace as the work directory. Click OK to dismiss the Success dialog."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"Use the Flow Exerciser to test out the flow:","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"steps":{"type":"ordered","details":[{"details":"Open <span class=\'resource\'>Validate_Using_Schema_YAML.msgflow</span>.","substeps":{"type":"unordered","details":[{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Three saved messages are provided..."},{"details":"The input message <span class=\'resource\'>Valid</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": 2,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive an XML reply message like this:<br><code>&lt;?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?&gt;<br>&lt;out:Item xmlns:out=\\"http://www.example.org/OutputXMLSchema\\"&gt;<br>&nbsp;&nbsp;&lt;out:Name&gt;Bread&lt;/out:Name&gt;<br>&nbsp;&nbsp;&lt;out:Department&gt;Bakery&lt;/out:Department&gt;<br>&nbsp;&nbsp;&lt;out:TotalCost&gt;1.64&lt;/out:TotalCost&gt;<br>&nbsp;&nbsp;&lt;out:Description&gt;The best loaf for nearly no dough&lt;/out:Description&gt;<br>&lt;/out:Item&gt;</code><br><br>After you close the dialog, the path taken through the messageflow will be highlighted."},{"details":"The input message <span class=\'resource\'>Invalid_WrongDataType</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"description\\": \\"The best loaf for nearly no dough\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the quantity field was of the wrong data type:<br><br><b>\'Property has a type \'string\' that is not in the following list: \'integer\'.\'.  The location of the error in the JSON message is \'#/quantity\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item/properties/quantity\'.</b>"},{"details":"The input message <span class=\'resource\'>Invalid_MissingField</span> contains this data:<br><code>{<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"name\\": \\"Bread\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"department\\": \\"Bakery\\",<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"price\\": 0.82,<br>&nbsp;&nbsp;&nbsp;&nbsp;\\"quantity\\": \\"2\\"<br>}</code><br><br>Select this input message and click Send and your message is sent to the HTTPInput node. You will receive a validation error and the detail will explain what was wrong - that the description field was missing:<br><br><b>\'Object is missing the following members required by the schema: \'description\'.\'.  The location of the error in the JSON message is \'#\'.  The matching location in the JSON schema is \'ShoppingListAPI.json#/components/schemas/Item\'.</b>"}]}}]}},{"section":"This tutorial has shown how to validate input JSON messages over HTTP by checking them against a JSON schema in YAML format."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Validate node","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/ac20803_.htm","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the IBM Cloudant Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the IBM Cloudant Request node","shortDescription":"Learn how to use the IBM Cloudant Request node (requires v12.0.5.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"IBM Cloudant Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to IBM Cloudant and issue requests to create, retrieve, update, delete, or view objects in IBM Cloudant."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"IBM\xae Cloudant\xae is a highly scalable JSON (JavaScript Object Notation) database service, which stores JSON formatted documents. This tutorial demonstrates how to develop and run a message flow that connects to IBM Cloudant and issues synchronous requests to retrieve information. This tutorial requires access to an IBM Cloudant system. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store an IBM Cloudant policy containing connection information."},{"section":"3. Select the object and action which the IBM Cloudant Request node will execute"},{"section":"4. Select Filters which influence the way in which the message flow selects data"},{"section":"5. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of IBM Cloudant."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using IBM Cloudant with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/SSTTDS_12.0?topic=applications-using-cloudant-app-connect-enterprise","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleCloudant</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleCloudant</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectCloudant</span>"},{"section":"<span class=\'application\'>ExampleCloudant</span> contains a single message flow named <span class=\'application\'>ExampleCloudantFlow</span>. To save you time, most of the message flow is ready for use, but the IBM Cloudant Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the IBM Cloudant Request communicates with Cloudant. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleCloudant</span> is very similar to <span class=\'application\'>ExampleCloudant</span> but the message flow which it contains, named  <span class=\'application\'>ExampleCloudantFlow</span> (which exposes a different URL Fragment), has already had its IBM Cloudant Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectCloudant</span> contains a single policy named <span class=\'application\'>IBMCloudant1</span> which is used by the application <span class=\'application\'>CompleteExampleCloudant</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using IBM Cloudant with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-cloudant-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"IBM Cloudant Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-cloudant-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Cloudant. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleCloudantFlow</span> in application <span class=\'application\'>ExampleCloudant</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the IBM Cloudant Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Cloudant Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Cloudant and discovering information from it, will cause your Cloudant credentials to be saved in the vault, and your Cloudant connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectCloudant</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a Cloudant system then a list of those connections would be displayed, but in this example the status of the IBM Cloudant connector is shown as <code>Not connected</code>. Underneath this you will see a list of Cloudant objects (such as Attachments, Databases, Documents and Views) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Documents</code> section and choose to <code>Retrieve documents</code>. The list of objects and actions will be replace with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Cloudant, and offer four optional fields for <strong>Cloudant username</strong>, <strong>Cloudant password</strong>, <strong>Cloudant host</strong> and <strong>Cloudant API Key</strong>. Type in the required details - the simplest combination would be to provide just the <strong>Cloudant host</strong> and <strong>Cloudant API Key</strong>. Click Connect."},{"details":"Connecting to Cloudant may take a few seconds, and you should then see a Database field which provides an enumerated drop-down list of the databases  defined in your Cloudant service instance. Pick one from the list. Reduce the value for Maximum number of items to retrieve to 1, which should also cause the radio button to select the option to <code>Process 1 item from the collection</code>. This will ensure that the data returned from Cloudant is relatively small, for the purpose of a simple example."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the IBM Cloudant Request node in the message flow have been updated. Save the message flow.  Explore the properties of the IBM Cloudant Request node. The Basic properties tab will now display a short description of <code>Retrieve documents</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>object</strong> (<code>document</code>). The database name will also be shown. On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectCloudant}:IBMCloudant1</code>. The Filter properties tab will show the Filter Limit which we just selected."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectCloudant</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleCloudantFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Cloudant, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the IBM Cloudant Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the IBM Cloudant Request node to see the data which has been retrieved from the database. The structure of this JSON message will depend on the structure of the first document found in your selected database."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleCloudant to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Cloudant service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type cloudantdb --credential-name CompletePolicyProjectCloudant_IBMCloudant1 --api-key &lt;YourCloudantAPIKey&gt; --username \\"\\" --password \\"\\"</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>IBMCloudant1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectCloudant</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>Cloudant host</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_CLOUDANT_HOST</code>. As the name suggests, replace this value with the host name of your Cloudant service instance, and save the policy.  Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectCloudant</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleCloudantFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Cloudant, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the IBM Cloudant Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the IBM Cloudant Request node to see the data which has been retrieved from the database. The structure of this JSON message will depend on the structure of the first document found in your selected database."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"IBM Cloudant Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-cloudant-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Microsoft Azure Blob storage Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Microsoft Azure Blob storage Request node","shortDescription":"Learn how to use the Microsoft Azure Blob storage Request node (requires v12.0.5.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Microsoft Azure Blob storage Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Microsoft Azure Blob storage and issue requests to create, retrieve, update, delete, or view objects in Microsoft Azure Blob storage."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Microsoft Azure Blob storage is a Cloud Object Storage solution. This tutorial demonstrates how to develop and run a message flow that connects to Microsoft Azure Blob storage and issues synchronous requests to retrieve information. This tutorial requires access to Microsoft Azure Blob storage. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a Microsoft Azure Blob storage policy containing connection information."},{"section":"3. Select the object and action which the Microsoft Azure Blob storage Request node will execute"},{"section":"4. Select Filters which influence the way in which the message flow selects data"},{"section":"5. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of Microsoft Azure Blob storage."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Microsoft Azure Blob storage with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=cca-using-microsoft-azure-blob-storage-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to Microsoft Azure Blob storage from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=umabsace-connecting-microsoft-azure-blob-storage-from-app-connect-enterprise","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleAzureBlobStorage</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleAzureBlobStorage</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectAzureBlobStorage</span>"},{"section":"<span class=\'application\'>ExampleAzureBlobStorage</span> contains a single message flow named <span class=\'application\'>ExampleAzureBlobStorageFlow</span>. To save you time, most of the message flow is ready for use, but the Microsoft Azure Blob storage Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the Microsoft Azure Blob storage Request communicates with Microsoft Azure Blob storage. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleAzureBlobStorage</span> is very similar to <span class=\'application\'>ExampleAzureBlobStorage</span> but the message flow which it contains, named  <span class=\'application\'>ExampleAzureBlobStorageFlow</span> (which exposes a different URL Fragment), has already had its Microsoft Azure Blob storage Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectAzureBlobStorage</span> contains a single policy named <span class=\'application\'>MicrosoftAzureBlobstorage1</span> which is used by the application <span class=\'application\'>CompleteExampleAzureBlobStorage</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Microsoft Azure Blob storage with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=cca-using-microsoft-azure-blob-storage-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Microsoft Azure Blob Storage Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-microsoft-azure-blob-storage-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Microsoft Azure Blob storage. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleAzureBlobStorageFlow</span> in application <span class=\'application\'>ExampleAzureBlobStorage</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Microsoft Azure Blob storage Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Microsoft Azure Blob storage Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Microsoft Azure Blob storage and discovering information from it, will cause your Microsoft Azure Blob storage credentials to be saved in the vault, and your Microsoft Azure Blob storage connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectAzureBlobStorage</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a Microsoft Azure Blob storage system then a list of those connections would be displayed, but in this example the status of the Microsoft Azure Blob storage connector is shown as <code>Not connected</code>. Underneath this you will see a list of Microsoft Azure Blob storage objects (such as Append blobs, Blob services, Blobs, Containers, Page blobs, Snapshots and Versions) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Containers</code> section and choose to <code>Retrieve containers</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Microsoft Azure Blob storage, and offer a drop-down choice of <strong>Authorization method</strong> which can be either <code>Provide credentials for App Connect to use (BASIC)</code> or <code>Provide credentials for App Connect to use (API KEY)</code>. Select the second of these options and fill out the fields specifying your <strong>Storage account name</strong> and <strong>Storage account key</strong>. Click Connect."},{"details":"Connecting to Microsoft Azure Blob storage may take a few seconds, and you should then see a link to <strong>Add condition</strong>. Click this link and the display will update with a Where clause. Choose to select by <strong>Container name</strong> and type the name of a container which you have defined in your instance of Microsoft Azure Blob storage.  Reduce the value for Maximum number of items to retrieve to 1, which should also cause the radio button to select the option to <code>Process 1 item from the collection</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Microsoft Azure Blob storage Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Microsoft Azure Blob storage Request node. The Basic properties tab will now display a short description of <code>Retrieve containers</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>object</strong> (<code>container</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectAzureBlobStorage}:MicrosoftAzureBlobstorage1</code>. The Filter properties tab will show the Filter Limit which we just selected."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectAzureBlobStorage</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleAzureBlobStorageFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Microsoft Azure Blob storage, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Microsoft Azure Blob storage Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Microsoft Azure Blob storage Request node to see the data which has been retrieved."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleAzureBlobStorage to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Microsoft Azure Blob storage service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type azureblobstorage --credential-name CompletePolicyProjectAzureBlobStorage_MicrosoftAzureBlobstorage1 --api-key &lt;YourMicrosoftAzureBlobStorageAPIKey&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>MicrosoftAzureBlobstorage1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectAzureBlobStorage</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>Storage account name</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_STORAGE_ACCOUNT_NAME</code>. As the name suggests, replace this value with the storage account name of your service instance, and save the policy.  Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectAzureBlobStorage</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleAzureBlobStorageFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. The message flow expects to receive a well-formed JSON input message which carries a value to be used for the Container name in the query of your Microsoft Azure Blob storage containers, for example something like this: <code>{&quot;ContainerName&quot;:&quot;blobcontainerone&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Microsoft Azure Blob Storage, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Microsoft Azure Blob storage Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Microsoft Azure Blob storage Request node to see the data which has been retrieved."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Microsoft Azure Blob Storage Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-microsoft-azure-blob-storage-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Coupa Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Coupa Request node","shortDescription":"Learn how to use the Coupa Request node (requires v12.0.5.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Coupa Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Coupa and issue requests to create, retrieve, update, delete, or view objects in Coupa."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Coupa software allows you to manage and analyze your employees\' spending, from procurement to invoicing and expenses. IBM App Connect Enterprise provides a Coupa Request node, which enables you to connect to Coupa and issue requests to create, retrieve, and update objects such as expense reports, exchange rates, and invoices. This tutorial demonstrates how to develop and run a message flow that connects to Coupa and issues synchronous requests to retrieve information. This tutorial requires access to Coupa. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a Coupa policy containing connection information."},{"section":"3. Select the object and action which the Coupa Request node will execute"},{"section":"4. Select Filters which influence the way in which the message flow selects data"},{"section":"5. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of Coupa."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Coupa with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-coupa-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to Coupa from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=enterprise-connecting-coupa-from-app-connect","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleCoupa</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleCoupa</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectCoupa</span>"},{"section":"<span class=\'application\'>ExampleCoupa</span> contains a single message flow named <span class=\'application\'>ExampleCoupaFlow</span>. To save you time, most of the message flow is ready for use, but the Coupa Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the Coupa Request communicates with Coupa. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleCoupa</span> is very similar to <span class=\'application\'>ExampleCoupa</span> but the message flow which it contains, named  <span class=\'application\'>ExampleCoupaFlow</span> (which exposes a different URL Fragment), has already had its Coupa Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectCoupa</span> contains a single policy named <span class=\'application\'>Coupa1</span> which is used by the application <span class=\'application\'>CompleteExampleCoupa</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Coupa with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-coupa-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Coupa Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-coupa-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Coupa. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleCoupaFlow</span> in application <span class=\'application\'>ExampleCoupa</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Coupa Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Coupa Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Coupa and discovering information from it, will cause your Coupa credentials to be saved in the vault, and your Coupa connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectCoupa</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a Coupa system then a list of those connections would be displayed, but in this example the status of the Coupa connector is shown as <code>Not connected</code>. Underneath this you will see a list of Coupa objects (such as Addresses, Exchange rates, Expense reports, Inventory transactions, Invoices, Lookup values, Purchase orders, Remit-to addresses, Suppliers and Users) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Invoices</code> section and choose to <code>Retrieve invoices</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Coupa, and offer two mandatory fields for <strong>API URL</strong> and <strong>API Key</strong>. Type in these required details and then click Connect."},{"details":"Connecting to Coupa may take a few seconds, and you should then see displayed a mandatory field named <strong>Supplier</strong>, with a drop-down list of potential suppliers. Select one of the suppliers in your system for which you wish to retrieve invoices. Reduce the value for Maximum number of items to retrieve to 1, which should also cause the radio button to select the option to <code>Process 1 item from the collection</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Coupa Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Coupa Request node. The Basic properties tab will now display a short description of <code>Retrieve invoices</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>object</strong> (<code>invoices</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectCoupa}:Coupa1</code>. The Filter properties tab will show the Filter Limit which we just selected."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectCoupa</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleCoupaFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Coupa, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Coupa Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Coupa Request node to see the data which has been retrieved."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleCoupa to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Coupa service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type coupa --credential-name CompletePolicyProjectCoupa_Coupa1 --api-key &lt;YourCoupaAPIKey&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>Coupa1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectCoupa</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>API URL</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_API_URL</code>. As the name suggests, replace this value with the URL for the Coupa REST API of your service instance, and save the policy.  Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectCoupa</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleCoupaFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. The message flow expects to receive a well-formed JSON input message which carries a value to be used for the Supplier in the query of Coupa invoices: <code>{&quot;Supplier&quot;:&quot;4&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Coupa, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Coupa Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Coupa Request node to see the data which has been retrieved."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Coupa Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-coupa-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Amazon S3 Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Amazon S3 Request node","shortDescription":"Learn how to use the Amazon S3 Request node (requires v12.0.5.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Amazon S3 Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Amazon S3 and issue requests to create, retrieve, update, delete, or view objects in Amazon S3."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Amazon Simple Storage Service (Amazon S3) is a simple storage service that provides object storage through a web service interface. It uses the scalable storage infrastructure of Amazon.com and enables you to store objects, download and use data with other AWS services, and build applications that call for internet storage.  IBM App Connect Enterprise provides an Amazon S3 Request node, which enables you to connect to Amazon S3 and issue synchronous requests to create, retrieve, update, delete, or view objects. This tutorial demonstrates how to develop and run a message flow that connects to Amazon S3 and issues synchronous requests to retrieve information. This tutorial requires access to Amazon S3. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store an Amazon S3 policy containing connection information."},{"section":"3. Select the object and action which the Amazon S3 Request node will execute"},{"section":"4. Select Filters which influence the way in which the message flow selects data"},{"section":"5. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of Amazon S3."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Amazon S3 with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-amazon-s3-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to Amazon S3 from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=enterprise-connecting-amazon-s3-from-app-connect","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleAmazonS3</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleAmazonS3</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectAmazonS3</span>"},{"section":"<span class=\'application\'>ExampleAmazonS3</span> contains a single message flow named <span class=\'application\'>ExampleAmazonS3Flow</span>. To save you time, most of the message flow is ready for use, but the Amazon S3 Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the Amazon S3 Request communicates with Amazon S3. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleAmazonS3</span> is very similar to <span class=\'application\'>ExampleAmazonS3</span> but the message flow which it contains, named  <span class=\'application\'>ExampleAmazonS3Flow</span> (which exposes a different URL Fragment), has already had its AmazonS3 Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectAmazonS3</span> contains a single policy named <span class=\'application\'>AmazonS31</span> which is used by the application <span class=\'application\'>CompleteExampleAmazonS3</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Amazon S3 with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-amazon-s3-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Amazon S3 Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-amazon-s3-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Amazon S3. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleAmazonS3Flow</span> in application <span class=\'application\'>ExampleAmazonS3</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Amazon S3 Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Amazon S3 Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Amazon S3 and discovering information from it, will cause your Amazon S3 credentials to be saved in the vault, and your Amazon S3 connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectAmazonS3</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to an Amazon S3 system then a list of those connections would be displayed, but in this example the status of the Amazon S3 connector is shown as <code>Not connected</code>. Underneath this you will see a list of Amazon S3 objects (such as Buckets, Object ACLs, Object tags and Objects) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Buckets</code> section and choose to <code>Retrieve all buckets</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Amazon S3, and offer two mandatory fields for <strong>Secret Access Key</strong> and <strong>Access key ID</strong>. Type in these required details and then click Connect."},{"details":"Connecting to Amazon S3 may take a few seconds. For this particular choice of action, because we are retrieving all buckets, there is no need for any further Where clause to be completed. Reduce the value for Maximum number of items to retrieve to 3, which should also cause the radio button to select the option to <code>Process 3 items from the collection</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Amazon S3 Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Amazon S3 Request node. The Basic properties tab will now display a short description of <code>Retrieve all buckets</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>object</strong> (<code>bucketcollection</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectAmazonS3}:AmazonS31</code>. The Filter properties tab will show the Filter Limit which we just selected."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectAmazonS3</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleAmazonS3Flow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Amazon S3, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Amazon S3 Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Amazon S3 Request node to see the data which has been retrieved."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleAmazonS3 to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Amazon S3 service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type amazons3 --credential-name CompletePolicyProjectAmazonS3_AmazonS31 --secret-access-key &lt;YourAmazonS3SecretAccessKey&gt; --access-key-id &lt;YourAmazonS3AccessKeyId&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>AmazonS31.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectAmazonS3</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>Region</strong> property is currently not configured (this is an optional field) but if you would like to focus your connection on a particular region you can fill out this field and resave the policy.  Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectAmazonS3</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleAmazonS3Flow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Amazon S3, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Amazon S3 Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Amazon S3 Request node to see the data which has been retrieved."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Amazon S3 Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-amazon-s3-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Magento Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Magento Request node","shortDescription":"Learn how to use the Magento Request node (requires v12.0.5.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Magento Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Magento and issue requests to create, retrieve, update, delete, or view objects in Magento."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Magento is an e-commerce platform that integrates online and physical shopping experiences. IBM App Connect Enterprise provides a Magento Request node, which enables you to connect to Magento and issue synchronous requests to create, retrieve, update, delete, or view objects. This tutorial demonstrates how to develop and run a message flow that connects to Magento and issues synchronous requests to retrieve information. This tutorial requires access to Magento. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a Magento policy containing connection information."},{"section":"3. Select the object and action which the Magento Request node will execute"},{"section":"4. Select Filters which influence the way in which the message flow selects data"},{"section":"5. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of Magento."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Magento with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-magento-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to Magento from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=enterprise-connecting-magento-from-app-connect","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleMagento</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleMagento</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectMagento</span>"},{"section":"<span class=\'application\'>ExampleMagento</span> contains a single message flow named <span class=\'application\'>ExampleMagentoFlow</span>. To save you time, most of the message flow is ready for use, but the Magento Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the Magento Request communicates with Magento. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleMagento</span> is very similar to <span class=\'application\'>ExampleMagento</span> but the message flow which it contains, named  <span class=\'application\'>ExampleMagentoFlow</span> (which exposes a different URL Fragment), has already had its Magento Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectMagento</span> contains a single policy named <span class=\'application\'>Magento1</span> which is used by the application <span class=\'application\'>CompleteExampleMagento</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Magento with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-magento-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Magento Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-magento-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Magento. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleMagentoFlow</span> in application <span class=\'application\'>ExampleMagento</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Magento Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Magento Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Magento and discovering information from it, will cause your Magento credentials to be saved in the vault, and your Magento connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectMagento</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a Magento system then a list of those connections would be displayed, but in this example the status of the Magento connector is shown as <code>Not connected</code>. Underneath this you will see a list of Magento objects (such as Attribute sets, Carts, Categories, Customer groups, Customers, Products, Sales credit memos, Sales invoices, Sales orders, Sales rule coupons, Sales rules and Sales shipments) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Products</code> section and choose to <code>Retrieve products</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Magento, and offer three mandatory fields for <strong>Store URL</strong>, <strong>User name</strong> and <strong>Password</strong>. Type in these required details and then click Connect."},{"details":"Connecting to Magento may take a few seconds. For this particular choice of action to Retrieve Products, once connected you will be shown a mandatory <strong>Attribute-Set</strong> property which will become part of the Where clause used to select the products from Magento. From the provided drop-down select a value for Attribute-Set. Next, reduce the value for Maximum number of items to retrieve to 1, which should also cause the radio button to select the option to <code>Process 1 item from the collection</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Magento Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Magento Request node. The Basic properties tab will now display a short description of <code>Retrieve products</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>object</strong> (<code>Product</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProject}:Magento1</code>. The Filter properties tab will show the Filter Limit which we just selected."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectMagento</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleMagentoFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Magento, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Magento Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Magento Request node to see the data which has been retrieved."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleMagento to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Magento service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type magento --credential-name CompletePolicyProjectMagento_Magento1 --username &lt;YourMagentoUsername&gt; --password &lt;YourMagentoPassword&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>Magento1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectMagento</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>Store URL</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_STORE_URL</code>. As the name suggests, replace this value with the Store URL for your Magento service instance, and save the policy.Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectMagento</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleMagentoFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. The message flow expects to receive a well-formed JSON input message which carries the value to be used for the Attribute-Set in the query of your Magento products, for example something like this: <code>{&quot;Attribute-Set&quot;:&quot;14&quot;}</code>.  Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Magento, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Magento Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Magento Request node to see the data which has been retrieved."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Magento Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-magento-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Salesforce Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Salesforce Request node","shortDescription":"Learn how to use the Salesforce Request node (requires v12.0.5.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Salesforce Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Salesforce and issue requests to create, retrieve, update, delete, or view objects in Salesforce."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Salesforce is a work management and project tracking app that provides projects, tasks, conversations, and dashboards to enable teams to collaborate and track progress online. IBM App Connect Enterprise provides a Salesforce Request node, which enables you to connect to Salesforce and issue synchronous requests to create, retrieve, update, delete, or view objects. This tutorial demonstrates how to develop and run a message flow that connects to Salesforce and issues synchronous requests to retrieve information. This tutorial requires access to Salesforce. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a Salesforce policy containing connection information."},{"section":"3. Select the object and action which the Salesforce Request node will execute"},{"section":"4. Select Filters which influence the way in which the message flow selects data"},{"section":"5. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of Salesforce."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Salesforce with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-salesforce-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to Salesforce from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=enterprise-connecting-salesforce-from-app-connect","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleSalesforce</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleSalesforce</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectSalesforce</span>"},{"section":"<span class=\'application\'>ExampleSalesforce</span> contains a single message flow named <span class=\'application\'>ExampleSalesforceFlow</span>. To save you time, most of the message flow is ready for use, but the Salesforce Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the Salesforce Request communicates with Salesforce. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleSalesforce</span> is very similar to <span class=\'application\'>ExampleSalesforce</span> but the message flow which it contains, named  <span class=\'application\'>ExampleSalesforceFlow</span> (which exposes a different URL Fragment), has already had its Salesforce Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectSalesforce</span> contains a single policy named <span class=\'application\'>Salesforce1</span> which is used by the application <span class=\'application\'>CompleteExampleSalesforce</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Salesforce with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-salesforce-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Salesforce Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-salesforce-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Salesforce. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleSalesforceFlow</span> in application <span class=\'application\'>ExampleSalesforce</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Salesforce Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Salesforce Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Salesforce and discovering information from it, will cause your Salesforce credentials to be saved in the vault, and your Salesforce connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectSalesforce</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a Salesforce system then a list of those connections would be displayed, but in this example the status of the Salesforce connector is shown as <code>Not connected</code>. Underneath this you will see a list of Salesforce objects (such as Accounts, Attachments, Campaigns, Cases, Contacts, Content documents, Events, File shares, Files, Folders, Leads, Opportunities, Orders, Products and Solutions) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Contacts</code> section and choose to <code>Retrieve contacts</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Salesforce, and offer a drop-down choice of <strong>Authorization method</strong> which can be either <code>Provide a username, password, and client credentials (OAUTH 2.0 PASSWORD)</code> or <code>Provide credentials for App Connect to use (BASIC OAUTH)</code>. Select the first of these options, click continue, and fill out the fields specifying your <strong>Login URL</strong>, <strong>Username</strong>, <strong>Password</strong>, <strong>Client ID</strong> and <strong>Client secret</strong>. Click Connect."},{"details":"Connecting to Salesforce may take a few seconds. For this particular choice of action to Retrieve contacts, there are no mandatory properties required in the Where clause used to select the contacts from Salesforce, but to reduce the number of contacts retrieved you can apply a limit.  Reduce the value for Maximum number of items to retrieve to 1, which should also cause the radio button to select the option to <code>Process 1 item from the collection</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Salesforce Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Salesforce Request node. The Basic properties tab will now display a short description of <code>Retrieve contacts</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>object</strong> (<code>Contact</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectSalesforce}:Salesforce1</code>."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectSalesforce</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleSalesforceFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Salesforce, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Salesforce Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Salesforce Request node to see the data which has been retrieved."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleSalesforce to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Salesforce service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicreatecredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type salesforce --credential-name CompletePolicyProjectSalesforce_Salesforce1 --username &lt;YourSalesforceUsername&gt; --password &lt;YourSalesforcePassword&gt; --client-id &lt;YourSalesforceClientId&gt; --client-secret &lt;YourSalesforceClientSecret&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>Salesforce1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectSalesforce</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>Store URL</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_SALESFORCE_URL</code>. As the name suggests, replace this value with the URL for your Salesforce service instance, and save the policy. Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectSalesforce</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleSalesforceFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Salesforce, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Salesforce Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the Salesforce Request node to see the data which has been retrieved."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Salesforce Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-salesforce-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Salesforce Input node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Salesforce Input node","shortDescription":"Learn how to use the Salesforce Input node (requires v12.0.6.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Salesforce Input node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Salesforce and issue requests to create, retrieve, update, delete, or view objects in Salesforce."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Salesforce is a work management and project tracking application that provides projects, tasks, conversations, and dashboards that enable teams to collaborate and track progress online. IBM App Connect Enterprise provides a Salesforce Input node, which enables you to connect to Salesforce and monitor for new objects, such as new accounts, campaigns, contacts, leads, opportunities and orders. This tutorial requires access to Salesforce. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a Salesforce policy containing connection information for the use of both a Salesforce Request node and a Salesforce Input node."},{"section":"3. Configure a Salesforce Request node to execute the Create Contact action and save the results of the connector discovery process."},{"section":"4. Configure a Salesforce Input node to monitor for the New Contact action and save the results of the connector discovery process."},{"section":"5. Deploy and test the two provided message flows (one which connects to Salesforce and creates a contact, one which connects to Salesforce and is triggered when a contact is created), which use the same Salesforce policy (containing connection information for your Salesforce instance) and use your Salesforce credentials when the local integration server connects."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Salesforce with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-salesforce-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to Salesforce from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=enterprise-connecting-salesforce-from-app-connect","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleSalesforceInput</span>"},{"section":"2. A policy project named <span class=\'application\'>SalesforcePolicyProject</span>"},{"section":"<span class=\'application\'>ExampleSalesforceInput</span> contains two message flows named <span class=\'application\'>ExampleSalesforceFlowInputFlow</span> and <span class=\'application\'>ExampleSalesforceFlowRequestFlow</span>. To save you time, most of these two message flows have been developed and are configured ready for use, but the Salesforce Input node in <span class=\'application\'>ExampleSalesforceFlowInputFlow</span> and the Salesforce Request node in <span class=\'application\'>ExampleSalesforceFlowRequestFlow</span> have not yet been configured. This tutorial will guide you through the configuration of these two nodes. The <span class=\'application\'>ExampleSalesforceFlowRequestFlow</span> flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by replying with a fixed message back to the requesting client. Second in the flow sequence, the Salesforce Request communicates with Salesforce to create a new contact. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results. When the contact is created, this will trigger the <span class=\'application\'>ExampleSalesforceFlowInputFlow</span> flow using a Salesforce Input node. This node has its three output terminals (Failure, Out and Catch) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>SalesforcePolicyProject</span> will be empty when first imported. Through the actions of the tutorial it will end up containing a single policy named <span class=\'application\'>Salesforce1</span> which will be used by the two message flows in application <span class=\'application\'>ExampleSalesforceInput</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Salesforce with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-salesforce-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Salesforce Input node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-salesforce-input-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the configuration of the two message flows using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Salesforce."}]}},{"section":"<b>Run the Connector Discovery process for the Salesforce Request node</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleSalesforceRequestFlow</span> in application <span class=\'application\'>ExampleSalesforceInput</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Salesforce Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Salesforce Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Salesforce and discovering information from it, will cause your Salesforce credentials to be saved in the vault, and your Salesforce connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> From the dropdown select the policy project named <code>SalesforcePolicyProject</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a Salesforce system then a list of those connections would be displayed, but in this example the status of the Salesforce connector is shown as <code>Not connected</code>. Underneath this you will see a list of Salesforce objects (such as Accounts, Attachments, Campaigns, Cases, Contacts, Content documents, Events, File shares, Files, Folders, Leads, Opportunities, Orders, Products and Solutions) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Contacts</code> section and choose to <code>Create contact</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Salesforce, and offer a drop-down choice of <strong>Authorization method</strong> which can be either <code>Provide a username, password, and client credentials (OAUTH 2.0 PASSWORD)</code> or <code>Provide credentials for App Connect to use (BASIC OAUTH)</code>. Select the first of these options, click continue, and fill out the fields specifying your <strong>Login URL</strong>, <strong>Username</strong>, <strong>Password</strong>, <strong>Client ID</strong> and <strong>Client secret</strong>. Click Connect."},{"details":"Connecting to Salesforce may take a few seconds. For this particular choice of action to Create contact, there are no further properties required by the discovery process.</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this last step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Salesforce Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Salesforce Request node. The Basic properties tab will now display a short description of <code>Create contact</code>, along with the <strong>Action</strong> (<code>CREATE</code>) and the <strong>object</strong> (<code>Contact</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{SalesforcePolicyProject}:Salesforce1</code>."}]}},{"section":"<b>Run the Connector Discovery process for the Salesforce Input node</b>","steps":{"type":"ordered","details":[{"details":"If it is not open already, open <span class=\'application\'>ExampleSalesforceInputFlow</span> which you will find in application <span class=\'application\'>ExampleSalesforceInput</span>. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Salesforce Input node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Salesforce Input node (in fact, every Discovery Connector node) requires configuration to define what action and objects it should monitor in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Salesforce and discovering information from it, will cause your Salesforce credentials to be saved in the vault, and your Salesforce connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> From the dropdown select the policy project named <code>SalesforcePolicyProject</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. You already connected to your Salesforce system in the previous section, so you should be able to select this account which will be named <code>{SalesforcePolicyProject}:Salesforce1</code>. Underneath this you will see a list of Salesforce objects (such as Accounts, Attachments, Campaigns, Cases, Contacts, Content documents, Events, File shares, Files, Folders, Leads, Opportunities, Orders, Products and Solutions) which can be expanded to see the actions which can be monitored and used to trigger your message flow. In this tutorial, we will expand the <code>Contacts</code> section and choose <code>New contact</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"Connecting to Salesforce may take a few seconds. For this particular choice of event of New contact, there are no further properties required by the discovery process.</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this last step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Salesforce Input node in the message flow have been updated. Save the message flow.  Explore the properties of the Salesforce Input node. The Basic properties tab will now display a short description of <code>New contact</code>, along with the <strong>Action</strong> (<code>CREATED</code>) and the <strong>object</strong> (<code>Contact</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{SalesforcePolicyProject}:Salesforce1</code>."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>SalesforcePolicyProject</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleSalesforceInputFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to put the flow into recording mode. Leave this flow recording and then switch to <span class=\'resource\'>ExampleSalesforceRequestFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to put that flow into recording mode as well. We want both flows to be recording because we will use <span class=\'resource\'>ExampleSalesforceRequestFlow.msgflow</span> to create a contact in Salesforce which will in turn drive <span class=\'resource\'>ExampleSalesforceInputFlow.msgflow</span>."},{"details":"In <span class=\'resource\'>ExampleSalesforceRequestFlow.msgflow</span> Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which looks like this:<br><code>{\\"message\\":\\"Request received, about to connect to Salesforce\\"}</code><br>  You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from Salesforce, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the Salesforce Request node and into a Trace node at the end of the message flow. If the message left the Salesforce Request node down the out terminal then the Create contact in Salesforce will have been successful. If not, inspect the exception list to see what went wrong. Assuming success, switch to <span class=\'resource\'>ExampleSalesforceInputFlow.msgflow</span> and click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path. You should see a message has been propagated out of the out terminal of the Salesforce Input node. Click on the highlighted path and the message should contain the same contact information which was sent to Salesforce by the first message flow."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Salesforce Input node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-salesforce-input-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the IBM Maximo Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the IBM Maximo Request node","shortDescription":"Learn how to use the IBM Maximo Request node (requires v12.0.5.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"IBM Maximo Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to IBM Maximo and issue requests to create, retrieve, update, delete, or view objects in Maximo."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"IBM Maximo is an enterprise asset management solution that enterprises can use to track and manage assets throughout their life cycles, manage procurement, contracts, services, people, and work orders, and optimize work processes. IBM App Connect Enterprise provides an IBM Maximo Request node, which enables you to connect to Maximo and issue synchronous requests to create, retrieve, update, delete, or view objects. This tutorial demonstrates how to develop and run a message flow that connects to IBM Maximo and issues synchronous requests to retrieve information. This tutorial requires access to IBM Maximo. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store an IBM Maximo policy containing connection information."},{"section":"3. Select the object and action which the IBM Maximo Request node will execute"},{"section":"4. Select Filters which influence the way in which the message flow selects data"},{"section":"5. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of IBM Maximo."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using IBM Maximo with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-ibm-maximo-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to IBM Maximo from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=enterprise-connecting-ibm-maximo-from-app-connect","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleMaximo</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleMaximo</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectMaximo</span>"},{"section":"<span class=\'application\'>ExampleMaximo</span> contains a single message flow named <span class=\'application\'>ExampleMaximoFlow</span>. To save you time, most of the message flow is ready for use, but the IBM Maximo Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the IBM Maximo Request communicates with IBM Maximo. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleMaximo</span> is very similar to <span class=\'application\'>ExampleMaximo</span> but the message flow which it contains, named  <span class=\'application\'>ExampleMaximoFlow</span> (which exposes a different URL Fragment), has already had its IBM Maximo Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectMaximo</span> contains a single policy named <span class=\'application\'>IBMMaximo1</span> which is used by the application <span class=\'application\'>CompleteExampleMaximo</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using IBM Maximo with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-using-ibm-maximo-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"IBM Maximo Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-ibm-maximo-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with IBM Maximo. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleMaximoFlow</span> in application <span class=\'application\'>ExampleMaximo</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the IBM Maximo Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every IBM Maximo Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to IBM Maximo and discovering information from it, will cause your Maximo credentials to be saved in the vault, and your Maximo connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectMaximo</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to an IBM Maximo system then a list of those connections would be displayed, but in this example the status of the Maximo connector is shown as <code>Not connected</code>. Underneath this you will see a list of IBM Maximo objects (such as Assets, Companies, Contracts, Crafts, Labors, Locations, Person groups, Person users, Service addresses, Service requests and Work orders) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Assets (mxapiasset)</code> section and choose to <code>Retrieve assets</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to IBM Maximo, and offer a drop-down choice of <strong>Authorization method</strong> which can be either <code>Provide credentials for App Connect to use (BASIC)</code> or <code>Provide credentials for App Connect to use (API KEY)</code>. Select the first of these options, click continue, and fill out the fields specifying your <strong>Maximo URL</strong>, <strong>User name</strong> and <strong>Password</strong>. Click Connect."},{"details":"Connecting to IBM Maximo may take a few seconds. For this particular choice of action to Retrieve assets, there are no mandatory properties required in the Where clause used to select the assets from Maximo, but to reduce the number of assets retrieved, click the <strong>Add condition</strong> link and provide a value for <strong>Site (siteid)</strong> and repeat this with a second condition for <strong>Serial # (serialnum)</strong>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the IBM Maximo Request node in the message flow have been updated. Save the message flow.  Explore the properties of the IBM Maximo Request node. The Basic properties tab will now display a short description of <code>Retrieve assets</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>object</strong> (<code>mxapiasset</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectMaximo}:IBMMaximo1</code>."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectMaximo</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleMaximoFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from IBM Maximo, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the IBM Maximo Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the IBM Maximo Request node to see the data which has been retrieved."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleMaximo to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your IBM Maximo service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type maximo --credential-name CompletePolicyProjectMaximo_IBMMaximo1 --username &lt;YourMaximoUsername&gt; --password &lt;YourMaximoPassword&gt; --websphere-username \\"\\" --websphere-password \\"\\"</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>IBMMaximo1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectMaximo</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>Store URL</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_MAXIMO_URL</code>. As the name suggests, replace this value with the URL for your IBM Maximo service instance, and save the policy. Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectMaximo</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleMaximoFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. The message flow expects to receive a well-formed JSON input message which carries values to be used for the Site and SerialNumber in the query of your Maximo assets, for example something like this: <code>{&quot;Site&quot;: &quot;BEDFORD&quot;, &quot;SerialNumber&quot;: &quot;234RW3&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from IBM Maximo, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the IBM Maximo Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the IBM Maximo Request node to see the data which has been retrieved."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"IBM Maximo Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-maximo-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Oracle E-Business Suite Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Oracle E-Business Suite Request node","shortDescription":"Learn how to use the Oracle E-Business Suite Request node (requires v12.0.6.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Oracle E-Business Suite Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Oracle E-Business Suite and issue requests to create, retrieve, update, delete, or view objects in Oracle E-Business Suite."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Oracle E-Business Suite (EBS) is a complete set of business applications for managing and automating customer relationship management, enterprise resource planning, order management, and financial module processes within your organization. The Oracle E-Business Suite Request node integrates with the order management and financial module processes. This tutorial demonstrates how to develop and run a message flow that connects to Oracle E-Business Suite and issues synchronous requests to retrieve information. This tutorial requires access to Oracle E-Business Suite. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store an Oracle E-Business Suite policy containing connection information."},{"section":"3. Select the object and action which the Oracle E-Business Suite Request node will execute"},{"section":"4. Save the results of the connector discovery process"},{"section":"5. Using the discovered JSON schemas, create a simple graphical map to prepare the data structure which is passed in to the Oracle E-Business Suite Request node"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of Oracle E-Business Suite."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Oracle E-Business Suite with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=cca-using-oracle-e-business-suite-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Connecting to Oracle E-Business Suite from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=uoebsace-connecting-oracle-e-business-suite-from-app-connect-enterprise","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleOracleEBS</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleOracleEBS</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectOracleEBS</span>"},{"section":"<span class=\'application\'>ExampleOracleEBS</span> contains a single message flow named <span class=\'application\'>ExampleOracleEBSFlow</span>. To save you time, most of the message flow is ready for use, but the Oracle E-Business Suite Request node has not yet been configured, and the graphical mapping node immediately before it has also not yet been configured. This tutorial will guide you through the configuration of these two nodes. The flow is driven by an HTTP input which expects to receive a short but specific JSON message, whose values will be used to drive the Oracle E-Business Suite Request node to issue a Get Order request. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results. The flow completes with an HTTPReply node which returns data back to the requesting HTTP client."},{"section":"<span class=\'application\'>CompleteExampleOracleEBS</span> is very similar to <span class=\'application\'>ExampleOracleEBS</span> but the message flow which it contains, named  <span class=\'application\'>CompleteExampleOracleEBSFlow</span> (which exposes a different URL Fragment), has already had its Oracle E-Business Suite Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectOracleEBS</span> contains a single policy named <span class=\'application\'>OracleE-BusinessSuite1</span> which is used by the application <span class=\'application\'>CompleteExampleOracleEBS</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using Oracle E-Business Suite with IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=cca-using-oracle-e-business-suite-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"Oracle E-Business Suite Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-oracle-e-business-suite-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Oracle E-Business Suite. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleOracleEBSFlow</span> in application <span class=\'application\'>ExampleOracleEBS</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Oracle E-Business Suite Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Oracle E-Business Suite Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Oracle E-Business Suite and discovering information from it, will cause your Oracle E-Business Suite credentials to be saved in the vault, and your Oracle E-Business Suite connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectOracleEBS</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to an Oracle E-Business Suite system then a list of those connections would be displayed, but in this example the status of the Oracle E-Business Suite connector is shown as <code>Not connected</code>. Underneath this you will see a list of Oracle E-Business Suite objects (such as Customer sites, Customers, Deliveries, Invoices, Locations, Orders, Party contacts, Party organizations, Party sites, Receipts and Vendors) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Orders</code> section and choose to <code>Get order</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Oracle E-Business Suite. Fill out the fields specifying your <strong>Oracle E-Business Suite SOA service URL</strong>, <strong>Username</strong>, <strong>Password</strong> and <strong>Instance name</strong>. Click Connect."},{"details":"Connecting to Oracle E-Business Suite may take a few seconds. At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Oracle E-Business Suite Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Oracle E-Business Suite Request node. The Basic properties tab will now display a short description of <code>Get order</code>, along with the <strong>Action</strong> (<code>GET_ORDER</code>) and the <strong>Object</strong> (<code>OE_INBOUND_INT_Service__GET_ORDER</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectOracleEBS}:OracleE-BusinessSuite1</code>."},{"details":"Next, you will configure the Mapping node.  Double click the Mapping node to launch the New Message Map wizard. Click Next and on the following page (named <strong>Select map inputs and outputs</strong>), choose the input and output for the map. In the panel to <strong>Select map inputs</strong> expand the <code>ExampleOracleEBS</code> application and the <code>JSON Types</code> folder and tick the <strong>InputSchema_JsonType - InputSchema.json</strong>. In the panel to <strong>Select map outputs</strong> expand the <code>ExampleOracleEBS</code> application and the <code>JSON Types</code> folder and tick the <strong>ExampleOracleEBSFlow.Oracle_E-Business_Suite_Request.request.schema_JsonType - gen\\\\ExampleOracleEBSFlow.Oracle_E-Business_Suite_Request.request.schema.json</strong>. Click Finish and a map will be generated. Expand the source and target structures and map them together using Move transforms, by dragging and dropping elements from the source to the target. <br>Responsibility - SOAHeader.Responsibility<br>ResponsibilityApplication - SOAHeader.RespApplication<br>SecurityGroup - SOAHeader.SecurityGroup<br>NLSLanguage - SOAHeader.NLSLanguage<br>OrgId - SOAHeader.OrgId<br>OrderNumber - P_ORDER_NUMBER<br>Save the map."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectOracleEBS</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleOracleEBSFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. The message values will be used to execute the Get order against Oracle E-Business Suite, so you will need to substitute values which are relevant for your system into the example provided here: <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You should receive a JSON reply message with details of the order. You will also see a highlighted path through the flow. Click on the highlighted path coming out of the Oracle E-Business Suite Request node to see the data which has been retrieved."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleOracleEBS to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Oracle E-Business Suite service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type oracleebs --credential-name CompletePolicyProjectOracleEBS_OracleEBS1 --username &lt;YourOracleEBSusername&gt; --password &lt;YourOracleEBSpassword&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>OracleE-BusinessSuite1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectOracleEBS</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>Oracle E-Business Suite SOA service URL</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_ORACLE_EBS_SOA_SERVICE_URL</code>. As the name suggests, replace this value with the SOA service URL of your service instance, and save the policy.  Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectOracleEBS</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleOracleEBSFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. The message values will be used to execute the Get order against Oracle E-Business Suite, so you will need to substitute values which are relevant for your system into the example provided here: <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You should receive a JSON reply message with details of the order. You will also see a highlighted path through the flow. Click on the highlighted path coming out of the Oracle E-Business Suite Request node to see the data which has been retrieved."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Oracle E-Business Suite Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-oracle-e-business-suite-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the SAP OData Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the SAP OData Request node","shortDescription":"Learn how to use the SAP OData Request node (requires v12.0.6.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"SAP OData Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to SAP OData and issue requests to create, retrieve, update, delete, or view objects in SAP."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"SAP is an enterprise storage system (ERP). By using SAP OData services, you can create a connection and import data from the data sources. You can use the SAP OData Request node to connect to SAP OData and perform actions on objects, such as creating, retrieving, updating, and deleting customer sets. This tutorial demonstrates how to develop and run a message flow that connects to SAP and issues synchronous requests to retrieve SAP OData resources. This tutorial requires access to an SAP system. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store an SAP OData policy containing connection information."},{"section":"3. Select the object and action which the SAP OData Request node will execute"},{"section":"4. Save the results of the connector discovery process"},{"section":"5. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of SAP."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Connecting to SAP OData from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-connecting-sap-odata-from-app-connect-enterprise","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleSAPOData</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleSAPOData</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectSAPOData</span>"},{"section":"<span class=\'application\'>ExampleSAPOData</span> contains a single message flow named <span class=\'application\'>ExampleSAPODataFlow</span>. To save you time, most of the message flow is ready for use, but the SAP OData Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the SAP OData Request communicates with SAP. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleSAPOData</span> is very similar to <span class=\'application\'>ExampleSAPOData</span> but the message flow which it contains, named  <span class=\'application\'>CompleteExampleSAPODataFlow</span> (which exposes a different URL Fragment), has already had its SAP OData Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials."},{"section":"<span class=\'application\'>CompletePolicyProjectSAPOData</span> contains a single policy named <span class=\'application\'>SAPviaOData1</span> which is used by the application <span class=\'application\'>CompleteExampleSAPOData</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"SAP OData Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-sap-odata-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with SAP. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleSAPODataFlow</span> in application <span class=\'application\'>ExampleSAPOData</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the SAP OData Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every SAPOData Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to SAP and discovering information from it, will cause your SAP credentials to be saved in the vault, and your SAP connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectSAPOData</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to an SAP system then a list of those connections would be displayed, but in this example the status of the SAP OData connector is shown as <code>Not connected</code>. To connect to SAP you will need to fill out the <code>SAP Gateway service URL</code>, the <code>User name</code> and <code>Password</code>. Underneath this you will see a list of SAP objects which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Customers</code> section and choose to <code>Retrieve all</code>. Click the Connect button."},{"details":"Connecting to SAP may take a few seconds. At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the SAP OData Request node in the message flow have been updated. Save the message flow.  Explore the properties of the SAP OData Request node. The Basic properties tab will now display a short description of <code>Retrieve CustomerSet</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>Object</strong> (<code>CustomerSet</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectSAPOData}:SAPviaOData1</code>."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectSAPOData</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleSAPODataFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from SAP, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the SAP OData Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the SAP OData Request node to see the data which has been retrieved displaying customer details (maximum of 3)."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleSAPOData to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your SAP service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type sapodata --credential-name CompletePolicyProjectSAPOData_SAPviaOData1 --username &lt;YourSAPusername&gt; --password &lt;YourSAPpassword&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Locate the policy named <span class=\'application\'>SAPviaOData1.policyxml</span> inside the policy project named <span class=\'application\'>CompletePolicyProjectSAPOData</span>, right-click the policy and select the option to Open With > Policy Editor. You will find the <strong>SAP Gateway service URL</strong> property is currently configured with the value <code>REPLACE_WITH_YOUR_SAP_GATEWAY_SERVICE_URL</code>. As the name suggests, replace this value with the SAP Gateway Service URL of your service instance, and save the policy.  Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectSAPOData</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleSAPODataFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from SAP, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the SAP OData Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the SAP OData Request node to see the data which has been retrieved displaying customer details (maximum of 3)."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"SAP OData Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-sap-odata-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the Slack Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the Slack Request node","shortDescription":"Learn how to use the Slack Request node (requires v12.0.6.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Slack Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to Slack and issue requests to send or retrieve messages, or to add, delete, or retrieve objects such as files, channels, users, and groups"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"Slack is a web-based, real-time and archived messaging app. You can communicate in open or private channels, send direct messages to colleagues, and share files. This tutorial demonstrates how to develop and run a message flow that sonnects to Slack and sends a message to a channel. This tutorial requires access to Slack. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a Slack policy containing connection information."},{"section":"3. Select the object and action which the Slack Request node will execute"},{"section":"4. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit the Slack Request node with your Slack channel id, edit connection information in the policy, and how to create credentials to access your own instance of Slack."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Connecting to Slack from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-connecting-slack-from-app-connect-enterprise","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleSlack</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleSlack</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectSlack</span>"},{"section":"<span class=\'application\'>ExampleSlack</span> contains a single message flow named <span class=\'application\'>ExampleSlackFlow</span>. To save you time, most of the message flow is ready for use, but the Slack Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input which expects to receive a short but specific JSON message, whose content will be used to send a message to a nominated Slack channel using the Slack Request node. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleSlack</span> is very similar to <span class=\'application\'>ExampleSlack</span> but the message flow which it contains, named  <span class=\'application\'>CompleteExampleSlackFlow</span> (which exposes a different URL Fragment), has already had its Slack Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials. If you want to use this message flow, there are instructions later for updating the channel id property, the connection details and credentials for your Slack instance."},{"section":"<span class=\'application\'>CompletePolicyProjectSlack</span> contains a single policy named <span class=\'application\'>Slack1</span> which is used by the application <span class=\'application\'>CompleteExampleSlack</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Slack Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-slack-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with Slack. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleSlackFlow</span> in application <span class=\'application\'>ExampleSlack</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the Slack Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Slack Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to Slack and discovering information from it, will cause your Slack credentials to be saved in the vault, and your Slack connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectSlack</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a Slack system then a list of those connections would be displayed, but in this example the status of the Slack connector is shown as <code>Not connected</code>. <strong>Before you use the Slack Request node in a message flow as part of this tutorial, you will need to have access to a Slack workspace. If your team isn\'t using Slack yet, you can get started with Slack (without charge) and create a Slack workspace at https://slack.com/intl/en-gb/get-started#/.</strong>. Underneath where the panel says <code>Not connected</code>, expand the section named <code>Messages</code> and choose the action <code>Send message</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"You will need to specify the basic access token to be used to authenticate App Connect with your Slack account. If you do not already have an access token, you can obtain one by following the instructions in the Slack connection details page of the App Connect documentation: https://www.ibm.com/docs/en/app-connect/12.0?topic=enterprise-slack-connection-details"},{"details":"Paste your access token in to the field and you will be asked <code>Where do you want to post the message?</code> which you can specify by selecting an entry from the enumerated dropdown which lists all the available channels."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the Slack Request node in the message flow have been updated. Save the message flow.  Explore the properties of the Slack Request node. The Basic properties tab will now display a short description of <code>Send message</code>, along with the <strong>Action</strong> (<code>CREATE</code>) and the <strong>Object</strong> (<code>message</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectSlack}:Slack1</code>."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectSlack</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleSlackFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. The data carried in the text object of an input message will be sent to your slack channel. Here is an example:<code><br>{&quot;text&quot;:&quot;This is a message from your App Connect Enterprise message flow!&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You should receive a JSON reply message which returns the same as the input. You will also see a highlighted path through the flow. Click on the highlighted path coming out of the Slack Request node and you should see a confirmation message with the timestamp at which the message was sent to Slack."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleSlack to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your Slack instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type slack --credential-name CompletePolicyProjectSlack_Slack1 --access-token &lt;YourSlackAccessToken&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectSlack</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleSlackFlow.msgflow</span> and on the Basic properties of the Slack Request node locate the connection property which is named <code>Where do you want to post the message?</code> and change its value from <code>REPLACE_WITH_YOUR_CHANNEL_ID</code> to the value of your Slack channel id by clicking the Edit button.  If you are using the Slack app, to find the Slack channel id, simply right click on the channel name in the left menu and click Copy link. Paste it somewhere and you will see the link contains the channel id like this: https://ibm-cloud.slack.com/archives/<YOUR_CHANNEL_ID>. Resave the message flow  <span class=\'resource\'>CompleteExampleSlackFlow.msgflow</span>."},{"details":"Click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow.  Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />.  Create a new test message to invoke the HTTP Input node. The data carried in the text object of an input message will be sent to your slack channel. Here is an example:<code><br>{&quot;text&quot;:&quot;This is a message from your App Connect Enterprise message flow!&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You should receive a JSON reply message which returns the same as the input. You will also see a highlighted path through the flow. Click on the highlighted path coming out of the Slack Request node and you should see a confirmation message with the timestamp at which the message was sent to Slack."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Slack Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-slack-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the ServiceNow Request node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the ServiceNow Request node","shortDescription":"Learn how to use the ServiceNow Request node (requires v12.0.6.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"ServiceNow Request node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to ServiceNow and issue requests to create, retrieve, update, download, and delete objects such as assets, incidents, problems, and tickets"}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"ServiceNow is a cloud-based platform that supports service management for all departments in your business including IT, human resources, facilities, and field services. This tutorial demonstrates how to develop and run a message flow that connects to ServiceNow and retrieves asset information. This tutorial requires access to ServiceNow. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a ServiceNow policy containing connection information."},{"section":"3. Select the object and action which the ServiceNow Request node will execute"},{"section":"4. Save the results of the connector discovery process"},{"section":"6. Deploy and test the message flow, policy and credentials using the local integration server"},{"section":"For the convenience of more experienced users, the tutorial also provides a more complete version of the message flow, for which the connector discovery process has already been completed.  Instructions describe how to edit connection information in the policy, and how to create credentials to access your own instance of ServiceNow."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Connecting to ServiceNow from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-connecting-servicenow-from-app-connect-enterprise","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, three projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleServiceNow</span>"},{"section":"2. An application named <span class=\'application\'>CompleteExampleServiceNow</span>"},{"section":"3. A policy project named <span class=\'application\'>CompletePolicyProjectServiceNow</span>"},{"section":"<span class=\'application\'>ExampleServiceNow</span> contains a single message flow named <span class=\'application\'>ExampleServiceNowFlow</span>. To save you time, most of the message flow is ready for use, but the ServiceNow Request node has not yet been configured. This tutorial will guide you through the configuration of the node. The flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by echoing the same data back to the requesting client. Second in the flow sequence, the ServiceNow Request communicates with ServiceNow. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>CompleteExampleServiceNow</span> is very similar to <span class=\'application\'>ExampleServiceNow</span> but the message flow which it contains, named  <span class=\'application\'>CompleteExampleServiceNowFlow</span> (which exposes a different URL Fragment), has already had its ServiceNow Request node configured, and an associated policy with connection information has already been generated. If you\'re already familiar with connector discovery, this application may be helpful to demonstrate some administration concepts such as reusing discovered artifacts, editting policies and updating credentials. If you want to use this message flow, there are instructions later for updating the connection details and credentials for your ServiceNow instance."},{"section":"<span class=\'application\'>CompletePolicyProjectServiceNow</span> contains a single policy named <span class=\'application\'>ServiceNow1</span> which is used by the application <span class=\'application\'>CompleteExampleServiceNow</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"ServiceNow Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-servicenow-request-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the message flow configuration using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with ServiceNow. If you are already familiar with the Connector Discovery process you can now skip over the rest of the instructions in this Prepare section and move straight to the tutorial\'s Run section, Option 2."}]}},{"section":"<b>Run the Connector Discovery process</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleServiceNowFlow</span> in application <span class=\'application\'>ExampleServiceNow</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the ServiceNow Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every ServiceNow Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to ServiceNow and discovering information from it, will cause your ServiceNow credentials to be saved in the vault, and your ServiceNow connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> Click the New button and create a policy project named <code>ExamplePolicyProjectServiceNow</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a ServiceNow system then a list of those connections would be displayed, but in this example the status of the ServiceNow connector is shown as <code>Not connected</code>. <strong>Before you use the ServiceNow Request node in a message flow as part of this tutorial, you will need to have access to ServiceNow. Underneath where the panel says <code>Not connected</code>, expand the section named <code>Asset</code> and choose the action <code>Retrieve assets</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button. A field named Authorization method will appear. Stick with the default option of <code>Provide a username, password and client credentials (OAUTH 2.0 PASSWORD)</code> and click Continue. Fill out the requested connection information for your ServiceNow account including the <code>Endpoint URL</code>, <code>Username</code>, <code>Password</code>, <code>Client ID</code> and <code>Client secret</code>. You may need to wait a few seconds for the connection to be made. If you would like you can add a condition to filter the assets to be returned, but to keep things as simple as possible we don\'t need such a Where clause; just change the <code>Maximum number of items to retrieve</code> from its initial setting of 10 down to 1, and change the radio button to <code>Process 1 item from the collection</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the ServiceNow Request node in the message flow have been updated. Save the message flow.  Explore the properties of the ServiceNow Request node. The Basic properties tab will now display a short description of <code>Retrieve assets</code>, along with the <strong>Action</strong> (<code>RETRIEVEALL</code>) and the <strong>Object</strong> (<code>alm_asset</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ExamplePolicyProjectServiceNow}:ServiceNow1</code>."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Option 1: Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ExamplePolicyProjectServiceNow</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleServiceNowFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from ServiceNow, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the ServiceNow Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the ServiceNow Request node to see the data which has been retrieved displaying an asset."}]}},{"section":"<b>Option 2: Using the alternative provided application named CompleteExampleServiceNow to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In order to reuse the completed application which is provided with this tutorial, you must configure your integration server with credentials for communicating with your ServiceNow service instance.  Launch a command console session, and run the following command to create these credentials:<br><code>mqsicredentials --work-dir &lt;YourToolkitWorkspace&gt;\\\\TEST_SERVER  --vault-key password123 --create --credential-type servicenow --credential-name CompletePolicyProjectServiceNow_ServiceNow1 --username &lt;YourServiceNowUsername&gt; --password &lt;YourServiceNowPassword&gt; --client-id &lt;YourServiceNowClientId&gt; --client-secret &lt;YourServiceNowClientSecret&gt;</code>"},{"details":"Back in the Toolkit, in the Integration Explorer view, right-click <code>TEST_SERVER</code> and select the option to Start."},{"details":"Drag and drop deploy the policy project <span class=\'application\'>CompletePolicyProjectServiceNow</span> to <code>TEST_SERVER</code>."},{"details":"Return to <span class=\'resource\'>CompleteExampleServiceNowFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start testing the flow."},{"details":"Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which is simply an echo of the same data which you sent in. You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from ServiceNow, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the ServiceNow Request node and into a Trace node at the end of the message flow. Click on the highlighted path coming out of the ServiceNow Request node to see the data which has been retrieved displaying an asset."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"ServiceNow Request node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-servicenow-request-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"Discovery Connector - Using the ServiceNow Input node":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"Discovery Connector - Using the ServiceNow Input node","shortDescription":"Learn how to use the ServiceNow Input node (requires v12.0.6.0 or higher)","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/acesw_home.html"}},"pageDetails":{"topicsName":"Tutorial topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"ServiceNow Input node"}],"outcomesName":"Learning outcomes","_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.","outcomeList":[{"title":"Use IBM App Connect Enterprise to connect to ServiceNow to monitor for new or updated objects."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?","sections":[{"section":"ServiceNow is a cloud-based platform that supports service management for all departments in your business including IT, human resources, facilities, and field services. IBM App Connect Enterprise provides a ServiceNow Input node, which enables you to connect to ServiceNow and monitor for new or updated objects, such as assets, incidents, problems and tickets. This tutorial requires access to ServiceNow. The tutorial provides a partially completed message flow and detailed steps describing the development process step-by-step. A summary of what you will do is provided here:"},{"section":"1. Create a local integration server which has a vault for storing credentials"},{"section":"2. Launch the connector discovery process using a policy project which will be used to store a ServiceNow policy containing connection information for the use of both a ServiceNow Request node and a ServiceNow Input node."},{"section":"3. Configure a ServiceNow Request node to execute the Create Asset action and save the results of the connector discovery process."},{"section":"4. Configure a ServiceNow Input node to monitor for the New Asset action and save the results of the connector discovery process."},{"section":"5. Deploy and test the two provided message flows (one which connects to ServiceNow and creates an asset, and one which connects to ServiceNow and is triggered when an asset is created), which use the same ServiceNow policy (containing connection information for your ServiceNow instance) and use your ServiceNow credentials when the local integration server connects."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Connecting to ServiceNow from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-connecting-servicenow-from-app-connect-enterprise","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import projects","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"When you click Import, two projects will be imported into your workspace:"},{"section":"1. An application named <span class=\'application\'>ExampleServiceNowInput</span>"},{"section":"2. A policy project named <span class=\'application\'>ServiceNowPolicyProject</span>"},{"section":"<span class=\'application\'>ExampleServiceNowInput</span> contains two message flows named <span class=\'application\'>ExampleServiceNowInputFlow</span> and <span class=\'application\'>ExampleServiceNowRequestFlow</span>. To save you time, most of these two message flows have been developed and are configured ready for use, but the ServiceNow Input node in <span class=\'application\'>ExampleServiceNowInputFlow</span> and the ServiceNow Request node in <span class=\'application\'>ExampleServiceNowRequestFlow</span> have not yet been configured. This tutorial will guide you through the configuration of these two nodes. The <span class=\'application\'>ExampleServiceNowRequestFlow</span> flow is driven by an HTTP input containing any well-formed JSON data, and uses a FlowOrder node to first acknowledge the input by replying with a fixed message back to the requesting client. Second in the flow sequence, the ServiceNow Request communicates with ServiceNow to create a new asset. This node has its three output terminals (Failure, Out and NoData) wired to three separate Trace nodes to capture the results. When the asset is created, this will trigger the <span class=\'application\'>ExampleServiceNowInputFlow</span> flow using a ServiceNow Input node. This node has its three output terminals (Failure, Out and Catch) wired to three separate Trace nodes to capture the results."},{"section":"<span class=\'application\'>ServiceNowPolicyProject</span> will be empty when first imported. Through the actions of the tutorial it will end up containing a single policy named <span class=\'application\'>ServiceNow1</span> which will be used by the two message flows in application <span class=\'application\'>ExampleServiceNowInput</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Connecting to ServiceNow from IBM App Connect Enterprise","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=applications-connecting-servicenow-from-app-connect-enterprise","type":"web"},{"title":"IBM Documentation link to ","description":"ServiceNow Input node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-servicenow-input-node","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"This section describes how to complete the configuration of the two message flows using the Connector Discovery process","_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.","sections":[{"section":"<b>Create an Integration Server with a credential vault</b>","steps":{"type":"ordered","details":[{"details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class=\'uicontrol\'>Create a local integration server</span>. We will leave most of the options with their default values. Type in a value (at least 8 characters long) for the Vault Key property. The instructions later in the tutorial will assume a value of <code>password123</code>. Untick the check box at the bottom of the dialog which is labelled <code>Start Integration Server</code>. Click Finish. The local Integration Server will be created using a project in your Toolkit\'s workspace as its work directory. We deliberately don\'t want to start up the server until later in the tutorial, because when the server process runs it will lock the vault from being used by other processes. Before running the server we want to use the Toolkit Connector Discovery process to populate the vault with the credentials needed for communication with ServiceNow."}]}},{"section":"<b>Run the Connector Discovery process for the ServiceNow Request node</b>","steps":{"type":"ordered","details":[{"details":"When you imported the tutorial projects in the previous section, <span class=\'application\'>ExampleServiceNowRequestFlow</span> in application <span class=\'application\'>ExampleServiceNowInput</span> will have been opened for you. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the ServiceNow Request node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every ServiceNow Request node (in fact, every Discovery Connector node) requires configuration to define what action it should execute against what object in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to ServiceNow and discovering information from it, will cause your ServiceNowe credentials to be saved in the vault, and your ServiceNow connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> From the dropdown select the policy project named <code>ServiceNowPolicyProject</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. If you had previously connected to a ServiceNow system then a list of those connections would be displayed, but in this example the status of the ServiceNow connector is shown as <code>Not connected</code>. Underneath this you will see a list of ServiceNow objects (such as Asset, Attachment, Comments, Department, Incident, Knowledge, Problem, System user, and Ticket) which can be expanded to see the actions which can be executed against these objects. In this tutorial, we will expand the <code>Asset</code> section and choose to <code>Create asset</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"The page will refresh and display Connect to Salesforce, and offer a drop-down choice of <strong>Authorization method</strong> which can be either <code>Provide a username, password, and client credentials (OAUTH 2.0 PASSWORD)</code> or <code>Provide credentials for App Connect to use (BASIC OAUTH)</code>. Select the first of these options, click continue, and fill out the fields specifying your <strong>Endpoint URL</strong>, <strong>Username</strong>, <strong>Password</strong>, <strong>Client ID</strong> and <strong>Client secret</strong>. Click Connect."},{"details":"Connecting to ServiceNow may take a few seconds. For this particular choice of action to Create asset, there are no further properties required by the discovery process.</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this last step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the ServiceNow Request node in the message flow have been updated. Save the message flow.  Explore the properties of the ServiceNow Request node. The Basic properties tab will now display a short description of <code>Create asset</code>, along with the <strong>Action</strong> (<code>CREATE</code>) and the <strong>object</strong> (<code>alm_asset</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{SalesforcePolicyProject}:Salesforce1</code>."}]}},{"section":"<b>Run the Connector Discovery process for the Salesforce Input node</b>","steps":{"type":"ordered","details":[{"details":"If it is not open already, open <span class=\'application\'>ExampleServiceNowInputFlow</span> which you will find in application <span class=\'application\'>ExampleServiceNowInput</span>. First, check the properties of the three trace nodes in the messge flow, which are configured ready for deployment on a Windows system (their <code>File path</code> property is set to use the directory <code>C:\\\\temp</code>). If you are running on a different operating system, or if the file directory is not convenient for you, then feel free to change it. Next, select the ServiceNow Input node and view its Properties window at the base of the screen. At this stage you should see an error stating that an action must be specified. Every Salesforce Input node (in fact, every Discovery Connector node) requires configuration to define what action and objects it should monitor in the endpoint system. You make these decisions using the Connector Discovery process. Click the Launch Connector Discovery button."},{"details":"The Launch Connector Discovery wizard will open. The process of connecting to ServiceNow and discovering information from it, will cause your ServiceNow credentials to be saved in the vault, and your ServiceNow connection information to be saved in a policy. Fill out the three required property values shown below and then click the Launch Discovery button:","substeps":{"type":"unordered","details":[{"details":"<strong>Policy Project:</strong> From the dropdown select the policy project named <code>ServiceNowPolicyProject</code>"},{"details":"<strong>Work directory:</strong> Click the Browse button and navigate to the TEST_SERVER directory in your Toolkit workspace. For example, this would be C:\\\\workspace\\\\TEST_SERVER if your Toolkit workspace were at C:\\\\workspace."},{"details":"<strong>Vault Key:</strong> Type the same vault key which you used when creating your local integration server (named TEST_SERVER) earlier in the tutorial, for example <code>password123</code>"}]}},{"details":"A new Configure connector node window will open. You already connected to your ServiceNow system in the previous section, so you should be able to select this account which will be named <code>{ServiceNowPolicyProject}:ServiceNow1</code>. Underneath this you will see a list of ServiceNow objects (such as Asset, Attachment, Comments, Department, Incident, Problem, System user, and Ticket) which can be expanded to see the actions which can be monitored and used to trigger your message flow. In this tutorial, we will expand the <code>Asset</code> section and choose <code>New asset</code>. The list of objects and actions will be replaced with a Connect button. Click the Connect button."},{"details":"Connecting to ServiceNow may take a few seconds. For this particular choice of event of New asset, there are no further properties required by the discovery process.</code>."},{"details":"At the top of the window click the Save button, and you should see a confirmation message briefly appear. Close the Configure connector window and return to the Toolkit. <strong>It is important to remember this last step</strong> otherwise the vault will remain locked and you will be unable to start your integration server TEST_SERVER when you come to test the flow in the last section of the tutorial. You will now find that the properties of the ServiceNow Input node in the message flow have been updated. Save the message flow.  Explore the properties of the ServiceNow Input node. The Basic properties tab will now display a short description of <code>New asset</code>, along with the <strong>Action</strong> (<code>CREATED</code>) and the <strong>object</strong> (<code>alm_asset</code>). On the Connection properties tab, the <strong>Policy</strong> will have been configured as <code>{ServiceNowPolicyProject}:ServiceNow1</code>."},{"details":"In addition to configuring the properties of the ServiceNow Request node, the discovery process will also have caused JSON schema files to have been generated in the project ExampleServiceNowInput. These JSON schemas represent the format of JSON messages which are expected to enter and leave the ServiceNow Request node. Next we will configure the node Mapping1 using one of these schemas. Double click the node Mapping1, and stick  with the defaults shown on the first page of the wizard which is launched and click Next. On the next page, in the Select map outputs pane, expand ExampleServiceNowInput and beneath it expand JSON Types and from the options select <code>ExampleServiceNowRequestFlow.ServiceNow_Request.request.schema_JsonType - gen\\\\ExampleServiceNowInputFlow.ServiceNow_Input.response.schema.json</code> and click Finish. For a new asset creation, the asset properties are all option, but if you expand the message model, locate the elemtn named <code>comments</code>, right-click it and Assign the value <code>This is an example asset</code>."}]}}]},"helpLinks":{}},"run":{"overview":{"name":"Run","heading":"","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"<b>Use the Flow Exerciser to test the tutorial scenario</b>","steps":{"type":"ordered","details":[{"details":"In the Integration Explorer view of the Toolkit, right-click TEST_SERVER and select the option to Start."},{"details":"Once the server has started, drag and drop deploy the policy project <span class=\'application\'>ServiceNowPolicyProject</span> in to TEST_SERVER."},{"details":"Return to <span class=\'resource\'>ExampleServiceNowInputFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to put the flow into recording mode. Leave this flow recording and then switch to <span class=\'resource\'>ExampleServiceNowRequestFlow.msgflow</span> and click the Flow Exerciser icon <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to put that flow into recording mode as well. We want both flows to be recording because we will use <span class=\'resource\'>ExampleServiceNowRequestFlow.msgflow</span> to create a contact in ServiceNow which will in turn drive <span class=\'resource\'>ExampleServiceNowInputFlow.msgflow</span>."},{"details":"In <span class=\'resource\'>ExampleServiceNowRequestFlow.msgflow</span> Click the Send Message icon <img src=\'http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png\' alt=\'\' />. Create a new test message to invoke the HTTP Input node. Any well-formed JSON will be fine, even something as simple as <code>{&quot;hello&quot;:&quot;world&quot;}</code>. Click Send and your message is sent to the HTTPInput node. You will receive a JSON reply message which looks like this:<br><code>{\\"message\\":\\"Request received, about to connect to ServiceNow\\"}</code><br>  You may also see a highlighted path through the flow. Sometimes there may be a short pause before the data is returned from ServiceNow, so you may need to click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path carry on past the ServiceNow Request node and into a Trace node at the end of the message flow. If the message left the ServiceNow Request node down the out terminal then the Create asset in Salesforce will have been successful. If not, inspect the exception list to see what went wrong. Assuming success, switch to <span class=\'resource\'>ExampleServiceNowInputFlow.msgflow</span> and click the View Path icon <img src=\'http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png\' alt=\'View path\' /> in the Flow Exerciser toolbar in order to see the highlighted path. You should see a message has been propagated out of the out terminal of the ServiceNow Input node. Click on the highlighted path and the message should contain the same comments information <code>This is an example asset</code> which was sent to ServiceNow by the first message flow."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"ServiceNow Input node","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=nodes-servicenow-input-node","type":"web"},{"title":"IBM Documentation link to ","description":"Testing your message flow by using the Flow exerciser","link":"https://www.ibm.com/docs/SSTTDS_12.0/com.ibm.etools.mft.doc/rt26110_.htm","type":"web"}]}}}}},"App Connect for Manufacturing - Using the OPC-UA-Read node to read data from an OPC Server":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"App Connect for Manufacturing - Using the OPC-UA-Read node to read data from an OPC Server","shortDescription":"Learn how to create a simple message flow for reading data from an OPC server using the OPC-UA-Read Node. This tutorial requires an installation of App Connect for Manufacturing.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating and starting an Integration Server"},{"title":"Creating a data source connection"},{"title":"Configuring the OPC-UA-Read node message flow"},{"title":"Deploying the message flows"}],"outcomesName":"Learning outcomes","_outcomesComment":"Learn how to create a message flow to read data from an OPC server by using the App Connect for Manufacturing OPC-UA-Read node.","outcomeList":[{"title":"Learn how to create a message flow to read data from an OPC server by using the App Connect for Manufacturing OPC-UA-Read node."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates how to create a simple message flow to read data from an OPC server using the OPC-UA-Read Node.","sections":[{"section":"This tutorial assumes you have installed and configured App Connect for Manufacturing. For more information, see Installing IBM App Connect for Manufacturing in the help links provided below."},{"section":"You must create an integration server before you can deploy integration solutions and related resources. You will also need to connect your Toolkit to an OPC server."},{"section":"You can try out this message flow by simply importing the two provided projects. One application project contains a control flow and another application project contains a read flow."},{"section":"The tutorial will guide you through deploying and starting both flows."},{"section":"The read flow is driven using its HTTP Input node, which triggers the flow to run. The OPC-UA-Read node then reads data from the connected OPC server. The response from the message flow is then returned to the HTTP client by the HTTP Reply node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"Installing IBM App Connect for Manufacturing","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-installing-uninstalling","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>App_OPCUA_Read</span> and <span class=\'uicontrol\'>App_OPCUA_Control</span> applications will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>App_OPCUA_Read</span> application contains <span class=\'uicontrol\'>Flow_OPCUA_Read.msgflow</span> while <span class=\'uicontrol\'>App_OPCUA_Control</span> contains <span class=\'uicontrol\'>Flow_OPCUA_Control.msgflow</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing Message Flow applications","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare for Read Flow","_prepareComment":"Prepare for Read Flow","sections":[{"section":"Creating a Data Source connection to an OPC Server:","steps":{"type":"ordered","details":[{"details":"To create a data source, complete the following steps."},{"details":"Ensure that your OPC UA server is up and running."},{"details":"In the IBM App Connect Enterprise Toolkit, navigate to the Manufacturing Perspective > DataSources."},{"details":"Right-click the Source folder and select Add Mapping Node."},{"details":"Specify a name for the mapping node and click OK. The new data source gets created under the DataSource Properties window."},{"details":"Select Server URL Type as Endpoint"},{"details":"Specify your OPC Server URL: e.g. opc.tcp://TEST_OPC_SERVER:port/OPCUA/SimulationServer"},{"details":"Keep the default values for the remaining data source properties and click Create DataSource"},{"details":"Check the data source activity in the Logging view for any issues."},{"details":"On successful connection of a data source, App Connect for Manufacturing allows you to create Client Item and map it to the available source item from the OPC server."}]}},{"section":"Creating and starting an Integration Server:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"Navigate to the folder where the server.conf yaml file is located."},{"details":"For example : Modify C:\\\\TESTSERVER\\\\server.conf.yaml in windows and /opt/TESTSERVER/server.conf.yaml in linux/unix to add the following lines under \'ConnectorProviders\' to add App Connect for Manufacturing connector provider properties.:"},{"details":"For Windows: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'C:\\\\Program Files\\\\IBM\\\\ACMfg\\\\3.0.1.0\\\\runtime\\\\amd64_nt_4\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"For Linux/Unix: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'/opt/IBM/ACMfg-3.0.1.0/runtime/amd64_linux_2\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"Note: The jarsURL is the installation directory of App Connect for Manufacturing that points to the amd64_nt_n folder."},{"details":"Save the above server.conf.yaml file and restart the Integration server using the command mentioned in step 1"},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using the Manufacturing Perspective","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview","type":"web"},{"title":"IBM Documentation link to Troubleshooting ","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Configure, Deploy and Test the Read Flow","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Configuring the OPC-UA-Read node message flow ","steps":{"type":"ordered","details":[{"details":"From the Application Development view, under the App_OPCUA_Read application, double-click Flow_OPCUA_Read.msgflow to open in the Flow Exerciser. The flow consists of \'HTTP Input\' , \'OPC-UA-Read\', and \'HTTP Reply\'"},{"details":"Navigate to the Flow Exerciser and double-click the OPC-UA-Read node to open the OPC-UA-Read Node properties. "},{"details":"From the node properties window, click \'Add\' to open the Manufacturing perspective."},{"details":"Select the appropriate \'Data source\' that was created earlier in the Prepare section."},{"details":"Click on \'Refresh Source Item Tree\' to load the Source Items. Select the node from the source tree for which you want to read data "},{"details":"From the \'Client Items\' tree, right-click on the \'Item\' node and select \'Add Mapping Node\'"},{"details":"Specify a name for the node and click \'Ok\' "},{"details":"Click \'Create Client Item\' from the \'Client Item Properties\' tab"},{"details":"Click \'Add Client Item to Read\'. The client item is added to the Selected Client Items panel in the \'Select\' view. "},{"details":"Save the flow"}]}},{"section":"Deploying the Control Flow","steps":{"type":"ordered","details":[{"details":"Ensure that you are connected to the Integration Server"},{"details":"From the Application Development view, under the App_OPCUA_Control application right-click the Flow_OPCUA_Control.msgflow and select \'Deploy\'."},{"details":"In the Deploy window, select the Integration Server that you have started, and Click \'Finish\'."},{"details":"Click \'Ok\' to confirm the deployment. The control flow application name is displayed under the selected integration server from the Integration Nodes view. "}]}},{"section":"Deploying the OPC-UA-Read node message flow","steps":{"type":"ordered","details":[{"details":"Ensure that you are connected to an Integration Server."},{"details":"From the Application Development view , right-click the Flow_OPCUA_Read.msgflow and select \'Deploy\'."},{"details":"In the Deploy window, select the integration server that you have started, and click Finish."},{"details":"Click \'Ok\' to confirm the deployment.The App_OPCUA_Read application name is displayed under the selected integration server from Integration Nodes view."}]}},{"section":"Testing the Read Flow using the Flow Exerciser","steps":{"type":"ordered","details":[{"details":"Ensure that your Integration Server is started."},{"details":"Navigate to the Flow Exerciser of the Flow_OPCUA_Read.msgflow."},{"details":"In the editor, click the Start Flow Exerciser icon in red: <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow. "},{"details":"Click the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow."},{"details":"You can right-click on \'InputMessage\' to add a new message and then click on \'Send\' button. Your request message is sent to the HTTP input node. After the request message is processed, the message path is automatically highlighted on the message flow."},{"details":"Click on any connection on the message box to see the data that passed through that connection."},{"details":"To stop recording the message path through the flow, click the \'Return flow to edit mode\' icon."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using the Manufacturing Perspective","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=overview-manufacturing-perspective","type":"web"},{"title":"IBM Documentation link to Troubleshooting ","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}}}}},"App Connect for Manufacturing - Using the OPC-UA-Input node to read subscribed data from an OPC Server":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"App Connect for Manufacturing - Using the OPC-UA-Input node to read subscribed data from an OPC Server","shortDescription":"Learn how to create a simple message flow by using the OPC-UA-Input node to read subscribed data from an OPC server. This tutorial requires an installation of App Connect for Manufacturing.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating and starting an Integration Server"},{"title":"Creating a data source connection"},{"title":"Configuring the OPC-UA-Input node message flow"},{"title":"Deploying the message flows"}],"outcomesName":"Learning outcomes","_outcomesComment":"Learn how to create a message flow to read changed values of the subscribed data from an OPC server using the OPC-UA-Input node.","outcomeList":[{"title":"Learn how to create a message flow to read changed values of the subscribed data from an OPC server using the OPC-UA-Input node."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates how to create a simple message flow using the OPC-UA-Input node to read subscribed data from an OPC Server, when the data value changes.","sections":[{"section":"This tutorial assumes you have installed and configured App Connect for Manufacturing. For more information, see Installing IBM App Connect for Manufacturing in the help links provided below."},{"section":"You must create an integration server before you can deploy integration solutions and related resources. You will also need to connect your Toolkit to an OPC server."},{"section":"You can try out this message flow by simply importing the two provided projects. One application project contains a control flow and another application project contains an input flow."},{"section":"The tutorial will guide you through deploying and starting both flows."},{"section":"The input flow is driven by using the OPC-UA-Input node. The OPC-UA-Input node triggers the flow to run when the value of the specified client item changes. The updated client item value is stored in an output file by using the File Output node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"IBM App Connect for Manufacturing overview","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview","type":"web"},{"title":"Knowledge Center link to ","description":"Installing and uninstalling IBM App Connect for Manufacturing","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-installing-uninstalling","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>App_OPCUA_Input</span> and <span class=\'uicontrol\'>App_OPCUA_Control</span> applications will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>App_OPCUA_Input</span> application contains <span class=\'uicontrol\'>Flow_OPCUA_Input.msgflow</span> while <span class=\'uicontrol\'>App_OPCUA_Control</span> contains <span class=\'uicontrol\'>Flow_OPCUA_Control.msgflow</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing Message Flow applications","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare for Input Flow","_prepareComment":"Prepare for Input Flow","sections":[{"section":"Creating a Data Source connection to an OPC Server","steps":{"type":"ordered","details":[{"details":"To create a data source, complete the following steps."},{"details":"Ensure that your OPC UA server is up and running."},{"details":"In the IBM App Connect Enterprise Toolkit, navigate to the Manufacturing Perspective > DataSources."},{"details":"Right-click the Source folder and select Add Mapping Node."},{"details":"Specify a name for the mapping node and click OK. The new data source gets created under the DataSource Properties window."},{"details":"Select Server URL Type as Endpoint"},{"details":"Specify your OPC Server URL: For example: opc.tcp://TEST_OPC_SERVER:port/OPCUA/SimulationServer"},{"details":"Keep the default values for the remaining data source properties and click Create DataSource"},{"details":"Check the data source activity in the Logging view for any issues."},{"details":"On successful connection of a data source, App Connect for Manufacturing allows you to create Client Item and map it to the available source item from the OPC server."}]}},{"section":"Creating and starting an Integration Server:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"Navigate to the folder where the server.conf yaml file is located."},{"details":"For example : Modify C:\\\\TESTSERVER\\\\server.conf.yaml in windows and /opt/TESTSERVER/server.conf.yaml in linux/unix to add the following lines under \'ConnectorProviders\' to add App Connect for Manufacturing connector provider properties.:"},{"details":"For Windows: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'C:\\\\Program Files\\\\IBM\\\\ACMfg\\\\3.0.1.0\\\\runtime\\\\amd64_nt_4\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"For Linux/Unix: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'/opt/IBM/ACMfg-3.0.1.0/runtime/amd64_linux_2\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"Note: The jarsURL is the installation directory of App Connect for Manufacturing that points to the amd64_nt_n folder."},{"details":"Save the above server.conf.yaml file and restart the Integration server using the command mentioned in step 1"},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using the Manufacturing Perspective","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview","type":"web"},{"title":"IBM Documentation link to Troubleshooting ","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Configure, Deploy and Test the Input Flow","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Configure the Input Message flow ","steps":{"type":"ordered","details":[{"details":"From the Application Development view, under the App_OPCUA_Input application, double-click Flow_OPCUA_Input.msgflow to open in the Flow Exerciser. The flow consists of \'OPC-UA-Input\', and \'File Output\' nodes. "},{"details":"Navigate to the Flow Exerciser and double-click the OPC-UA-Input node to open the OPC-UA-Input Node properties. "},{"details":"From the node properties window, click \'Add\' to open the Manufacturing perspective."},{"details":"Select the appropriate \'Data source\' that was created earlier in the Prepare section."},{"details":"Click on \'Refresh Source Item Tree\' to load the Source Items. Select the node from the source tree for which you want to read data "},{"details":"From the \'Client Items\' tree, right-click on the \'Item\' node and select \'Add Mapping Node\'"},{"details":"Specify a name for the node and click \'Ok\' "},{"details":"Click \'Create Client Item\' from the \'Client Item Properties\' tab"},{"details":"Click \'Add Trigger Item\' and the Add Trigger Item wizard window loads. Select the default values and click OK."},{"details":"Navigate back to the Flow Exerciser and double-click the File Output node. The File Output node properties window loads."},{"details":"Click the Basic tab. Specify the directory, file name of the output file where the subscribed data values should be stored and set the \'Select the mode for writing to file\' as \'Write directly to the output file (append if file exists)\'."},{"details":"Save the flow"}]}},{"section":"Deploying the OPC-UA-Input node message flow","steps":{"type":"ordered","details":[{"details":"Ensure that you are connected to an Integration Server."},{"details":"From the Application Development view , right-click the Flow_OPCUA_Input.msgflow and select \'Deploy\'."},{"details":"In the Deploy window, select the integration server that you have started, and click Finish."},{"details":"Click \'Ok\' to confirm the deployment.The App_OPCUA_Input application name is displayed under the selected integration server from Integration Nodes view."}]}},{"section":"Test the Input Flow ","steps":{"type":"ordered","details":[{"details":"The OPC-UA-Input node automatically triggers the flow to run when the value of the specified client item changes on the OPC Server."},{"details":"The updated client item value is stored in an output file by using the File Output node."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to the Manufacturing Perspective","description":"Using the Manufacturing Perspective","type":"web","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview"},{"title":"IBM Documentation link to Troubleshooting","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}}}}},"App Connect for Manufacturing - Using the OPC-UA-Write node to write data into an OPC Server":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"App Connect for Manufacturing - Using the OPC-UA-Write node to write data into an OPC Server","shortDescription":"Learn how to create a simple message flow for writing data into an OPC server using the OPC-UA-Write Node.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating and starting an Integration Serve"},{"title":"Creating a data source connection"},{"title":"Configuring the OPC-UA-Write node message flow"},{"title":"Deploying the message flows"}],"outcomesName":"Learning outcomes","_outcomesComment":"Learn how to create a message flow to write data into an OPC server by using the OPC-UA-Write node.","outcomeList":[{"title":"Learn how to create a message flow to write data into an OPC server by using the OPC-UA-Write node."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates how to create a simple message flow  using the OPC-UA-Write Node to write data in to an OPC server.","sections":[{"section":"This tutorial assumes you have installed and configured AppConnect for Manufacturing. For more information, see Installing IBM App Connect for Manufacturing in the help links provided below."},{"section":"You must create an integration server before you can deploy integration solutions and related resources. You will also need to connect your Toolkit to an OPC server."},{"section":"You can try out this message flow by simply importing the two provided projects.  One application project contains a control and another application project contains a write flow."},{"section":"The tutorial will guide you through deploying and starting both flows."},{"section":"The write flow is driven by using the HTTP Input node, which triggers the flow to run. The OPC-UA-Write node writes data into the connected OPC Server. The response from the message flow is then returned to the HTTP client by the HTTP Reply node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"IBM App Connect for Manufacturing overview","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>App_OPCUA_Write</span> and <span class=\'uicontrol\'>App_OPCUA_Control</span> applications will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>App_OPCUA_Write</span> application contains <span class=\'uicontrol\'>Flow_OPCUA_Write.msgflow</span> while <span class=\'uicontrol\'>App_OPCUA_Control</span> contains <span class=\'uicontrol\'>Flow_OPCUA_Control.msgflow</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing Message Flow applications","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare for Write Flow","_prepareComment":"Prepare for Write Flow","sections":[{"section":"Creating a Data Source connection to an OPC Server","steps":{"type":"ordered","details":[{"details":"To create a data source, complete the following steps."},{"details":"Ensure that your OPC UA server is up and running."},{"details":"In the IBM App Connect Enterprise Toolkit, navigate to the Manufacturing Perspective > DataSources."},{"details":"Right-click the Source folder and select Add Mapping Node."},{"details":"Specify a name for the mapping node and click OK. The new data source gets created under the DataSource Properties window."},{"details":"Select Server URL Type as Endpoint"},{"details":"Specify your OPC Server URL. For example: opc.tcp://TEST_OPC_SERVER:port/OPCUA/SimulationServer"},{"details":"Keep the default values for the remaining data source properties and click Create Data Source."},{"details":"Check the data source activity in the Logging view for any issues."},{"details":"On successful connection of a data source, App Connect for Manufacturing allows you to create Client Item and map it to the available source item from the OPC server."}]}},{"section":"Creating and starting an Integration Server:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"Navigate to the folder where the server.conf yaml file is located."},{"details":"For example : Modify C:\\\\TESTSERVER\\\\server.conf.yaml in windows and /opt/TESTSERVER/server.conf.yaml in linux/unix to add the following lines under \'ConnectorProviders\' to add App Connect for Manufacturing connector provider properties.:"},{"details":"For Windows: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'C:\\\\Program Files\\\\IBM\\\\ACMfg\\\\3.0.1.0\\\\runtime\\\\amd64_nt_4\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"For Linux/Unix: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'/opt/IBM/ACMfg-3.0.1.0/runtime/amd64_linux_2\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"Note: The jarsURL is the installation directory of App Connect for Manufacturing that points to the amd64_nt_n folder."},{"details":"Save the above server.conf.yaml file and restart the Integration server using the command mentioned in step 1"},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to the Manufacturing Perspective","description":"Using the Manufacturing Perspective","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview","type":"web"},{"title":"IBM Documentation link to Troubleshooting ","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Configure, Deploy and Test the Write Flow","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Configuring the OPC-UA-Write node message flow ","steps":{"type":"ordered","details":[{"details":"From the Application Development view, under the App_OPCUA_Write application, double-click Flow_OPCUA_Write.msgflow to open in the Flow Exerciser. The flow consists of \'HTTP Input\' , \'Compute\', \'OPC-UA-Write\', and \'HTTP Reply\'"},{"details":"Navigate to the Flow Exerciser and double-click the OPC-UA-Write node to open the OPC-UA-Write Node properties. "},{"details":"From the node properties window, click \'Add\' to open the Manufacturing perspective."},{"details":"Select the appropriate \'Data source\' that was created earlier in the Prepare section."},{"details":"Click on \'Refresh Source Item Tree\' to load the Source Items. Select the node from the source tree for which you want to write the data.For example, an integer data. "},{"details":"From the \'Client Items\' tree, right-click on the \'Item\' node and select \'Add Mapping Node\'"},{"details":"Specify a name for the node and click \'Ok\' "},{"details":"Click \'Create Client Item\' from the \'Client Item Properties\' tab"},{"details":"Click \'Add Client Item to Write\'. The client item is added to the Selected Client Items panel in the \'Select\' view. Take note of the selected client item, for example, \'/Item/ua_int_32\'."},{"details":"Save the flow"},{"details":"Double-click the Compute node from the WriteNodeFlow.msgflow."},{"details":"Uncomment the following lines in the Compute Node script and replace the name, path and data values with the Client Item name, path selected by you in the above steps. For example: <br> -- SET itemRef5.(XMLNSC.Attribute)wrns:name=\'ua_int_32\';<br>-- SET itemRef5.(XMLNSC.Attribute)wrns:path=\'/Item/ua_int_32\';<br>-- SET itemRef5.Data = 256;"},{"details":"Update the data value based on your requirement for the selected Client Item."},{"details":"Save the flow"}]}},{"section":"Deploy the Control Flow","steps":{"type":"ordered","details":[{"details":"Ensure that you are connected to the Integration Server"},{"details":"From the Application Development view, under the App_OPCUA_Control application right-click the Flow_OPCUA_Control.msgflow and select \'Deploy\'."},{"details":"In the Deploy window, select the Integration Server that you have started, and Click \'Finish\'."},{"details":"Click \'Ok\' to confirm the deployment. The control flow application name is displayed under the selected integration server from the Integration Nodes view."}]}},{"section":"Deploying the OPC-UA-Write node message flow","steps":{"type":"ordered","details":[{"details":"Ensure that you are connected to an Integration Server."},{"details":"From the Application Development view , right-click the Flow_OPCUA_Write.msgflow and select \'Deploy\'."},{"details":"In the Deploy window, select the integration server that you have started, and click Finish."},{"details":"Click \'Ok\' to confirm the deployment.The App_OPCUA_Write application name is displayed under the selected integration server from Integration Nodes view."}]}},{"section":"Testing the Write Flow using the Flow Exerciser ","steps":{"type":"ordered","details":[{"details":"Ensure that your Integration Server is started."},{"details":"Navigate to the Flow Exerciser of the Flow_OPCUA_Write.msgflow."},{"details":"In the editor, click the Start Flow Exerciser icon in red: <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow. "},{"details":"Click the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow."},{"details":"You can right-click on \'InputMessage\' to add a new message and then click on \'Send\' button. Your request message is sent to the HTTP input node. After the request message is processed, the message path is automatically highlighted on the message flow."},{"details":"Click on any connection on the message box to see the data that passed through that connection."},{"details":"To stop recording the message path through the flow, click the \'Return flow to edit mode\' icon."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to the Manufacturing Perspective","description":"Using the Manufacturing Perspective","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=overview-manufacturing-perspective","type":"web"},{"title":"IBM Documentation link to Troubleshooting ","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}}}}},"App Connect for Manufacturing - Using the OPC-UA-Method-Call node to call a method on an OPC Server":{"version":"0.1","pageContent":{"_comments":"object that contains data for page labels, buttons, etc.","navItems":{"_common":{"buttonBackToGallery":{"name":"Back To Gallery","method":"backToGallery()","idName":"backToGallery"},"buttonStartTutorial":{"name":"Start Tutorial","method":"startTutorialFromDetailsScreen()","idName":"startTutorial"},"buttonViewDetails":{"name":"View Details","method":"viewDetails()","idName":"stepsViewDetails"}}}},"tutorial":{"_common":{"name":"App Connect for Manufacturing - Using the OPC-UA-Method-Call node to call a method on an OPC Server","shortDescription":"Learn how to create a simple message flow to call a method on an OPC server using the OPC-UA-Method-Call node.","durationText":"This tutorial takes approximately","durationTime":"10 minutes","_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json.","resourceToOpen":"MainFlow","helpLink":{"text":"IBM Documentation","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications"}},"pageDetails":{"topicsName":"Tutorial Topics","_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial","topicList":[{"title":"Creating and starting an Integration Server"},{"title":"Creating a data source connection"},{"title":"Configuring the OPC-UA-Method-Call node message flow"},{"title":"Deploying the message flows"}],"outcomesName":"Learning outcomes","_outcomesComment":"Learn how to create a message flow to call a method on an OPC server using the OPC-UA-Method-Call node.","outcomeList":[{"title":"Learn how to create a message flow to call a method on an OPC server using the OPC-UA-Method-Call node."}],"summary":{"overviewName":"OVERVIEW","_overviewComment":"This tutorial demonstrates how to create a simple message flow for calling a method on an OPC server using the OPC-UA-Method-Call Node, by providing the required parameters.","sections":[{"section":"This tutorial assumes you have installed and configured AppConnect for Manufacturing. For more information, see Installing IBM App Connect for Manufacturing in the help links provided below."},{"section":"You must create an integration server before you can deploy integration solutions and related resources. You will also need to connect your Toolkit to an OPC server."},{"section":"You can try out this message flow by simply importing the two provided projects.  One application project contains a control flow and another application project contains a method call flow."},{"section":"The tutorial will guide you through deploying and starting both flows."},{"section":"The method call flow is driven by using the HTTP Input node, which triggers the flow to run. The OPC-UA-Method-Call node invokes a method from the connected OPC server. The response from the message flow is then returned to the HTTP client by the HTTP Reply node."}]},"helpLinks":{"_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.","title":"Find out more","details":[{"title":"Knowledge Center link to ","description":"IBM App Connect for Manufacturing overview","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview","type":"web"}]}},"pageSteps":{"create":{"overview":{"name":"Create","heading":"Import project","_createComment":"A description of what will happen when the user clicks Import.","sections":[{"section":"Click <span class=\'uicontrol\'>Import</span> and the <span class=\'uicontrol\'>App_OPCUA_MethodCall</span> and <span class=\'uicontrol\'>App_OPCUA_Control</span> applications will be imported into your workspace."},{"section":"The <span class=\'uicontrol\'>App_OPCUA_MethodCall</span> application contains <span class=\'uicontrol\'>Flow_OPCUA_MethodCall.msgflow</span> and <span class=\'uicontrol\'>App_OPCUA_Control</span> contains <span class=\'uicontrol\'>Flow_OPCUA_Control.msgflow</span>."}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Developing Message Flow applications","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-developing-message-flow-applications","type":"web"}]},"actions":{"title":"Create Actions","details":[{"name":"Import","method":"importArtifacts()"}]}},"prepare":{"overview":{"name":"Prepare","heading":"Prepare for Method Call Flow","_prepareComment":"Prepare for Method Call Flow","sections":[{"section":"Creating a Data Source connection to an OPC Server","steps":{"type":"ordered","details":[{"details":"To create a data source, complete the following steps."},{"details":"Ensure that your OPC UA server is up and running."},{"details":"In the IBM App Connect Enterprise Toolkit, navigate to the Manufacturing Perspective > DataSources."},{"details":"Right-click the Source folder and select Add Mapping Node."},{"details":"Specify a name for the mapping node and click OK. The new data source gets created under the DataSource Properties window."},{"details":"Select Server URL Type as Endpoint"},{"details":"Specify your OPC Server URL. For example: opc.tcp://TEST_OPC_SERVER:port/OPCUA/SimulationServer"},{"details":"Keep the default values for the remaining data source properties and click Create Data Source."},{"details":"Check the data source activity in the Logging view for any issues."},{"details":"On successful connection of a data source, App Connect for Manufacturing allows you to create Client Item and map it to the available source item from the OPC server."}]}},{"section":"Creating and starting an Integration Server:","steps":{"type":"ordered","details":[{"details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."},{"details":"Navigate to the folder where the server.conf yaml file is located."},{"details":"For example : Modify C:\\\\TESTSERVER\\\\server.conf.yaml in windows and /opt/TESTSERVER/server.conf.yaml in linux/unix to add the following lines under \'ConnectorProviders\' to add App Connect for Manufacturing connector provider properties.:"},{"details":"For Windows: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'C:\\\\Program Files\\\\IBM\\\\ACMfg\\\\3.0.1.0\\\\runtime\\\\amd64_nt_4\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"For Linux/Unix: <br><code>&nbsp;&nbsp;ACMfg:<br>&nbsp;&nbsp;&nbsp;&nbsp;connectorClassName: \'com.ibm.industrypack.industryclient.connector.ICConnectorFactory\'<br>&nbsp;&nbsp;&nbsp;&nbsp;jarsURL: \'/opt/IBM/ACMfg-3.0.1.0/runtime/amd64_linux_2\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property1: \'trustCertificate=true\'<br>&nbsp;&nbsp;&nbsp;&nbsp;property2: \'allowEndpointMismatch=true;discardData=false\'</code>"},{"details":"Note: The jarsURL is the installation directory of App Connect for Manufacturing that points to the amd64_nt_n folder."},{"details":"Save the above server.conf.yaml file and restart the Integration server using the command mentioned in step 1"},{"details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png\' alt=\'\' /> and select the menu item  <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png\' alt=\'\' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src=\'http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png\' alt=\'\' />"}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to ","description":"Using the Manufacturing Perspective","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-app-connect-overview","type":"web"},{"title":"IBM Documentation link to Troubleshooting","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}},"run":{"overview":{"name":"Run","heading":"Configure, Deploy and Test the MethodCall Flow","_runComment":"The full steps for the user to run through the tutorial. Use \'sections\' to render paragraphs, \'steps\' with a type of \'ordered\' or \'unordered\' to render HTML lists, and \'substeps\' to render nested lists.","sections":[{"section":"Configure the Method-Call Message flow ","steps":{"type":"ordered","details":[{"details":"From the Application Development view, under the App_OPCUA_MethodCall application, double-click Flow_OPCUA_MethodCall.msgflow to open in the Flow Exerciser. The flow consists of \'HTTP Input\' , \'OPC-UA-Method-Call\', and \'HTTP Reply\'"},{"details":"Navigate to the Flow Exerciser and double-click the OPC-UA-Method-Call node to open the OPC-UA-Method-Call Node properties. "},{"details":"From the node properties window, click \'Add\' to open the Manufacturing perspective."},{"details":"Select the appropriate \'Data source\' that was created earlier in the Prepare section."},{"details":"Click on \'Refresh Source Item Tree\' to load the Source Items. Select the node from the source tree for which you want to call the  method "},{"details":"From the \'Client Items\' tree, right-click on the \'Item\' node and select \'Add Mapping Node\'"},{"details":"Specify a name for the node and click \'Ok\' "},{"details":"Click \'Create Client Item\' from the \'Client Item Properties\' tab"},{"details":"Click on \'Select for method call\'."},{"details":"Update the method call arguments using one of the following methods: "},{"details":"i.  From the message flow, in the OPC-UA-Method-Call Node properties, select appropriate method and update the arguments if required. Save the flow."},{"details":"ii. Alternately, you can also use the Compute node to specify the method arguments."},{"details":"iii.Double-click the Compute node from the Flow_OPCUA_MethodCall.msgflow."},{"details":"Uncomment the following lines in the Compute Node script and replace the path , method, argument values with the Client Item name, method name selected by you in the above steps. Add the required arguments based on your requirement. For example: <br> --SET OutputRoot.XMLNSC.CallMethod.path=\'/Item/method1\';<br>--SET OutputRoot.XMLNSC.CallMethod.Method=\'6:MyMethod\';<br>--SET OutputRoot.XMLNSC.CallMethod.Argument[1]= \'cos\';<br>--SET OutputRoot.XMLNSC.CallMethod.Argument[2]=0;"}]}},{"section":"Deploying the Control Flow","steps":{"type":"ordered","details":[{"details":"Ensure that you are connected to the Integration Server"},{"details":"From the Application Development view, under the App_OPCUA_Control application right-click the Flow_OPCUA_Control.msgflow and select \'Deploy\'."},{"details":"In the Deploy window, select the Integration Server that you have started, and Click \'Finish\'."},{"details":"Click \'Ok\' to confirm the deployment. The control flow application name is displayed under the selected integration server from the Integration Nodes view. "}]}},{"section":"Deploying the OPC-UA-Method-Call node message flow","steps":{"type":"ordered","details":[{"details":"Ensure that you are connected to an Integration Server."},{"details":"From the Application Development view , right-click the Flow_OPCUA_MethodCall.msgflow and select \'Deploy\'."},{"details":"In the Deploy window, select the integration server that you have started, and click Finish."},{"details":"Click \'Ok\' to confirm the deployment.The App_OPCUA_MethodCall application name is displayed under the selected integration server from Integration Nodes view."}]}},{"section":"Testing the method call flow using the Flow Exerciser ","steps":{"type":"ordered","details":[{"details":"Ensure that your Integration Server is started."},{"details":"Navigate to the Flow Exerciser of the Flow_OPCUA_MethodCall.msgflow."},{"details":"In the editor, click the Start Flow Exerciser icon in red: <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png\' alt=\'\' /> to start recording the message path through the flow. "},{"details":"Click the Send Message icon <img src=\'https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png\' alt=\'\' /> to select a message to send to the flow."},{"details":"You can right-click on \'InputMessage\' to add a new message and then click on \'Send\' button. Your request message is sent to the HTTP input node. After the request message is processed, the message path is automatically highlighted on the message flow."},{"details":"Click on any connection on the message box to see the data that passed through that connection."},{"details":"To stop recording the message path through the flow, click the \'Return flow to edit mode\' icon."}]}}]},"helpLinks":{"title":"Find out more","details":[{"title":"IBM Documentation link to the Manufacturing Perspective","description":"Using the Manufacturing Perspective","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=overview-manufacturing-perspective","type":"web"},{"title":"IBM Documentation link to Troubleshooting","description":"Troubleshooting and Logging","link":"https://www.ibm.com/docs/en/app-connect/12.0?topic=manufacturing-troubleshooting-support","type":"web"}]}}}}}}')},630:function(e,t,o){},631:function(e,t,o){},655:function(e,t,o){},657:function(e,t,o){},658:function(e,t,o){},659:function(e,t,o){},660:function(e,t,o){},663:function(e,t,o){},664:function(e,t,o){},676:function(e,t,o){},677:function(e,t,o){"use strict";o.r(t);o(189),o(199),o(200),o(201),o(202),o(203),o(204),o(205),o(206),o(207),o(208),o(209),o(210),o(211),o(212),o(258),o(260),o(261),o(262),o(263),o(264),o(266),o(216),o(269),o(270),o(119),o(274),o(275),o(277),o(278),o(279),o(280),o(281),o(282),o(285),o(286),o(287),o(288),o(289),o(292),o(293),o(294),o(295),o(296),o(223),o(224),o(298),o(300),o(301),o(302),o(303),o(304),o(305),o(306),o(307),o(308),o(309),o(310),o(311),o(312),o(313),o(314),o(227),o(315),o(316),o(318),o(319),o(320),o(321),o(322),o(323),o(324),o(325),o(327),o(329),o(330),o(332),o(333),o(334),o(335),o(336),o(338),o(339),o(340),o(341),o(342),o(343),o(344),o(346),o(347),o(348),o(349),o(350),o(351),o(352),o(353),o(354),o(167),o(355),o(356),o(357),o(358),o(363),o(364),o(365),o(366),o(367),o(368),o(370),o(371),o(372),o(373),o(374),o(375),o(376),o(377),o(378),o(234),o(382),o(384),o(235),o(385),o(386),o(387),o(388),o(148),o(389),o(390),o(393),o(394),o(395),o(396),o(397),o(398),o(399),o(400),o(401),o(403),o(405),o(406),o(407),o(408),o(409),o(410),o(411),o(412),o(413),o(414),o(415),o(416),o(417),o(418),o(421),o(422),o(423),o(424),o(425),o(426),o(427),o(428),o(429),o(430),o(431),o(432),o(433),o(434),o(435),o(436),o(437),o(438),o(439),o(440),o(441),o(442),o(443),o(444),o(445),o(446),o(447),o(448),o(449),o(450),o(451),o(452),o(453),o(454),o(456),o(457),o(175),o(460),o(461),o(462),o(465),o(466),o(577),o(470),o(624);var s=o(0),a=o.n(s),i=o(75),n=o.n(i),r=(o(630),o(631),o(113)),l=o(43),c=o(62),p=o(102),d=o(46),h=o(67),u=(o(472),o(68)),m=o(508),g=o(691),w=o(701),b=o(151),f=o(690),y=o(702),T=o(689),v=(o(655),o(5)),S=function(e){var t=e.name,o=e.desc,i=e.tags,n=e.durationMins,r=e.handleLinkClick,l=(e.handleDetailsActive,e.handleDetailsClick,e.hasButtons),c=e.tutorialData,p="list-panel-item",h=Object(s.useState)({focus:!1,pointer:!1}),u=Object(d.a)(h,2),m=u[0],S=u[1],k=Object(s.useState)(p),C=Object(d.a)(k,2),I=C[0],E=C[1],D=function(e){E(e.focus||e.pointer?"".concat(p," ").concat(p,"--active"):"".concat(p))},A=function(e){var t=Object(b.a)({},m);t["focus"===e.type?e.type:e.type.substr(0,e.type.length-5)]=!0,S(t),D(t)},_=function(e){var t=Object(b.a)({},m);t["blur"===e.type?"focus":e.type.substr(0,e.type.length-5)]=!1,S(t),D(t)};return Object(v.jsx)("li",{className:I,onFocus:A,onBlur:_,onPointerEnter:A,onPointerLeave:_,children:Object(v.jsxs)(w.a,{light:!0,handleClick:function(e){r(!0===e)},tabIndex:"0",children:[Object(v.jsx)("div",{className:"list-panel-item__heading",children:Object(v.jsx)("h2",{className:"list-panel-item__title",children:t})}),Object(v.jsx)("p",{className:"list-panel-item__text text--long",children:o}),Object(v.jsxs)("div",{className:"list-panel-item__lower",children:[Object(v.jsxs)("div",{className:"list-panel-item__lower-left",children:[n&&Object(v.jsxs)(a.a.Fragment,{children:[Object(v.jsx)(g.a,{className:"list-panel-item__duration-img","aria-label":"Timing indicator"}),Object(v.jsxs)("span",{className:"list-panel-item__duration-text",children:[n," minutes"]})]}),i&&i.map((function(e){return Object(v.jsx)(f.a,{children:e},e)}))]}),l&&Object(v.jsx)(y.a,{kind:"ghost",iconDescription:"Start tutorial",renderIcon:T.a,size:"sm",onClick:function(e){return function(e,t,o){if(e.preventDefault(),e.stopPropagation(),t&&o){var s=window.location.href+"/",a=o.stepsURL.split("/")[9];try{window.javaSetSelectedTutorialFunction(t)}catch(e){alert("a java error in javaSetSelectedTutorialFunction occurred: "+e.message)}try{window.javaOpenTutorialStepsFunction(s+a)}catch(e){alert("a java error in javaOpenTutorialStepsFunction occurred: "+e.message)}}}(e,t,c)},className:"list-panel-item__start-button",children:"Start"})]})]})})},k=o(678),C=(o(657),o(692)),I=o(694),E=o(693),D=o(152),A=function(e){var t=e.topics,o=[];if(t&&t.length){var s,a=Object(h.a)(t);try{for(a.s();!(s=a.n()).done;){var i=s.value;o.push(Object(v.jsx)(C.a,{className:"tutorial-preview__",children:i.title},i.title))}}catch(n){a.e(n)}finally{a.f()}}return o},_=function(e){var t=e.outcomes,o=[];if(t&&t.length){var s,a=Object(h.a)(t);try{for(a.s();!(s=a.n()).done;){var i=s.value;o.push(Object(v.jsx)(C.a,{className:"tutorial-preview__outcome",children:i.title},i.title))}}catch(n){a.e(n)}finally{a.f()}}return o},M=function(e){var t=e.tutorialName,o=e.downloadCount,s=e.tutorialData,a=(s&&Object.keys(s).length)>0?s:D[t],i=a&&a.tutorial&&a.tutorial.pageDetails||{},n=a&&a.tutorial&&a.tutorial._common||{},r=i&&i.summary;return Object(v.jsxs)("div",{className:"tutorial-preview",children:[Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("span",{}),Object(v.jsx)("p",{className:"tutorial-preview__text",children:n&&n.shortDescription})]}),Object(v.jsxs)("div",{className:"tutorial-preview__section tutorial-preview__section--row tutorial-preview__schedule--container",children:[Object(v.jsxs)("div",{className:"tutorial-preview__schedule",title:"Estimated tutorial duration time",children:[Object(v.jsx)(g.b,{className:"tutorial-preview__icon"}),Object(v.jsxs)("p",{children:[n&&n.durationTime,"."]})]}),o&&Object(v.jsxs)("div",{className:"tutorial-preview__downloads",title:"Number of downloads",children:[Object(v.jsx)(E.b,{className:"tutorial-preview__icon"}),Object(v.jsx)("p",{children:o})]})]}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("p",{className:"tutorial-preview__text",children:i&&i.topicsName}),Object(v.jsx)(I.a,{className:"tutorial-preview__list",children:Object(v.jsx)(A,{topics:i&&i.topicList})})]}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("p",{className:"tutorial-preview__text",children:i&&i.outcomesName}),Object(v.jsx)(I.a,{className:"tutorial-preview__list",children:Object(v.jsx)(_,{outcomes:i&&i.outcomeList})})]}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("p",{className:"tutorial-preview__text-header",children:r&&r.overviewName&&"Overview"}),r&&r.sections&&r.sections.map((function(e,t){return Object(v.jsx)("p",{className:"tutorial-preview__text",children:e&&e.section},"item-section:".concat(t))}))]})]})},R=o(88),P=(o(658),function(e){var t=e.preview,o=(e.initiallyOpen,e.handleLinkClick),a=e.tutorialName,i=e.tutorialZipUrl,n=e.repoName,r=e.tutorialsData,l=[],h=Object(s.useState)(null),u=Object(d.a)(h,2),m=u[0],g=u[1],w=i&&i.split("/"),b=w&&w[4],f=w&&w[7],T=w&&w[8],S="";b&&f&&T&&(S="https://api.github.com/repos/ot4i/"+b+"/releases/tags/"+f);var k=Object(s.useState)(null),C=Object(d.a)(k,2),I=C[0],E=C[1];return Object(s.useEffect)((function(){var e=function(){var e=Object(p.a)(Object(c.a)().mark((function e(){var t,o;return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!n||""===n){e.next=12;break}return e.next=3,fetch("https://ot4i.github.io/"+n+"/v12/en/data.json",{headers:new Headers({Accept:"application/vnd.github.v3+json"}),method:"GET",mode:"cors",credentials:"omit"});case 3:if(!(t=e.sent).ok){e.next=11;break}return e.next=7,t.json();case 7:o=e.sent,E(o),e.next=12;break;case 11:E({});case 12:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[n]),Object(s.useEffect)((function(){var e=function(){var e=Object(p.a)(Object(c.a)().mark((function e(){var t,o;return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(!S||""===S){e.next=10;break}return e.next=3,fetch(S,{headers:new Headers({Accept:"application/vnd.github.v3+json"}),method:"GET",mode:"cors",credentials:"omit"});case 3:return t=e.sent,e.next=6,t.json();case 6:(o=e.sent)&&o.assets[0]&&o.assets[0].download_count&&g(o.assets[0].download_count),e.next=11;break;case 10:g(null);case 11:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[S]),t&&(l.push(Object(v.jsx)("li",{className:"bx--accordion__item bx--accordion__item--active tutorial-stage tutorial-stage--preview",children:Object(v.jsx)("div",{id:"accordion-item-1",className:"bx--accordion__content",children:Object(v.jsx)(M,{tutorialName:a,downloadCount:m,tutorialData:I})})},"Overview-preview")),l.push(Object(v.jsx)("li",{className:"bx--accordion__item tutorial-stage",children:Object(v.jsx)(y.a,{className:"tutorial-start",onClick:function(){return function(e,t,o){var s=window.location.href+"/";if(e){var a=o&&o.categories&&o.categories[0]&&o.categories[0].tutorials,i=a&&a.find((function(t){return t.name===e}))||R.categories[0].tutorials.find((function(t){return t.name===e}));!function(e,t){var o=e.stepsURL;t((o&&o.split("/"))[9])}(i,t);var n=i.stepsURL.split("/")[9];try{window.javaOpenTutorialStepsFunction(s+n)}catch(r){alert("a java error in javaOpenTutorialStepsFunction occurred: "+r.message)}}}(a,o,r)},children:"Start"})},"tutorial-start"))),l}),x=function(e){var t=e.name,o=e.preview,a=e.initiallyOpen,i=e.handleLinkClick,n=e.tutorialsData,r="tutorial",l=Object(s.useState)(""),c=Object(d.a)(l,2),p=c[0],h=c[1],u=Object(s.useState)(""),m=Object(d.a)(u,2),g=m[0],w=m[1];Object(s.useEffect)((function(){h(o?"".concat(r," ").concat(r,"--preview"):"".concat(r)),w(t&&""!==t?t:""),function(e){try{window.javaSetSelectedTutorialFunction(e)}catch(t){alert("a java error in javaSetSelectedTutorialFunction occurred: "+t.message)}}(t||"")}),[o,t]);var b=n&&n.categories&&n.categories[0]&&n.categories[0].tutorials,f=b&&b.find((function(e){return e.name===g}))||R.categories[0].tutorials.find((function(e){return e.name===g})),y=f&&f.zipURL?f.zipURL:null,T=f&&f.stepsURL&&f.stepsURL.split("/")[9];return Object(v.jsx)("div",{className:p,children:Object(v.jsx)("main",{className:"tutorial__content",children:Object(v.jsx)(k.a,{children:Object(v.jsx)(P,{preview:o,initiallyOpen:a,tutorialName:g,handleLinkClick:i,tutorialZipUrl:y,repoName:T,tutorialsData:n})})})})},L=o(485),F=o(486),O=o(700),N=o(487),B=o(695),j=o(685),q=o(688),U=o(696),H=(o(659),o(660),{"aria-labelledby":"#myId","aria-label":"sample aria label to describe the nav"}),V=function(e){var t=e.children;return Object(v.jsxs)(a.a.Fragment,{children:[Object(v.jsxs)(L.a,{"aria-label":"IBM Toolkit",children:[Object(v.jsxs)(F.a,{href:"#",children:["App Connect\xa0",Object(v.jsx)("span",{className:"header-highlight",children:"Enterprise Toolkit"})]}),Object(v.jsx)(O.a,{"aria-label":"IBM Toolkit",children:Object(v.jsx)(N.a,{href:"https://org.eclipse.ui.intro/close",children:"Close page"})})]}),Object(v.jsx)(u.b,{ariaAttributes:H,navigationLinks:[Object(v.jsx)(u.e,{renderIcon:B.a,element:r.b,href:"/welcome",to:{pathname:"/welcome"},children:"Welcome"},"link-welcome-top-level"),Object(v.jsx)(u.e,{renderIcon:j.b,element:r.b,href:"/tutorials",to:{pathname:"/tutorials"},children:"Tutorials"},"link-tutorials-top-level"),Object(v.jsx)(u.e,{renderIcon:q.a,href:"https://org.eclipse.ui.intro/showHelpTopic?id=/com.ibm.etools.mft.doc/bb23850_.html",to:{pathname:"https://org.eclipse.ui.intro/showHelpTopic?id=/com.ibm.etools.mft.doc/bb23850_.html"},children:Object(v.jsx)("span",{children:"What's new"})},"link-whatsnew-top-level"),Object(v.jsx)(u.e,{renderIcon:U.a,href:"https://org.eclipse.ui.intro/showHelpTopic?id=/com.ibm.iib.langpacks.doc/bh25997_.htm",to:{pathname:"https://org.eclipse.ui.intro/showHelpTopic?id=/com.ibm.iib.langpacks.doc/bh25997_.htm"},children:Object(v.jsx)("span",{children:"Language pack"})},"link-language-top-level")],children:Object(v.jsx)("div",{className:"main-content carbon-theme--g10",children:t})})]})},J=(o(663),function(e){return e.filter((function(e){var t=e.iibVersions.split(".*"),o=parseInt(t[0]),s=parseInt(-1*t[1]);if(12>=o&&12<=s)return e}))}),G=function(e){var t=e.search,o=(e.sort,e.handleClick),s=e.tutorialsData,a=s&&s.categories[0].tutorials||R.categories[0].tutorials.slice(),i=J(a),n=new RegExp(t,"i"),r=i.filter((function(e){return null!==n.exec(e.name)||null!==n.exec(e.tags)||null!==n.exec(e.category)})),l=[],c=r;if(!t){var p=r.splice(0,3);c=r.concat(p)}var d,u=Object(h.a)(c);try{var m=function(){var e=d.value,t=e.tags&&e.tags.split(";")||[],s=e.category&&e.category.split(",")||[];l.push(Object(v.jsx)(S,{name:e.name,desc:e.shortDesc,detailsLink:e.detailsURL,tags:t.concat(s),handleLinkClick:function(t){return o(e.name,t)},hasButtons:!0,tutorialData:e},e.name))};for(u.s();!(d=u.n()).done;)m()}catch(g){u.e(g)}finally{u.f()}return l},W=function(e){var t=e.name,o=e.image,s=e.durationMins,a=e.handleClick,i="./static_files/"+o+".svg";return Object(v.jsx)("div",{className:"promoted-tutorial__container bx--col-sm-4 bx--col-md-2 bx--col-lg-4 bx--col-xlg-4 bx--col-max-4",children:Object(v.jsxs)(w.a,{handleClick:function(){return a(t)},className:"promoted-tutorial__tile",tabIndex:"0",children:[Object(v.jsx)("p",{className:"promoted-tutorial__text",children:t}),Object(v.jsxs)("div",{className:"promoted-tutorial__lower",children:[Object(v.jsx)("img",{src:i,className:"promoted-tutorial__img",alt:"Tutorial"}),Object(v.jsx)("div",{className:"promoted-tutorial__duration",children:Object(v.jsxs)("div",{className:"promoted-tutorial__lower-left",children:[Object(v.jsx)(g.a,{className:"promoted-tutorial__duration-img","aria-label":"Timing indicator"}),Object(v.jsx)("span",{className:"promoted-tutorial__duration-text",children:s})]})})]})]})})},z=function(e){for(var t=e.handleClick,o=e.tutorialsData,s=[],a=o&&o.categories[0].tutorials||R.categories[0].tutorials.slice(),i=J(a),n=0;n<3;n++){var r=D[i[n].name]&&D[i[n].name].tutorial._common.durationTime;i[n].durationMins=r,i[n].name.toLowerCase().includes("integration")?i[n].image="integration-server":a[n].name.toLowerCase().includes("message")?i[n].image="message-flow":i[n].image="rest-api",s.push(i[n])}for(var l=[],c=0,p=s;c<p.length;c++){var d=p[c];l.push(Object(v.jsx)(W,{name:d.name,image:d.image,className:"promoted-tutorial",handleClick:t,durationMins:d.durationMins},d.name))}return l},Y=[{label:"Tags",options:[]}];!function(){var e,t=J(R.categories[0].tutorials),o=[],s=["red","magenta","purple","blue","cyan","teal","green","gray","cool-gray","warm-gray"],a=new Set,i=Object(h.a)(t);try{for(i.s();!(e=i.n()).done;){var n,r=e.value,l=r.tags&&r.tags.split(";")||[],c=r.category&&r.category.split(",")||[],p=Object(h.a)(l);try{for(p.s();!(n=p.n()).done;){var d=n.value;a.add(d)}}catch(y){p.e(y)}finally{p.f()}var u,m=Object(h.a)(c);try{for(m.s();!(u=m.n()).done;){var g=u.value;a.add(g)}}catch(y){m.e(y)}finally{m.f()}}}catch(y){i.e(y)}finally{i.f()}var w,b=Object(h.a)(a);try{for(b.s();!(w=b.n()).done;){var f=w.value;o.push({type:s[Math.floor(Math.random()*s.length)],value:f,label:f})}}catch(y){b.e(y)}finally{b.f()}Y.push({label:"Tags",options:o})}();var Q=function(e){Object(l.g)();var t=Object(s.useState)(""),o=Object(d.a)(t,2),a=o[0],i=o[1],n=Object(s.useState)(!1),r=Object(d.a)(n,2),c=r[0],p=r[1],h=Object(s.useState)({}),g=Object(d.a)(h,2),w=g[0],b=g[1],f=Object(s.useState)(!0),y=Object(d.a)(f,2),T=y[0],S=(y[1],document.getElementsByClassName("IdeNavigation--content")),k=function(e){p(!0),b({title:e}),S[0].style.overflow="hidden"},C=function(){p(!1),b({}),S[0].style.overflow="auto"},I=Object(s.useState)(null),E=Object(d.a)(I,2),D=E[0];E[1];return Object(s.useEffect)((function(){}),[]),Object(v.jsxs)(V,{children:[Object(v.jsx)(u.d,{heading:"Tutorials"}),Object(v.jsx)(u.c,{children:Object(v.jsxs)("div",{className:"tutorials",children:[Object(v.jsx)(m.a,{options:Y,onChange:function(e){if(e){var t=e.map((function(e){return e.value}));i("((".concat(t.join(")|("),"))"))}else i("")},placeholderText:"What are you looking for today?",searchForText:"Search for"}),Object(v.jsxs)("div",{className:"tutorials-page__section",children:[0===a.length&&Object(v.jsx)(v.Fragment,{children:Object(v.jsx)("ul",{className:"tutorials__promoted-list",children:Object(v.jsx)(z,{handleClick:k,tutorialsData:D})})}),Object(v.jsx)("ul",{className:"tutorials__list",children:Object(v.jsx)(G,{search:a,handleClick:k,tutorialsData:D})})]})]})}),Object(v.jsx)(u.f,{open:c,onOverlayClose:C,onClose:C,size:"medium",title:w.title,children:Object(v.jsx)(x,{name:w.title,preview:T,handleLinkClick:function(e){console.log("Link click for '".concat(e,"'")),S[0].style.overflow="auto"},tutorialsData:D})})]})},K=(o(664),o.p+"static/media/message-flow-v2.e2228c74.svg"),X=function(e){var t=Object(l.g)(),o={headerOne:"Welcome to IBM App Connect Enterprise Toolkit",headerTwo:"Integrate your business. Connect your world.",headerGraphic:{imgSrc:K,imgAlt:"My image alt text",imgClassName:"ide--home-storybook-header"},sets:[{id:"getting_started",setHeading:"Getting Started",tasks:[{taskId:"tutorials",cardSize:"standard",taskHeading:"Tutorials",taskHeadingDescription:"Get started quickly using our tutorials",taskGraphic:j.c,onInteract:function(e){return s(e)}},{taskId:"whats-new",cardSize:"standard",taskHeading:"What's new?",taskHeadingDescription:"See what's new in IBM App Connect Enterprise 12",taskGraphic:q.b,cardHref:"https://org.eclipse.ui.intro/showHelpTopic?id=/com.ibm.etools.mft.doc/bb23850_.html"},{taskId:"language-pack",cardSize:"standard",taskHeading:"Language pack",taskHeadingDescription:"Install a toolkit language pack",taskGraphic:U.b,cardHref:"https://org.eclipse.ui.intro/showHelpTopic?id=/com.ibm.iib.langpacks.doc/bh25997_.htm"}]}]},s=function(o){t.push("/".concat(o).concat(e.location.search))};return Object(v.jsx)(V,{children:Object(v.jsx)(u.a,Object(b.a)({},o))})},Z=o(686),$=o(697),ee=o(698),te=o(699),oe=o(89),se=(o(676),function(e){var t,o=e.topics,s=[],a=Object(h.a)(o);try{for(a.s();!(t=a.n()).done;){var i=t.value;s.push(Object(v.jsx)(C.a,{className:"tutorial-preview__",children:i.title},i.title))}}catch(n){a.e(n)}finally{a.f()}return s}),ae=function(e){var t,o=e.outcomes,s=[],a=Object(h.a)(o);try{for(a.s();!(t=a.n()).done;){var i=t.value;s.push(Object(v.jsx)(C.a,{className:"tutorial-preview__outcome",children:i.title},i.title))}}catch(n){a.e(n)}finally{a.f()}return s},ie=function(e){var t,o,a,i,n,r,l,h,u,m,w,b,f,T,S,D=Object(s.useState)(null),A=Object(d.a)(D,2),_=A[0],M=A[1],P=e.match.params.tutorial;Object(s.useEffect)((function(){var e=function(){var e=Object(p.a)(Object(c.a)().mark((function e(){var t,o;return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://ot4i.github.io/"+P+"/v12/en/data.json",{headers:new Headers({Accept:"application/vnd.github.v3+json"}),method:"GET",mode:"cors",credentials:"omit"});case 2:return t=e.sent,e.next=5,t.json();case 5:(o=e.sent)&&M(o);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[P]);var x=Object(s.useState)(null),L=Object(d.a)(x,2),F=L[0],O=L[1];Object(s.useEffect)((function(){var e=function(){var e=Object(p.a)(Object(c.a)().mark((function e(){var t,o;return Object(c.a)().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,fetch("https://ot4i.github.io/ace-tutorials/v12/en/repo_metadata.json",{headers:new Headers({Accept:"application/vnd.github.v3+json"}),method:"GET",mode:"cors",credentials:"omit"});case 2:return t=e.sent,e.next=5,t.json();case 5:(o=e.sent)&&O(o);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();e()}),[]);var N,B,j,q=null===_||void 0===_||null===(t=_.tutorial)||void 0===t?void 0:t.pageSteps,U=null===_||void 0===_||null===(o=_.tutorial)||void 0===o||null===(a=o._common)||void 0===a?void 0:a.name,H=null===_||void 0===_||null===(i=_.tutorial)||void 0===i||null===(n=i._common)||void 0===n?void 0:n.shortDescription,V=null===q||void 0===q?void 0:q.create,J=null===q||void 0===q?void 0:q.prepare,G=null===q||void 0===q?void 0:q.run,W=null===_||void 0===_||null===(r=_.tutorial)||void 0===r||null===(l=r._common)||void 0===l||null===(h=l.helpLink)||void 0===h?void 0:h.link,z=null===_||void 0===_||null===(u=_.tutorial)||void 0===u||null===(m=u._common)||void 0===m||null===(w=m.helpLink)||void 0===w?void 0:w.text,Y=function(e,t){e.preventDefault();try{window.javaOpenURLInExternalBrowserFunction(t)}catch(o){alert("a java error in javaOpenURLInExternalBrowserFunction occurred: "+o.message)}},Q=function(e){try{window.javaOpenResourceEditorTutorialFunction(e)}catch(t){alert("a java error in javaOpenResourceEditorTutorialFunction occurred: "+t.message)}},K=(null===_||void 0===_||null===(b=_.tutorial)||void 0===b?void 0:b.pageDetails)||"",X=(null===_||void 0===_||null===(f=_.tutorial)||void 0===f?void 0:f._common)||"",ie=(null===_||void 0===_||null===(T=_.tutorial)||void 0===T||null===(S=T.pageDetails)||void 0===S?void 0:S.summary)||{};return _?(F&&F.categories&&F.categories[0]&&F.categories[0].tutorials&&window.localStorage&&(localStorage.getItem("firstLoad")?localStorage.removeItem("firstLoad"):(localStorage.firstLoad=!0,window.location.reload())),Object(v.jsxs)("div",{className:"tutorial-page__tutorial",children:[Object(v.jsxs)("div",{className:"tutorials-page__tutorial--title-container",children:[Object(v.jsx)("h3",{className:"tutorials-page__tutorial--title",children:U}),Object(v.jsx)(Z.a,{href:"#",onClick:function(e){return function(t){t.preventDefault();try{window.javaBackToGalleryFunction()}catch(e){alert("a java error in javaBackToGalleryFunction occurred: "+e.message)}}(e)},className:"tutorials-page__tutorial--title-link",children:"Back to gallery"})]}),Object(v.jsx)("hr",{className:"tutorials-page__tutorial--hr"}),Object(v.jsxs)("div",{className:"tutorials-page__tutorial--content-container",children:[Object(v.jsxs)("div",{className:"tutorials-page__tutorial--subtitle-container",children:[Object(v.jsx)("p",{className:"tutorials-page__tutorial--subtitle",children:H}),Object(v.jsx)(Z.a,{href:"#",onClick:function(e){return function(e){e.preventDefault();try{window.javaOpenURLInExternalBrowserFunction(W)}catch(e){alert("a java error in javaOpenURLInExternalBrowserFunction occurred: "+e.message)}}(e)},className:"tutorials-page__tutorial--subtitle-link",children:z})]}),Object(v.jsx)("br",{}),Object(v.jsxs)(k.a,{size:"xl",children:[Object(v.jsx)($.a,{title:"Overview",className:"tutorial-stage tutorial-stage--overview",children:Object(v.jsxs)("div",{className:"tutorial-preview",children:[Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("span",{}),Object(v.jsx)("h6",{children:X.shortDescription})]}),Object(v.jsx)("div",{className:"tutorial-preview__section tutorial-preview__section--row tutorial-preview__schedule--container",children:Object(v.jsxs)("div",{className:"tutorial-preview__schedule",title:"Estimated tutorial duration time",children:[Object(v.jsx)(g.a,{className:"tutorial-preview__icon"}),Object(v.jsxs)("p",{children:[X.durationTime,"."]})]})}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("p",{className:"tutorial-preview__text",children:K.topicsName}),Object(v.jsx)(I.a,{className:"tutorial-preview__list",children:Object(v.jsx)(se,{topics:K.topicList})})]}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("p",{className:"tutorial-preview__text",children:K.outcomesName}),Object(v.jsx)(I.a,{className:"tutorial-preview__list",children:Object(v.jsx)(ae,{outcomes:K.outcomeList})})]}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("p",{className:"tutorial-preview__text-header",children:"OVERVIEW"===(ie&&ie.overviewName)?"Details":ie.overviewName}),ie&&ie.sections&&ie.sections.map((function(e,t){return Object(v.jsx)("p",{className:"tutorial-preview__text",children:e.section},"item-section:".concat(t))}))]})]})},"tutorial-stage-overview"),Object(v.jsx)($.a,{title:"Create",className:"tutorial-stage tutorial-stage--create",open:!0,children:Object(v.jsxs)("div",{className:"tutorial-preview",children:[Object(v.jsxs)("div",{className:"tutorial-preview__section tutorial-preview__section-inline",children:[Object(v.jsx)("h6",{className:"tutorial-preview__section-header",children:V.overview.heading}),V&&V.actions&&V.actions.details&&V.actions.details.map((function(e,t){return"importArtifacts()"===e.method&&Object(v.jsx)(y.a,{href:"#",onClick:function(e){return function(t,o){t.preventDefault();var s=U,a=o&&o.categories&&o.categories[0]&&o.categories[0].tutorials,i=a&&a.find((function(e){return e.name===s}))||R.categories[0].tutorials.find((function(e){return e.name===s})),n=i&&i.zipURL;try{window.javaImportPIFileFunction(s,n)}catch(e){alert("a java error in javaOpenURLInExternalBrowserFunction occurred: "+e.message)}if(i&&i.editorResPaths&&i.editorResPaths.length){var r=i.editorResPaths[0].id;r&&Q(r)}}(e,F)},size:"sm",renderIcon:E.a,className:"tutorial-preview__section-button",children:e.name},"createStep-button:".concat(t))}))]}),Object(v.jsx)("div",{className:"tutorial-preview__section",children:V&&V.overview&&V.overview.sections&&V.overview.sections.map((function(e,t){return Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{className:"tutorial-preview__text",children:e&&e.section&&Object(oe.a)(e.section)},"item-section:".concat(t)),e.steps&&e.steps.details&&e.steps.details.map((function(e,t){return Object(v.jsx)("p",{className:"tutorial-preview__text",children:e&&e.details&&Object(oe.a)(e.details)},"item-section:".concat(t))}))]},"item-container:".concat(t))}))}),Object(v.jsx)("br",{}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("h6",{className:"tutorial-preview__section-header",children:null===V||void 0===V||null===(N=V.helpLinks)||void 0===N?void 0:N.title}),V&&V.helpLinks&&V.helpLinks.details&&V.helpLinks.details.map((function(e,t){return Object(v.jsx)("div",{children:Object(v.jsx)(Z.a,{href:"#",onClick:function(t){return Y(t,e.link)},children:e.description},"item-section-create-help:".concat(t))},"item-container-create-help:".concat(t))}))]})]})},"tutorial-stage-create"),Object(v.jsx)($.a,{title:"Prepare",className:"tutorial-stage tutorial-stage--prepare",children:Object(v.jsxs)("div",{className:"tutorial-preview",children:[Object(v.jsx)("div",{className:"tutorial-preview__section tutorial-preview__section-inline",children:Object(v.jsx)("h6",{className:"tutorial-preview__section-header",children:J.overview.heading})}),Object(v.jsx)("div",{className:"tutorial-preview__section",children:J&&J.overview&&J.overview.sections&&J.overview.sections.map((function(e,t){return Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{className:"tutorial-preview__text",children:e&&e.section&&Object(oe.a)(e.section)},"item-section-prepare:".concat(t)),Object(v.jsx)(ee.a,{className:"tutorial-preview__section--ordered-list",children:e.steps&&e.steps.details&&e.steps.details.map((function(e,t){return Object(v.jsxs)(C.a,{className:"tutorial-preview__section--list",children:[e&&e.details&&Object(oe.a)(e.details),e&&e.substeps&&e.substeps.details.map((function(e,t){return Object(v.jsx)(C.a,{className:"tutorial-preview__section--list tutorial-preview__section--list-substep",children:e.details&&Object(oe.a)(e.details)},"item-section-prepare:".concat(t))}))]},"item-section-prepare:".concat(t))}))})]},"item-container-prepare:".concat(t))}))}),Object(v.jsx)("br",{}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("h6",{className:"tutorial-preview__section-header",children:null===J||void 0===J||null===(B=J.helpLinks)||void 0===B?void 0:B.title}),J&&J.helpLinks&&J.helpLinks.details&&J.helpLinks.details.map((function(e,t){return Object(v.jsx)("div",{children:Object(v.jsx)(Z.a,{href:"#",onClick:function(t){return Y(t,e.link)},children:e.description},"item-section-prepare-help:".concat(t))},"item-container-prepare-help:".concat(t))}))]})]})},"tutorial-stage-prepare"),Object(v.jsx)($.a,{title:"Run",className:"tutorial-stage tutorial-stage--run",children:Object(v.jsxs)("div",{className:"tutorial-preview",children:[Object(v.jsx)("div",{className:"tutorial-preview__section tutorial-preview__section-inline",children:Object(v.jsx)("h6",{className:"tutorial-preview__section-header",children:G.overview.heading})}),Object(v.jsx)("div",{className:"tutorial-preview__section",children:G&&G.overview&&G.overview.sections&&G.overview.sections.map((function(e,t){return Object(v.jsxs)("div",{children:[Object(v.jsx)("p",{className:"tutorial-preview__text",children:e&&e.section&&Object(oe.a)(e.section)},"item-section-run:".concat(t)),Object(v.jsx)(ee.a,{className:"tutorial-preview__section--ordered-list",children:e.steps&&e.steps.details&&e.steps.details.map((function(e,t){return Object(v.jsxs)(C.a,{className:"tutorial-preview__section--list",children:[e&&e.details&&Object(oe.a)(e.details),e&&e.substeps&&e.substeps.details.map((function(e,t){return Object(v.jsx)(C.a,{className:"tutorial-preview__section--list tutorial-preview__section--list-substep",children:e.details&&Object(oe.a)(e.details)},"item-section-run:".concat(t))}))]},"item-section-run-detail:".concat(t))}))})]},"item-container-run:".concat(t))}))}),Object(v.jsx)("br",{}),Object(v.jsxs)("div",{className:"tutorial-preview__section",children:[Object(v.jsx)("h6",{className:"tutorial-preview__section-header",children:null===G||void 0===G||null===(j=G.helpLinks)||void 0===j?void 0:j.title}),G&&G.helpLinks&&G.helpLinks.details&&G.helpLinks.details.map((function(e,t){return Object(v.jsx)("div",{children:Object(v.jsx)(Z.a,{href:"#",onClick:function(t){return Y(t,e.link)},children:e.description},"item-section-run-help:".concat(t))},"item-container-run-help:".concat(t))}))]}),G&&G.exits&&G.exits.details&&G.exits.details.length&&Object(v.jsx)("div",{className:"tutorial-preview__section",children:G&&G.exits&&G.exits.details&&G.exits.details.map((function(e,t){return Object(v.jsxs)("div",{children:[Object(v.jsx)("h6",{className:"tutorial-preview__section-header",children:e.cleanupDescription||e.description}),"cleanUp()"===e.method&&Object(v.jsx)(y.a,{kind:"danger--tertiary",onClick:function(e){return function(t){t.preventDefault();var o=null;try{var s=javaGetSelectedTutorialFunction()[0];o=JSON.parse(s)}catch(e){alert("a java error in javaGetSelectedTutorialFunction occurred: "+e.message)}if(void 0!==o){try{javaUnDeployResourcesFunction()}catch(e){alert("a java error in javaUnDeployResourcesFunction occurred: "+e.message)}try{javaDeleteProjectsFromWorkspaceFunction(o.projects.split(":"))}catch(e){alert("a java error in javaDeleteProjectsFromWorkspaceFunction occurred: "+e.message)}}}(e)},renderIcon:te.a,iconDescription:e.cleanupDescription||e.description,size:"sm",className:"tutorial-preview__section-button",children:e.name},"item-section-run-exit:".concat(t))]},"item-container-run-exit:".concat(t))}))})]})},"tutorial-stage-run")]})]})]})):""};var ne=function(){return Object(v.jsx)("div",{className:"App toolkit-prototype",children:Object(v.jsx)(r.a,{basename:".",children:Object(v.jsxs)(l.d,{children:[Object(v.jsx)(l.b,{exact:!0,path:"/tutorials",component:Q},"route-tutorials-page"),Object(v.jsx)(l.b,{exact:!0,path:"/welcome",component:X},"route-welcome-page"),Object(v.jsx)(l.b,{path:"/tutorials/:tutorial",component:ie},"route-tutorial-page"),Object(v.jsx)(l.a,{exact:!0,from:"/",to:"/welcome"})]})})})};n.a.render(Object(v.jsx)(ne,{}),document.getElementById("root"))},88:function(e){e.exports=JSON.parse('{"_comment":"Content from this URL https://github.com/ot4i/ot4i.github.io/blob/master/tutorials/en/repo_metadata.json","managerUrl":"https://ot4i.github.io/tutorials","managerVersion":"1.0","downloadableForLocalInstall":"https://github.com/ot4i/tutorials/releases/download/localInstall.zip","categories":[{"name":"Tool Capabilities","description":"Explore App Connect Enterprise concepts by following simple tutorials","descriptionUrl":"https://ot4i.github.io/tutorials/en/categories/Tools_Category_overview.htm","iibVersions":"","visible":"true","tutorials":[{"name":"Getting started - Creating a very simple message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to quickly create a very simple message flow","detailsURL":"https://ot4i.github.io/simple-flow-tutorial/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/simple-flow-tutorial","zipURL":"","barFile":"","visible":"true","tags":"Getting started;REST","isPattern":"false","isFavorite":"true","projects":"SimpleApp","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/ExampleApp/ExampleFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleApp"}]},{"name":"Getting started - Creating an Integration Server","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn some basics about integration servers and how to use them","detailsURL":"https://ot4i.github.io/integration-server-tutorial/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/integration-server-tutorial","zipURL":"https://github.com/ot4i/integration-server-tutorial/releases/download/v3.0/PI_IntegrationServerTutorial.zip","barFile":"","visible":"true","tags":"Getting started;REST","isPattern":"false","isFavorite":"true","projects":"SimpleApp","editorResPaths":[{"id":"SimpleFlow","editor":"flow","wspath":"<workspace>/SimpleApp/SimpleFlow.msgflow"}],"deployedResources":[{"type":"application","path":"SimpleApp"}]},{"name":"Getting started - Creating a Simple Unit Test","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn some basics about how to do test driven development and create unit tests","detailsURL":"https://ot4i.github.io/unit-test-simple-tutorial/v12/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/unit-test-simple-tutorial","zipURL":"https://github.com/ot4i/unit-test-simple-tutorial/releases/download/v3.0/PI_UnitTestSimple.zip","barFile":"","visible":"true","tags":"Getting started;test","isPattern":"false","isFavorite":"true","projects":"MyApplication","editorResPaths":[{"id":"MyMessageFlow","editor":"flow","wspath":"<workspace>/MyApplication/MyMessageFlow.msgflow"}],"deployedResources":[]},{"name":"Getting Started - Cloning a GitHub repository in the Toolkit","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to clone a repository from GitHub which contains an IBM App Connect Enterprise Toolkit project","detailsURL":"https://ot4i.github.io/egit-tutorial/v12/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/egit-tutorial","zipURL":"","barFile":"","visible":"true","tags":"Getting started","isPattern":"false","isFavorite":"true","projects":"MyExampleApplication","editorResPaths":[{"id":"MyExampleFlow","editor":"flow","wspath":"<workspace>/MyExampleApplication/MyExampleFlow.msgflow"}],"deployedResources":[]},{"name":"Getting started - Exploring the Web UI","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn some basics about administration using the Web UI","detailsURL":"https://ot4i.github.io/webui-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/webui-tutorial","zipURL":"https://github.com/ot4i/webui-tutorial/releases/download/v3.0/PI_WebUITutorial.zip","barFile":"","visible":"true","tags":"Getting started;administration","isPattern":"false","isFavorite":"true","projects":"CustomerDatabaseV1:CustomerDatabaseJava:TemperatureConverter:Transformation_Map","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/Transformation_Map/Transformation_Map.msgflow"}],"deployedResources":[{"type":"application","path":"Transformation_Map"},{"type":"application","path":"CustomerDatabaseV1"},{"type":"application","path":"TemperatureConverter"}]},{"name":"Getting started - Exploring the Admin REST API","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn some basics about administration using the Admin REST API","detailsURL":"https://ot4i.github.io/adminrestapi-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/adminrestapi-tutorial","zipURL":"https://github.com/ot4i/adminrestapi-tutorial/releases/download/v3.0/PI_AdminrestapiTutorial.zip","barFile":"","visible":"true","tags":"Getting started;administration","isPattern":"false","isFavorite":"true","projects":"ExampleApp","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/ExampleApp/HTTPEcho1.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleApp"}]},{"name":"Getting started - Policy Projects and Policies","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn about configuring behavior using Policies","detailsURL":"https://ot4i.github.io/policy-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/policy-tutorial","zipURL":"https://github.com/ot4i/policy-tutorial/releases/download/v3.0/PI_PolicyTutorial.zip","barFile":"","visible":"true","tags":"Getting started;policy;administration","isPattern":"false","isFavorite":"true","projects":"SimpleApp:SimplePolicyProject","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/SimpleApp/HTTPEcho.msgflow"}],"deployedResources":[{"type":"application","path":"SimpleApp"}]},{"name":"Getting started - Policy Projects and Policies with Overrides","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn about configuring behavior using Policies and the hierarchy of policy overrides","detailsURL":"https://ot4i.github.io/policy-overrides-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/policy-overrides-tutorial","zipURL":"https://github.com/ot4i/policy-overrides-tutorial/releases/download/v3.0/PI_PolicyOverridesTutorial.zip","barFile":"","visible":"true","tags":"Getting started;policy;administration","isPattern":"false","isFavorite":"true","projects":"HTTPInputEmailOutput","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/HTTPInputEmailOutput/HTTPInputEmailOutput.msgflow"}],"deployedResources":[]},{"name":"Getting started - Message Flow Statistics","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to view performance information using Message Flow Statistics","detailsURL":"https://ot4i.github.io/flow-stats-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/flow-stats-tutorial","zipURL":"https://github.com/ot4i/flow-stats-tutorial/releases/download/v3.0/PI_FlowStatsTutorial.zip","barFile":"","visible":"true","tags":"statistics;administration","isPattern":"false","isFavorite":"true","projects":"StatsApp","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/StatsApp/StatsFlow.msgflow"}],"deployedResources":[{"type":"application","path":"StatsApp"}]},{"name":"Getting started - Resource Statistics","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to view performance information using Resource Statistics","detailsURL":"https://ot4i.github.io/resource-stats-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/resource-stats-tutorial","zipURL":"https://github.com/ot4i/resource-stats-tutorial/releases/download/v3.0/PI_ResourceStatsTutorial.zip","barFile":"","visible":"true","tags":"statistics;administration","isPattern":"false","isFavorite":"true","projects":"ResourceStatsApp","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/ResourceStatsApp/FileRecordSplitter.msgflow"}],"deployedResources":[{"type":"application","path":"ResourceStatsApp"}]},{"name":"Optimizing the startup time of an independent Integration Server","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to optimize the startup time of an independent integration server using the ibmint command (requires v12.0.4.0 or higher)","detailsURL":"https://ot4i.github.io/optimize-startup-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/optimize-startup-tutorial","zipURL":"https://github.com/ot4i/optimize-startup-tutorial/releases/download/v3.0/PI_Optimize.zip","barFile":"<workspace>/ExampleApplication/Example.bar","visible":"true","tags":"Optimize;containers","isPattern":"false","isFavorite":"true","projects":"ExampleApplication","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleApplication/ExampleFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleApplication"}]},{"name":"Using the Java IBM Integration API - Strategic classes","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Java IBM Integration API\'s strategic com.ibm.integration.admin.proxy.* classes","detailsURL":"https://ot4i.github.io/intapiv11-model-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/intapiv11-model-tutorial","zipURL":"https://github.com/ot4i/intapiv11-model-tutorial/releases/download/v3.0/PI_IntegrationAPIModel.zip","barFile":"<workspace>/ExampleApplication/DeployApplication.bar","visible":"true","tags":"java;administration","isPattern":"false","isFavorite":"true","projects":"ExampleApplication:ExampleACEAdminProgram","editorResPaths":[{"id":"MainJava","editor":"java","wspath":"<workspace>/ExampleACEAdminProgram/src/com/ibm/dev/ExampleACEAdminProgram.java"}],"deployedResources":[{"type":"application","path":"ExampleApplication"}]},{"name":"Using the Java IBM Integration API - HTTP classes","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Java IBM Integration API\'s strategic com.ibm.integration.admin.http.* classes","detailsURL":"https://ot4i.github.io/intapiv11-http-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/intapiv11-http-tutorial","zipURL":"https://github.com/ot4i/intapiv11-http-tutorial/releases/download/v3.0/PI_IntegrationAPIHTTP.zip","barFile":"","visible":"true","tags":"java;administration","isPattern":"false","isFavorite":"true","projects":"ExampleACEAdminProgram_HTTPClient","editorResPaths":[{"id":"MainJava","editor":"java","wspath":"<workspace>/ExampleACEAdminProgram_HTTPClient/src/com/ibm/dev/ExampleACEAdminProgram_HTTPClient.java"}],"deployedResources":[]},{"name":"OpenAPI Specification v3 - Using an example REST API","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use an IBM App Connect Enterprise REST API, which has been built to conform to the OpenAPI Specification","detailsURL":"http://ot4i.github.io/openapi-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/openapi-tutorial","zipURL":"https://github.com/ot4i/openapi-tutorial/releases/download/v3.0/PI_CountryAPI.zip","barFile":"","visible":"true","tags":"REST;OpenAPI","isPattern":"false","isFavorite":"true","projects":"CountryAPI:CountryAPIJava","editorResPaths":[{"id":"CountryAPI","editor":"","wspath":"<workspace>/CountryAPI/restapi.descriptor"}],"deployedResources":[{"type":"restapi","path":"CountryAPI"}]},{"name":"OpenAPI Specification v3 - Creating a REST API from a document import","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to create an IBM App Connect Enterprise REST API, by importing a document which conforms to the OpenAPI Specification v3","detailsURL":"http://ot4i.github.io/openapi-import-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/openapi-import-tutorial","zipURL":"https://github.com/ot4i/openapi-import-tutorial/releases/download/v3.0/PI_ImportOpenAPI.zip","barFile":"","visible":"true","tags":"REST;OpenAPI","isPattern":"false","isFavorite":"true","projects":"TutorialHelperFiles","editorResPaths":[{"id":"MainFlow","editor":"text","wspath":"<workspace>/TutorialHelperFiles/json/ShoppingListAPI.json"}],"deployedResources":[{"type":"restapi","path":"ShoppingListAPI"}]},{"name":"OpenAPI Specification v3 - Adding an operation to a REST API using the API Editor","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the API Editor to add an operation to an IBM App Connect Enterprise REST API which conforms to the OpenAPI Specification v3","detailsURL":"http://ot4i.github.io/openapi-addoperation-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/openapi-addoperation-tutorial","zipURL":"https://github.com/ot4i/openapi-addoperation-tutorial/releases/download/v3.0/PI_OpenAPIAddOperation.zip","barFile":"","visible":"true","tags":"REST;OpenAPI","isPattern":"false","isFavorite":"true","projects":"TutorialHelperFiles","editorResPaths":[{"id":"ShoppingListAPI","editor":"","wspath":"<workspace>/ShoppingListAPI/restapi.descriptor"}],"deployedResources":[{"type":"restapi","path":"ShoppingListAPI"}]},{"name":"Using a REST API to manage a set of records","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a REST API with a simple example managing a set of records.","detailsURL":"http://ot4i.github.io/rest-api-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/rest-api-tutorial","zipURL":"https://github.com/ot4i/rest-api-tutorial/releases/download/v3.0/PI_RESTAPITutorial.zip","barFile":"<workspace>/BARfiles/CustomerDatabaseV1.bar","visible":"true","tags":"REST","isPattern":"false","isFavorite":"true","projects":"BARfiles:CustomerDatabaseJava:CustomerDatabaseV1","editorResPaths":[{"id":"CustomerDatabaseV1","editor":"","wspath":"<workspace>/CustomerDatabaseV1/restapi.descriptor"}],"deployedResources":[{"type":"restapi","path":"CustomerDatabaseV1"}]},{"name":"Using a HTTP Input to drive a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use HTTPInput and HTTPReply nodes to expose an http URL that can drive a message flow.","detailsURL":"https://ot4i.github.io/http-input-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/http-input-tutorial","zipURL":"https://github.com/ot4i/http-input-tutorial/releases/download/v3.0/PI_HTTPInputApplication.zip","barFile":"<workspace>/HTTPInputApplication/HTTPInputApplication.bar","visible":"true","tags":"HTTP;transformation","isPattern":"false","isFavorite":"true","projects":"HTTPInputApplication","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/HTTPInputApplication/HTTPInputMessageFlow.msgflow"}],"deployedResources":[{"type":"application","path":"HTTPInputApplication"}]},{"name":"Using a Mapping node to access a Lookup table that is stored in the Global Cache","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Mapping node to graphically access a Lookup table stored in the Global Cache","detailsURL":"https://ot4i.github.io/mapping-cache-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/mapping-cache-tutorial","zipURL":"https://github.com/ot4i/mapping-cache-tutorial/releases/download/v3.0/PI_MappingCache.zip","barFile":"","visible":"true","tags":"transformation;map;cache","isPattern":"false","isFavorite":"true","projects":"LookupTable_UsingMappingGlobalCache","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/LookupTable_UsingMappingGlobalCache/LookupCountyFullName.msgflow"}],"deployedResources":[]},{"name":"Using a Compute node to access a Lookup table stored in a shared variable in memory","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use ESQL shared variables to access a Lookup table that is cached in memory","detailsURL":"https://ot4i.github.io/shared-variable-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/shared-variable-tutorial","zipURL":"https://github.com/ot4i/shared-variable-tutorial/releases/download/v3.0/PI_SharedVariableCache.zip","barFile":"","visible":"true","tags":"transformation;esql;cache","isPattern":"false","isFavorite":"true","projects":"LookupTable_UsingESQLSharedVariable","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/LookupTable_UsingESQLSharedVariable/LookupCountyFullName.msgflow"}],"deployedResources":[]},{"name":"Using a JavaCompute node to split up a large input file","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Split a large input message into individual records, using Java transformation code, in a memory-efficient manner.","detailsURL":"https://ot4i.github.io/large-messaging-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/large-messaging-tutorial","zipURL":"https://github.com/ot4i/large-messaging-tutorial/releases/download/v3.0/PI_LargeMessaging.zip","barFile":"<workspace>/BARfiles/LargeMessages.bar","visible":"true","tags":"java;transformation","isPattern":"false","isFavorite":"true","projects":"LargeMessages:LargeMessagesJava:BARfiles","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/LargeMessages/LargeMessages.msgflow"}],"deployedResources":[{"type":"application","path":"LargeMessages"}]},{"name":"Using a ResetContentDescriptor node to associate a new parser with a message in a flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the ResetContentDescriptor node to associate a new parser with a message, shown in this example of reacting to a parser exception on input to a flow.","detailsURL":"https://ot4i.github.io/rcd-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/rcd-tutorial","zipURL":"https://github.com/ot4i/rcd-tutorial/releases/download/v3.0/PI_ResetContentDescriptor.zip","barFile":"<workspace>/ExampleResetContentDescriptor/ResetContentDescriptor.bar","visible":"true","tags":"transformation","isPattern":"false","isFavorite":"true","projects":"ExampleResetContentDescriptor","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleResetContentDescriptor/ResetContentDescriptor.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleResetContentDescriptor"}]},{"name":"Using a FlowOrder node to control the order of execution paths in a flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the FlowOrder node to control the order of execution paths in a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/floworder-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/floworder-tutorial","zipURL":"https://github.com/ot4i/floworder-tutorial/releases/download/v3.0/PI_FlowOrder.zip","barFile":"<workspace>/ExampleFlowOrder/FlowOrder.bar","visible":"true","tags":"transformation","isPattern":"false","isFavorite":"true","projects":"ExampleFlowOrder","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleFlowOrder/FlowOrder.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleFlowOrder"}]},{"name":"Using a Validate node to check a message against an XML schema","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Validate node to check a message against an XML schema in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/validate-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/validate-tutorial","zipURL":"https://github.com/ot4i/validate-tutorial/releases/download/v3.0/PI_Validate.zip","barFile":"<workspace>/ExampleValidate/Validate.bar","visible":"true","tags":"validation","isPattern":"false","isFavorite":"true","projects":"ExampleValidate","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleValidate/Validate.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleValidate"}]},{"name":"Using a Validate node to check a message against a JSON schema","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Validate node to check a message against a JSON schema in a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/validate-json-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/validate-json-tutorial","zipURL":"https://github.com/ot4i/validate-json-tutorial/releases/download/v3.0/PI_ExampleValidateJSON.zip","barFile":"","visible":"true","tags":"validation","isPattern":"false","isFavorite":"true","projects":"ExampleValidateJSON","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleValidateJSON/ValidateJSON.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleValidateJSON"}]},{"name":"Using a Throw node to throw an exception in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the throw node to throw an exception and use the Compute node to navigate the resulting ExceptionList.","detailsURL":"https://ot4i.github.io/throw-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/throw-tutorial","zipURL":"https://github.com/ot4i/throw-tutorial/releases/download/v3.0/PI_ThrowException.zip","barFile":"<workspace>/ExampleThrowException/ThrowException.bar","visible":"true","tags":"validation","isPattern":"false","isFavorite":"true","projects":"ExampleThrowException","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleThrowException/ThrowException.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleThrowException"}]},{"name":"Using a TryCatch node to catch an exception thrown within a section of a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the TryCatch node to isolate exceptions which are thrown from different parts of a message flow.","detailsURL":"https://ot4i.github.io/trycatch-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/trycatch-tutorial","zipURL":"https://github.com/ot4i/trycatch-tutorial/releases/download/v3.0/PI_TryCatch.zip","barFile":"<workspace>/ExampleTryCatch/TryCatch.bar","visible":"true","tags":"transformation","isPattern":"false","isFavorite":"true","projects":"ExampleTryCatch","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleTryCatch/TryCatch.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleTryCatch"}]},{"name":"Using a WorkLoad Management Policy to restrict the maximum throughput of a flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Workload Management Policy to restrict the maximum rate at which a message flow can run.","detailsURL":"https://ot4i.github.io/wlm-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/wlm-tutorial","zipURL":"https://github.com/ot4i/wlm-tutorial/releases/download/v3.0/PI_WLMTutorial.zip","barFile":"<workspace>/WorkloadManagementApplication/wlm.bar","visible":"true","tags":"policy","isPattern":"false","isFavorite":"true","projects":"WorkloadManagementApplication","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/WorkloadManagementApplication/WorkloadManagementFlow.msgflow"}],"deployedResources":[{"type":"application","path":"WorkloadManagementApplication"}]},{"name":"Using a LoopBack Request node to insert data into a Cloudant database","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the LoopBackRequest node to create a JSON document in a Cloudant database.","detailsURL":"https://ot4i.github.io/loopback-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/loopback-tutorial","zipURL":"https://github.com/ot4i/loopback-tutorial/releases/download/v3.0/PI_LoopbackTutorial.zip","barFile":"","visible":"true","tags":"loopback","isPattern":"false","isFavorite":"true","projects":"LoopBack","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/LoopBack/Loopback_Cloudant.msgflow"}],"deployedResources":[{"type":"application","path":"LoopBack"}]},{"name":"Using a SalesforceRequest node to retrieve records from Salesforce.com","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the SalesforceRequest node to retrieve records from Salesforce.com","detailsURL":"http://ot4i.github.io/salesforce-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/salesforce-tutorial","zipURL":"https://github.com/ot4i/salesforce-tutorial/releases/download/v3.0/PI_SalesforceTutorial.zip","barFile":"<workspace>/TestModeBarFiles/Salesforce_Retrieveproject.TestMode.bar","visible":"true","tags":"Salesforce","isPattern":"false","isFavorite":"true","projects":"Salesforce_Retrieve:Salesforce_Schemas","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/Salesforce_Retrieve/Salesforce_Retrieve.msgflow"}],"deployedResources":[{"type":"application","path":"Salesforce_Retrieve"},{"type":"library","path":"Salesforce_Schemas"}]},{"name":"Using a Sequence node to inject a sequence number into a message","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Sequence node to inject sequence numbers into message data as it goes through a message flow.","detailsURL":"https://ot4i.github.io/sequence-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/sequence-tutorial","zipURL":"https://github.com/ot4i/sequence-tutorial/releases/download/v3.0/PI_SequenceTutorial.zip","barFile":"","visible":"true","tags":"sequence","isPattern":"false","isFavorite":"true","projects":"Sequence:CommaSeparatedValues","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/Sequence/Sequence.msgflow"}],"deployedResources":[{"type":"application","path":"Sequence"},{"type":"library","path":"CommaSeparatedValues"}]},{"name":"Using a Resequence node to reorder messages going through a flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Resequence node to control the sequence in which a group of incoming messages are propagated through the message flow.","detailsURL":"https://ot4i.github.io/resequence-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/resequence-tutorial","zipURL":"https://github.com/ot4i/resequence-tutorial/releases/download/v3.0/PI_ResequenceTutorial.zip","barFile":"","visible":"true","tags":"sequence","isPattern":"false","isFavorite":"true","projects":"Resequence:CommaSeparatedValues","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/Resequence/Resequence.msgflow"}],"deployedResources":[{"type":"application","path":"Resequence"},{"type":"library","path":"CommaSeparatedValues"}]},{"name":"Using a Timeout Notification node to automatically start a flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Timeout Notification node to automatically start a flow after a regular configurable time interval.","detailsURL":"https://ot4i.github.io/timeout-notification-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/timeout-notification-tutorial","zipURL":"https://github.com/ot4i/timeout-notification-tutorial/releases/download/v3.0/PI_TimeoutNotification.zip","barFile":"<workspace>/ExampleTimeoutNotification/TimeoutNotification.bar","visible":"true","tags":"timeout;transformation","isPattern":"false","isFavorite":"true","projects":"ExampleTimeoutNotification","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleTimeoutNotification/TimeoutNotification.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleTimeoutNotification"}]},{"name":"Using a Timeout Control node to start a flow after an interval","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Timeout Control node to control timed flow starts using propagations from a Timeout Notification node.","detailsURL":"https://ot4i.github.io/timeout-control-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/timeout-control-tutorial","zipURL":"https://github.com/ot4i/timeout-control-tutorial/releases/download/v3.0/PI_TimeoutControl.zip","barFile":"<workspace>/ExampleTimeoutControl/TimeoutControl.bar","visible":"true","tags":"timeout;transformation","isPattern":"false","isFavorite":"true","projects":"ExampleTimeoutControl","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleTimeoutControl/TimeoutControl.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleTimeoutControl"}]},{"name":"Using a Collector node to gather together messages in a flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Collector node to gather together two separate HTTP input messages which arrive in to a message flow at different times.","detailsURL":"https://ot4i.github.io/collector-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/collector-tutorial","zipURL":"https://github.com/ot4i/collector-tutorial/releases/download/v3.0/PI_Collector.zip","barFile":"<workspace>/ExampleCollector/Collector.bar","visible":"true","tags":"aggregation;transformation","isPattern":"false","isFavorite":"true","projects":"ExampleCollector","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleCollector/Collector.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleCollector"}]},{"name":"Using a Java User-Defined Node which reads a User-Defined Policy","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to deploy user-defined nodes using a provided example which reads values from a user-defined policy.","detailsURL":"https://ot4i.github.io/userdefinednode-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/userdefinednode-tutorial","zipURL":"https://github.com/ot4i/userdefinednode-tutorial/releases/download/v3.0/PI_UserDefinedNode.zip","barFile":"<workspace>/ExampleAppUsingUDN/AppUsingUDN.bar","visible":"true","tags":"java;policy;transformation","isPattern":"false","isFavorite":"true","projects":"ExampleAppUsingUDN:ExampleUserDefinedPolicyProject:PolicyQuery:PolicyQueryImpl","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleAppUsingUDN/ExampleFlowUsingUDN.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleAppUsingUDN"}]},{"name":"Using the KafkaProducer and KafkaConsumer nodes with a Kafka topic","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a KafkaProducer and KafkaConsumer node to produce and consume messages using a Kafka topic.","detailsURL":"https://ot4i.github.io/kafka-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/kafka-tutorial","zipURL":"https://github.com/ot4i/kafka-tutorial/releases/download/v3.0/PI_KafkaTutorial.zip","barFile":"","visible":"true","tags":"kafka","isPattern":"false","isFavorite":"true","projects":"KafkaProducerApplication:KafkaConsumerApplication","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/KafkaProducerApplication/KafkaProducerFlow.msgflow"}],"deployedResources":[{"type":"application","path":"KafkaProducerApplication"},{"type":"application","path":"KafkaConsumerApplication"}]},{"name":"Using the MQTTSubscribe node to receive MQTT messages from MQTT topics","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the MQTTSubscribe node to receive messages from an MQTT server.","barFile":"<workspace>/MQTTSubscribe/MQTTSubscribe.bar","visible":"true","tags":"MQTT;HTTP","isPattern":"false","isFavorite":"true","projects":"MQTTSubscribe","editorResPaths":[{"id":"MQTTSubscribe","editor":"flow","wspath":"<workspace>/MQTTSubscribe/MQTTSubscribe.msgflow"}],"deployedResources":[{"type":"application","path":"MQTTSubscribe"}],"id":"MQTTSubscribe","detailsURL":"https://ot4i.github.io/mqtt-subscribe-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/mqtt-subscribe-tutorial","zipURL":"https://github.com/ot4i/mqtt-subscribe-tutorial/releases/download/v3.0/PI_MQTTSubscribe.zip"},{"name":"Using the TCP/IP nodes to integrate with TCP/IP sockets","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use TCP/IP nodes for integration with external applications using TCPIP sockets.","detailsURL":"https://ot4i.github.io/tcpip-input-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/tcpip-input-tutorial","zipURL":"https://github.com/ot4i/tcpip-input-tutorial/releases/download/v3.0/PI_TCPIPTutorial.zip","barFile":"","visible":"true","tags":"tcp","isPattern":"false","isFavorite":"true","projects":"TCPIPServer:TCPIPClient:DataLibrary","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/TCPIPServer/TCPIPProvider.msgflow"}],"deployedResources":[]},{"name":"Using custom keywords with message flows","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to assign custom keywords to message flows and then once deployed, read the keywords using the Java Integration API","detailsURL":"https://ot4i.github.io/keywords-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/keywords-tutorial","zipURL":"https://github.com/ot4i/keywords-tutorial/releases/download/v3.0/PI_Keywords.zip","barFile":"","visible":"true","tags":"keywords","isPattern":"false","isFavorite":"true","projects":"ExampleKeywords:ExampleKeywordsJava","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/ExampleKeywords/Keywords.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleKeywords"}]},{"name":"Using HTTPS and certificates with the HTTPInput, HTTPReply and HTTPRequest nodes","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to create a Public Key Infrastructure using self-signed certificates in order to send data securely across HTTPS.","detailsURL":"https://ot4i.github.io/https-certificates-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/https-certificates-tutorial","zipURL":"https://github.com/ot4i/https-certificates-tutorial/releases/download/v3.0/PI_HTTPSCertificates.zip","barFile":"","visible":"true","tags":"HTTP","isPattern":"false","isFavorite":"true","projects":"ExampleClient:ExampleServer","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/ExampleClient/ExampleClient.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleClient"},{"type":"application","path":"ExampleServer"}]},{"name":"Using MQ and HTTP to link message flows in a coordinated request-reply scenario","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use an MQ queue to store messages which link together HTTP request and reply flows with a back end application.","detailsURL":"https://ot4i.github.io/coordinated-reqreply-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/coordinated-reqreply-tutorial","zipURL":"https://github.com/ot4i/coordinated-reqreply-tutorial/releases/download/v3.0/PI_CoordinatedRequestReply.zip","barFile":"","visible":"true","tags":"HTTP;MQ","isPattern":"false","isFavorite":"true","projects":"CoordinatedRequestReplyTutorial","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/CoordinatedRequestReplyTutorial/RequestFlow.msgflow"}],"deployedResources":[{"type":"application","path":"CoordinatedRequestReplyTutorial"}]},{"name":"Using Callable Flows to split synchronous flow processing","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to split synchronous flow processing using CallableFlow nodes.","detailsURL":"http://ot4i.github.io/callable-flows-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/callable-flows-tutorial","zipURL":"https://github.com/ot4i/callable-flows-tutorial/releases/download/v3.0/PI_CallableFlows.zip","barFile":"<workspace>/CallableFlowBARFiles/callable_flows.bar","visible":"true","tags":"callableflows;map","isPattern":"false","isFavorite":"true","projects":"CallableFlowBARFiles:CallableTimestamp:CallableTimestampAlternate:CallingParentApplication","editorResPaths":[{"id":"TimestampMyJSON","editor":"flow","wspath":"<workspace>/CallingParentApplication/TimestampMyJSON.msgflow"}],"deployedResources":[{"type":"application","path":"CallingParentApplication"},{"type":"application","path":"CallableTimestamp"},{"type":"application","path":"CallableTimestampAlternate"}]},{"name":"Call a REST API using the RESTRequest node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a RESTRequest node to call a REST API","detailsURL":"https://ot4i.github.io/restrequest-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/restrequest-tutorial","zipURL":"https://github.com/ot4i/restrequest-tutorial/releases/download/v3.0/PI_RESTRequest.zip","barFile":"","visible":"true","tags":"REST","isPattern":"false","isFavorite":"true","projects":"RESTRequest_Client:RESTRequest_API:RESTRequest_SharedLibrary","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/RESTRequest_Client/RESTRequest_Client.msgflow"}],"deployedResources":[{"type":"application","path":"RESTRequest_Client"},{"type":"application","path":"RESTRequest_API"},{"type":"library","path":"RESTRequest_SharedLibrary"}]},{"name":"Call a REST API using the RESTAsyncRequest node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a RESTAsyncRequest node to call a REST API and a RESTAsyncResponse node to receive the response","detailsURL":"https://ot4i.github.io/restrequest-async-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/restrequest-async-tutorial","zipURL":"https://github.com/ot4i/restrequest-async-tutorial/releases/download/v3.0/PI_RESTAsyncRequest.zip","barFile":"","visible":"true","tags":"REST","isPattern":"false","isFavorite":"true","projects":"RESTAsyncRequest_Client:RESTAsyncRequest_API:RESTAsyncRequest_SharedLibrary","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/RESTAsyncRequest_Client/RESTAsyncRequest.msgflow"}],"deployedResources":[{"type":"application","path":"RESTAsyncRequest_Client"},{"type":"application","path":"RESTAsyncRequest_API"},{"type":"library","path":"RESTAsyncRequest_SharedLibrary"}]},{"name":"Aggregation nodes using MQ nodes with back-end services","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using MQ nodes.","detailsURL":"https://ot4i.github.io/aggregation-mq-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/aggregation-mq-tutorial","zipURL":"https://github.com/ot4i/aggregation-mq-tutorial/releases/download/v3.0/PI_AggregationMQ.zip","barFile":"","visible":"true","tags":"aggregation","isPattern":"false","isFavorite":"true","projects":"AggregationMQ:AggregationMQBackend1:AggregationMQBackend2","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/AggregationMQ/AggregationMQ_FanOut.msgflow"}],"deployedResources":[{"type":"application","path":"AggregationMQ"},{"type":"application","path":"AggregationMQBackend1"},{"type":"application","path":"AggregationMQBackend2"}]},{"name":"Aggregation nodes using HTTPAsyncRequest nodes with back-end services","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous HTTP nodes.","detailsURL":"https://ot4i.github.io/aggregation-httpasync-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/aggregation-httpasync-tutorial","zipURL":"https://github.com/ot4i/aggregation-httpasync-tutorial/releases/download/v3.0/PI_AggregationHTTPAsync.zip","barFile":"","visible":"true","tags":"aggregation","isPattern":"false","isFavorite":"true","projects":"AggregationHTTPAsync:AggregationHTTPBackend1:AggregationHTTPBackend2","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/AggregationHTTPAsync/AggregationHTTPAsync.msgflow"}],"deployedResources":[{"type":"application","path":"AggregationHTTPAsync"},{"type":"application","path":"AggregationHTTPBackend1"},{"type":"application","path":"AggregationHTTPBackend2"},{"type":"library","path":"AggregationHTTPAsyncLib"}]},{"name":"Aggregation nodes using RESTAsyncRequest nodes with back-end services","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous REST nodes.","detailsURL":"https://ot4i.github.io/aggregation-restasync-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/aggregation-restasync-tutorial","zipURL":"https://github.com/ot4i/aggregation-restasync-tutorial/releases/download/v3.0/PI_AggregationRESTAsync.zip","barFile":"","visible":"true","tags":"aggregation","isPattern":"false","isFavorite":"true","projects":"AggregationRESTAsync:AggregationRESTBackend1:AggregationRESTBackend2","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/AggregationRESTAsync/getAggregatedResponse.subflow"}],"deployedResources":[{"type":"application","path":"AggregationRESTAsync"},{"type":"application","path":"AggregationRESTBackend1"},{"type":"application","path":"AggregationRESTBackend2"}]},{"name":"Aggregation nodes using SOAPAsyncRequest nodes with back-end services","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous SOAP nodes.","detailsURL":"https://ot4i.github.io/aggregation-soapasync-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/aggregation-soapasync-tutorial","zipURL":"https://github.com/ot4i/aggregation-soapasync-tutorial/releases/download/v3.0/PI_AggregationSOAPAsync.zip","barFile":"","visible":"true","tags":"aggregation","isPattern":"false","isFavorite":"true","projects":"AggregationSOAPAsync:AggregationSOAPBackend1:AggregationSOAPBackend2","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/AggregationSOAPAsync/gen/getAggregatedResponseOperation_Request_Response.subflow"}],"deployedResources":[]},{"name":"Aggregation nodes using CallableFlowAsyncInvoke nodes with back-end services","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous Callable Flow nodes.","detailsURL":"https://ot4i.github.io/aggregation-callableasync-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/aggregation-callableasync-tutorial","zipURL":"https://github.com/ot4i/aggregation-callableasync-tutorial/releases/download/v3.0/PI_AggregationCallableAsync.zip","barFile":"","visible":"true","tags":"aggregation","isPattern":"false","isFavorite":"true","projects":"AggregationCallableAsync:AggregationCallableAsyncBackend1:AggregationCallableAsyncBackend2","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/AggregationCallableAsync/getAggregatedResponse.subflow"}],"deployedResources":[{"type":"application","path":"AggregationCallableAsync"},{"type":"application","path":"AggregationCallableAsyncBackend1"},{"type":"application","path":"AggregationCallableAsyncBackend2"}]},{"name":"Transformation using a Map in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Mapping node to transform data.","detailsURL":"https://ot4i.github.io/transformation-map-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/transformation-map-tutorial","zipURL":"https://github.com/ot4i/transformation-map-tutorial/releases/download/v3.0/PI_TransformMAP.zip","barFile":"<workspace>/Transformation_Map/Transformation_Map.bar","visible":"true","tags":"transformation;map","isPattern":"false","isFavorite":"true","projects":"Transformation_Map","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Transformation_Map/Transformation_Map.msgflow"}],"deployedResources":[{"type":"application","path":"Transformation_Map"}]},{"name":"Transformation using ESQL in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Compute node to transform data using ESQL.","detailsURL":"https://ot4i.github.io/transformation-esql-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/transformation-esql-tutorial","zipURL":"https://github.com/ot4i/transformation-esql-tutorial/releases/download/v3.0/PI_TransformESQL.zip","barFile":"<workspace>/Transformation_ESQL/Transformation_ESQL.bar","visible":"true","tags":"transformation;esql","isPattern":"false","isFavorite":"true","projects":"Transformation_ESQL","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Transformation_ESQL/Transformation_ESQL.msgflow"}],"deployedResources":[{"type":"application","path":"Transformation_ESQL"}]},{"name":"Transformation using Java in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a JavaCompute node to transform data using Java.","detailsURL":"https://ot4i.github.io/transformation-java-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/transformation-java-tutorial","zipURL":"https://github.com/ot4i/transformation-java-tutorial/releases/download/v3.0/PI_TransformJava.zip","barFile":"<workspace>/Transformation_Java/Transformation_Java.bar","visible":"true","tags":"transformation;java","isPattern":"false","isFavorite":"true","projects":"Transformation_Java:Transformation_JavaJava","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Transformation_Java/Transformation_Java.msgflow"}],"deployedResources":[{"type":"application","path":"Transformation_Java"}]},{"name":"Transformation using Java (JAXB) in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a JavaCompute node to transform data using Java (JAXB).","detailsURL":"https://ot4i.github.io/transformation-javaJAXB-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/transformation-javaJAXB-tutorial","zipURL":"https://github.com/ot4i/transformation-javaJAXB-tutorial/releases/download/v3.0/PI_TransformJAXB.zip","barFile":"<workspace>/Transformation_JavaJAXB/Transformation_JavaJAXB.bar","visible":"true","tags":"transformation;java","isPattern":"false","isFavorite":"true","projects":"Transformation_JavaJAXB:Transformation_JavaJAXBJava","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Transformation_JavaJAXB/Transformation_JavaJAXB.msgflow"}],"deployedResources":[{"type":"application","path":"Transformation_JavaJAXB"}]},{"name":"Transformation using XSL in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use an XSL Transform node to transform data using XSL.","detailsURL":"https://ot4i.github.io/transformation-XSL-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/transformation-XSL-tutorial","zipURL":"https://github.com/ot4i/transformation-XSL-tutorial/releases/download/v3.0/PI_TransformXSL.zip","barFile":"<workspace>/Transformation_XSL/Transformation_XSL.bar","visible":"true","tags":"transformation;XSL","isPattern":"false","isFavorite":"true","projects":"Transformation_XSL","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Transformation_XSL/Transformation_XSL.msgflow"}],"deployedResources":[{"type":"application","path":"Transformation_XSL"}]},{"name":"Transformation using .NET in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a .NETCompute node to transform data using C#. (Windows platforms only)","detailsURL":"https://ot4i.github.io/transformation-dotnet-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/transformation-dotnet-tutorial","zipURL":"https://github.com/ot4i/transformation-dotnet-tutorial/releases/download/v3.0/PI_TransformDOTNET.zip","barFile":"<workspace>/Transformation_DotNet/Transformation_DotNet.bar","visible":"true","tags":"transformation;.NET","isPattern":"false","isFavorite":"true","projects":"Transformation_DotNet:Transformation_DotNet_DotNET","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Transformation_DotNet/Transformation_DotNet.msgflow"}],"deployedResources":[{"type":"application","path":"Transformation_DotNet"}]},{"name":"Transformation using the auto map feature","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Mapping node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/automap-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/automap-tutorial","zipURL":"https://github.com/ot4i/automap-tutorial/releases/download/v3.0/PI_AutoMapping.zip","barFile":"","visible":"true","tags":"transformation;map","isPattern":"false","isFavorite":"true","projects":"AutoMappingExample","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/AutoMappingExample/AutoMappingExample1.msgflow"}],"deployedResources":[{"type":"application","path":"AutoMappingExample"}]},{"name":"Routing - Using a Route node to route data in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Route node to route messages in a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/routing-route-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/routing-route-tutorial","zipURL":"https://github.com/ot4i/routing-route-tutorial/releases/download/v3.0/PI_RoutingRoute.zip","barFile":"<workspace>/ExampleRoutingRoute/RoutingRoute.bar","visible":"true","tags":"routing","isPattern":"false","isFavorite":"true","projects":"ExampleRoutingRoute","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleRoutingRoute/RoutingRoute.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleRoutingRoute"}]},{"name":"Routing - Using a RouteToLabel node to route data in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the RouteToLabel node to route messages in a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/routing-routetolabel-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/routing-routetolabel-tutorial","zipURL":"https://github.com/ot4i/routing-routetolabel-tutorial/releases/download/v3.0/PI_RoutingRouteToLabel.zip","barFile":"<workspace>/ExampleRoutingRouteToLabel/RoutingRouteToLabel.bar","visible":"true","tags":"routing","isPattern":"false","isFavorite":"true","projects":"ExampleRoutingRouteToLabel","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleRoutingRouteToLabel/RoutingRouteToLabel.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleRoutingRouteToLabel"}]},{"name":"Routing - Using a Filter node to route data in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Filter node to route messages in a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/routing-filter-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/routing-filter-tutorial","zipURL":"https://github.com/ot4i/routing-filter-tutorial/releases/download/v3.0/PI_RoutingFilter.zip","barFile":"<workspace>/ExampleRoutingFilter/RoutingFilter.bar","visible":"true","tags":"routing","isPattern":"false","isFavorite":"true","projects":"ExampleRoutingFilter","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleRoutingFilter/RoutingFilter.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleRoutingFilter"}]},{"name":"Routing - Using a Compute node to route data in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Compute node to route messages in a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/routing-compute-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/routing-compute-tutorial","zipURL":"https://github.com/ot4i/routing-compute-tutorial/releases/download/v3.0/PI_RoutingCompute.zip","barFile":"<workspace>/ExampleRoutingCompute/RoutingCompute.bar","visible":"true","tags":"routing","isPattern":"false","isFavorite":"true","projects":"ExampleRoutingCompute","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleRoutingCompute/RoutingCompute.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleRoutingCompute"}]},{"name":"Routing - Using a JavaCompute node to route data in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the JavaCompute node to route messages in a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/routing-jcn-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/routing-jcn-tutorial","zipURL":"https://github.com/ot4i/routing-jcn-tutorial/releases/download/v3.0/PI_RoutingJCN.zip","barFile":"<workspace>/ExampleRoutingJCN/RoutingJCN.bar","visible":"true","tags":"routing","isPattern":"false","isFavorite":"true","projects":"ExampleRoutingJCN","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleRoutingJCN/RoutingJCN.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleRoutingJCN"}]},{"name":"Databases - Using a DatabaseRetrieve node to retrieve data from DB2 via JDBC","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the DatabaseRetrieve node to retrieve data from DB2 using a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/db-databaseretrieve-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/db-databaseretrieve-tutorial","zipURL":"https://github.com/ot4i/db-databaseretrieve-tutorial/releases/download/v3.0/PI_DatabaseRetrieve.zip","barFile":"<workspace>/ExampleDatabaseRetrieve/DatabaseRetrieve.bar","visible":"true","tags":"database","isPattern":"false","isFavorite":"true","projects":"ExampleDatabaseRetrieve","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleDatabaseRetrieve/DatabaseRetrieveFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleDatabaseRetrieve"}]},{"name":"Databases - Using a DatabaseRoute node to route messages based on data from DB2 via JDBC","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the DatabaseRoute node to route messages based on data from DB2 using a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/db-databaseroute-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/db-databaseroute-tutorial","zipURL":"https://github.com/ot4i/db-databaseroute-tutorial/releases/download/v3.0/PI_DatabaseRoute.zip","barFile":"<workspace>/ExampleDatabaseRoute/DatabaseRoute.bar","visible":"true","tags":"database","isPattern":"false","isFavorite":"true","projects":"ExampleDatabaseRoute","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleDatabaseRoute/DatabaseRouteFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleDatabaseRoute"}]},{"name":"Databases - Using a Mapping node to insert data into a DB2 database via JDBC","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Mapping node to insert data into DB2 using a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/db-databasemapping-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/db-databasemapping-tutorial","zipURL":"https://github.com/ot4i/db-databasemapping-tutorial/releases/download/v3.0/PI_DatabaseMapping.zip","barFile":"<workspace>/ExampleDatabaseMapping/DatabaseMapping.bar","visible":"true","tags":"database;map","isPattern":"false","isFavorite":"true","projects":"ExampleDatabaseMapping","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleDatabaseMapping/DatabaseMapping.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleDatabaseMapping"}]},{"name":"Databases - Using a JavaCompute node to insert data into a DB2 database via JDBC","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the JavaCompute node to insert data into DB2 using a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/db-databasejcn-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/db-databasejcn-tutorial","zipURL":"https://github.com/ot4i/db-databasejcn-tutorial/releases/download/v3.0/PI_DatabaseJCN.zip","barFile":"<workspace>/ExampleDatabaseJCN/DatabaseJCN.bar","visible":"true","tags":"database;java","isPattern":"false","isFavorite":"true","projects":"ExampleDatabaseJCN","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleDatabaseJCN/DatabaseJCN.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleDatabaseJCN"}]},{"name":"Databases - Using a Compute node to insert data into a DB2 database via ODBC","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use Compute node ESQL to insert data into DB2 using a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/db-databasecompute-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/db-databasecompute-tutorial","zipURL":"https://github.com/ot4i/db-databasecompute-tutorial/releases/download/v3.0/PI_DatabaseCompute.zip","barFile":"<workspace>/ExampleDatabaseCompute/DatabaseCompute.bar","visible":"true","tags":"database;esql","isPattern":"false","isFavorite":"true","projects":"ExampleDatabaseCompute","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleDatabaseCompute/DatabaseCompute.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleDatabaseCompute"}]},{"name":"Databases - Using a Database node to insert data into a DB2 database via ODBC","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use Database node ESQL to insert data into DB2 using a message flow driven by a JSON message over HTTP.","detailsURL":"https://ot4i.github.io/db-database-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/db-database-tutorial","zipURL":"https://github.com/ot4i/db-database-tutorial/releases/download/v3.0/PI_Database.zip","barFile":"<workspace>/ExampleDatabase/Database.bar","visible":"true","tags":"database;esql","isPattern":"false","isFavorite":"true","projects":"ExampleDatabase","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleDatabase/Database.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleDatabase"}]},{"name":"Databases - Using a DatabaseInput node to trigger a flow on insert into DB2 via ODBC","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a DatabaseInput node to trigger a flow when data is inserted into DB2.","detailsURL":"https://ot4i.github.io/db-databaseinput-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/db-databaseinput-tutorial","zipURL":"https://github.com/ot4i/db-databaseinput-tutorial/releases/download/v3.0/PI_DatabaseInput.zip","barFile":"<workspace>/ExampleDatabaseInput/DatabaseInput.bar","visible":"true","tags":"database;esql","isPattern":"false","isFavorite":"true","projects":"ExampleDatabaseInput","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleDatabaseInput/DatabaseInput.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleDatabaseInput"}]},{"name":"MQ - Using the MQInput, MQGet and MQOutput nodes with messages and queues","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the MQInput, MQGet and MQOutput nodes to interact with queues defined on a local queue manager.","detailsURL":"https://ot4i.github.io/mq-outputinputget-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/mq-outputinputget-tutorial","zipURL":"https://github.com/ot4i/mq-outputinputget-tutorial/releases/download/v3.0/PI_ExampleMQ.zip","barFile":"<workspace>/ExampleMQ/ExampleMQ.bar","visible":"true","tags":"MQ","isPattern":"false","isFavorite":"true","projects":"ExampleMQ","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleMQ/MQOutput.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleMQ"}]},{"name":"MQ - Using the LocalEnvironment and MQEndpoint Policy to override MQOutput configuration","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the LocalEnvironment tree to dynamically configure the output queue written to by the MQOutput node and how to use an MQEndpoint Policy to override its queue manager connection.","detailsURL":"https://ot4i.github.io/mq-outputoverrides-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/mq-outputoverrides-tutorial","zipURL":"https://github.com/ot4i/mq-outputoverrides-tutorial/releases/download/v3.0/PI_ExampleMQOutput.zip","barFile":"<workspace>/ExampleMQOutput/MQOutputDeploy1.bar","visible":"true","tags":"MQ","isPattern":"false","isFavorite":"true","projects":"ExampleMQOutput","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleMQOutput/MQOutput.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleMQOutput"}]},{"name":"MQ - Using the Publication node to publish messages on a topic","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Publication node to publish messages on an MQ topic defined on a local queue manager.","detailsURL":"https://ot4i.github.io/mq-publication-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/mq-publication-tutorial","zipURL":"https://github.com/ot4i/mq-publication-tutorial/releases/download/v3.0/PI_Publication.zip","barFile":"<workspace>/ExamplePublication/PublishSubscribe.bar","visible":"true","tags":"MQ","isPattern":"false","isFavorite":"true","projects":"ExamplePublication","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExamplePublication/Publication.msgflow"}],"deployedResources":[{"type":"application","path":"ExamplePublication"}]},{"name":"JMS - Using the JMSOutput and JMSInput nodes with messages and queues","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the JMSOutput and JMSInput nodes to interact with queues defined on an IBM MQ queue manager.","detailsURL":"https://ot4i.github.io/jms-outputinput-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jms-outputinput-tutorial","zipURL":"https://github.com/ot4i/jms-outputinput-tutorial/releases/download/v3.0/PI_JMSOutputInput.zip","barFile":"<workspace>/ExampleJMSOutput/JMSOutput.bar","visible":"true","tags":"JMS","isPattern":"false","isFavorite":"true","projects":"ExampleJMSOutput:ExampleJMSInput","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleJMSOutput/JMSOutput.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleJMSOutput"}]},{"name":"JMS - Using the JMSOutput and JMSReceive nodes with messages and queues","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the JMSOutput and JMSReceive nodes to interact with queues defined on an IBM MQ queue manager.","detailsURL":"https://ot4i.github.io/jms-outputreceive-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jms-outputreceive-tutorial","zipURL":"https://github.com/ot4i/jms-outputreceive-tutorial/releases/download/v3.0/PI_JMSOutputReceive.zip","barFile":"<workspace>/ExampleJMSReceive/JMSReceive.bar","visible":"true","tags":"JMS","isPattern":"false","isFavorite":"true","projects":"ExampleJMSOutput:ExampleJMSReceive","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleJMSOutput/JMSOutput.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleJMSOutput"}]},{"name":"File - Using the FileExists node to selectively invoke the FileRead node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the FileExists node to trigger a message flow (requires v12.0.4.0 or higher)","detailsURL":"https://ot4i.github.io/file-exists-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/file-exists-tutorial","zipURL":"https://github.com/ot4i/file-exists-tutorial/releases/download/v3.0/PI_FileExists.zip","barFile":"<workspace>/ApplicationFileExists/FileExists.bar","visible":"true","tags":"file","isPattern":"false","isFavorite":"true","projects":"ApplicationFileExists","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ApplicationFileExists/FlowFileExists.msgflow"}],"deployedResources":[{"type":"application","path":"ApplicationFileExists"}]},{"name":"File - Using the FileExists node and the FileIterator node together in a message flow","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the FileIterator node to iterate over file listings generated by the FileExists node (requires v12.0.6.0 or higher)","detailsURL":"https://ot4i.github.io/file-iterator-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/file-iterator-tutorial","zipURL":"https://github.com/ot4i/file-iterator-tutorial/releases/download/v3.0/PI_FileIterator.zip","barFile":"<workspace>/ExampleFileIterator/ExampleFileIterator.bar","visible":"true","tags":"file","isPattern":"false","isFavorite":"true","projects":"ExampleFileIterator","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleFileIterator/ExampleFileIteratorFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleFileIterator"}]},{"name":"File - Using the FileInput node with Whole File record detection","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the FileInput node to parse the whole content of a file.","detailsURL":"https://ot4i.github.io/file-inputwholefile-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/file-inputwholefile-tutorial","zipURL":"https://github.com/ot4i/file-inputwholefile-tutorial/releases/download/v3.0/PI_FileInputWholeFile.zip","barFile":"<workspace>/ExampleFileInputWholeFile/FileInputWholeFile.bar","visible":"true","tags":"file","isPattern":"false","isFavorite":"true","projects":"ExampleFileInputWholeFile:FileCSV","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleFileInputWholeFile/FileInputWholeFile.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleFileInputWholeFile"},{"type":"library","path":"FileCSV"}]},{"name":"File - Using the FileInput node with Fixed Length record detection","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the FileInput node to parse fixed length records from a file.","detailsURL":"https://ot4i.github.io/file-inputfixedlength-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/file-inputfixedlength-tutorial","zipURL":"https://github.com/ot4i/file-inputfixedlength-tutorial/releases/download/v3.0/PI_FileInputFixedLength.zip","barFile":"<workspace>/ExampleFileInputFixedLength/FileInputFixedLength.bar","visible":"true","tags":"file","isPattern":"false","isFavorite":"true","projects":"ExampleFileInputFixedLength","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleFileInputFixedLength/FileInputFixedLength.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleFileInputFixedLength"}]},{"name":"File - Using the FileInput node with Delimited record detection","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the FileInput node to parse delimited records from a file.","detailsURL":"https://ot4i.github.io/file-inputdelimited-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/file-inputdelimited-tutorial","zipURL":"https://github.com/ot4i/file-inputdelimited-tutorial/releases/download/v3.0/PI_FileInputDelimited.zip","barFile":"<workspace>/ExampleFileInputDelimited/FileInputDelimited.bar","visible":"true","tags":"file","isPattern":"false","isFavorite":"true","projects":"ExampleFileInputDelimited","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleFileInputDelimited/FileInputDelimited.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleFileInputDelimited"}]},{"name":"File - Using the FileInput node with Parsed Record Sequence record detection","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the FileInput node to parse records from a file using a message model.","detailsURL":"https://ot4i.github.io/file-inputparsedrecordsequence-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/file-inputparsedrecordsequence-tutorial","zipURL":"https://github.com/ot4i/file-inputparsedrecordsequence-tutorial/releases/download/v3.0/PI_FileInputParsedRecordSequence.zip","barFile":"<workspace>/ExampleFileInputParsedRecordSequence/FileInputParsedRecordSequence.bar","visible":"true","tags":"file","isPattern":"false","isFavorite":"true","projects":"ExampleFileInputParsedRecordSequence","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleFileInputParsedRecordSequence/FileInputParsedRecordSequence.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleFileInputParsedRecordSequence"}]},{"name":"Integration services (SOAP/HTTP inputs)","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn about integration services that use SOAP/HTTP inputs.","detailsURL":"https://ot4i.github.io/integration-services-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/integration-services-tutorial","zipURL":"https://github.com/ot4i/integration-services-tutorial/releases/download/v3.0/PI_IntegrationServices.zip","barFile":"<workspace>/TemperatureConverter/TemperatureConverter.bar","visible":"true","tags":"service;HTTP;SOAP;transformation","isPattern":"false","isFavorite":"true","projects":"TemperatureConverter:BARfiles","editorResPaths":[{"id":"MainService","editor":"service","wspath":"<workspace>/TemperatureConverter/service.descriptor"}],"deployedResources":[{"type":"service","path":"TemperatureConverter"}]},{"name":"Modeling CSV data by using DFDL","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to model CSV data using Data Format Description Language (DFDL).","detailsURL":"https://ot4i.github.io/dfdl-csv-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/dfdl-csv-tutorial","zipURL":"https://github.com/ot4i/dfdl-csv-tutorial/releases/download/v3.0/PI_DFDL_CSV.zip","barFile":"","visible":"true","tags":"dfdl;csv","isPattern":"false","isFavorite":"true","projects":"CommaSeparatedValues","editorResPaths":[{"id":"MainDataFile","editor":"text","wspath":"<workspace>/CommaSeparatedValues/simpleCSV.txt"}],"deployedResources":[]},{"name":"Modeling COBOL data by using DFDL","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to model COBOL data by using Data Format Description Language (DFDL).","detailsURL":"https://ot4i.github.io/dfdl-cobol-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/dfdl-cobol-tutorial","zipURL":"https://github.com/ot4i/dfdl-cobol-tutorial/releases/download/v3.0/PI_DFDL_COBOL.zip","barFile":"","visible":"true","tags":"dfdl;cobol","isPattern":"false","isFavorite":"true","projects":"COBOL-Purchases","editorResPaths":[{"id":"MainCopybook","editor":"text","wspath":"<workspace>/COBOL-Purchases/PurchaseData.cpy"}],"deployedResources":[]},{"name":"Modeling EDIFACT data by using DFDL","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to model EDIFACT data by using Data Format Description Language (DFDL).","detailsURL":"https://ot4i.github.io/dfdl-edifact-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/dfdl-edifact-tutorial","zipURL":"https://github.com/ot4i/dfdl-edifact-tutorial/releases/download/v3.0/PI_DFDL_EDIFACT.zip","barFile":"","visible":"true","tags":"dfdl;edifact","isPattern":"false","isFavorite":"true","projects":"EDIFACT-D03B:EDIFACT-Common","editorResPaths":[{"id":"MainSchema","editor":"dfdl","wspath":"<workspace>/EDIFACT-D03B/EDIFACT-SupplyChain-Messages-D.03B.xsd"}],"deployedResources":[]},{"name":"Modeling HL7 data by using DFDL","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to model HL7 healthcare data using Data Format Description Language (DFDL).","detailsURL":"https://ot4i.github.io/dfdl-hl7-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/dfdl-hl7-tutorial","zipURL":"https://github.com/ot4i/dfdl-hl7-tutorial/releases/download/v3.0/PI_DFDL_HL7.zip","barFile":"","visible":"true","tags":"dfdl;hl7","isPattern":"false","isFavorite":"true","projects":"HL7-2.7","editorResPaths":[{"id":"MainSchema","editor":"dfdl","wspath":"<workspace>/HL7-2.7/GenericHL7.xsd"}],"deployedResources":[]},{"name":"Modeling Toshiba 4690 TLog data by using DFDL","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to model Toshiba 4690 Point of Sale Transaction Log data by using Data Format Description Language (DFDL).","detailsURL":"https://ot4i.github.io/dfdl-tlog-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/dfdl-tlog-tutorial","zipURL":"https://github.com/ot4i/dfdl-tlog-tutorial/releases/download/v3.0/PI_DFDL_TLOG.zip","barFile":"","visible":"true","tags":"dfdl;tlog;4690","isPattern":"false","isFavorite":"true","projects":"TLOG-ACE","editorResPaths":[{"id":"MainSchema","editor":"dfdl","wspath":"<workspace>/TLOG-ACE/TlogAce.xsd"}],"deployedResources":[]},{"name":"Modeling ISO 8583 data by using DFDL","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to model ISO 8583 data by using Data Format Description Language (DFDL).X","detailsURL":"https://ot4i.github.io/dfdl-iso8583-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/dfdl-iso8583-tutorial","zipURL":"https://github.com/ot4i/dfdl-iso8583-tutorial/releases/download/v3.0/PI_DFDL_ISO8583.zip","barFile":"","visible":"true","tags":"dfdl;iso8583","isPattern":"false","isFavorite":"true","projects":"ISO8583","editorResPaths":[{"id":"MainSchema","editor":"dfdl","wspath":"<workspace>/ISO8583/1987/ISO8583_1987.xsd"}],"deployedResources":[]},{"name":"JSON - Using a Compute node to create a JSON Object message","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Compute node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/jsonobject-compute-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jsonobject-compute-tutorial","zipURL":"https://github.com/ot4i/jsonobject-compute-tutorial/releases/download/v3.0/PI_jsonobjectcompute.zip","barFile":"","visible":"true","tags":"JSON;esql","isPattern":"false","isFavorite":"true","projects":"Example_JSONObject_ESQL","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Example_JSONObject_ESQL/Example_JSONObject_ESQL.msgflow"}],"deployedResources":[{"type":"application","path":"Example_JSONObject_ESQL"}]},{"name":"JSON - Using a Compute node to create a JSON Array message","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Compute node to create a new JSON Array message in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/jsonarray-compute-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jsonarray-compute-tutorial","zipURL":"https://github.com/ot4i/jsonarray-compute-tutorial/releases/download/v3.0/PI_jsonarraycompute.zip","barFile":"","visible":"true","tags":"JSON;esql","isPattern":"false","isFavorite":"true","projects":"Example_JSONArray_ESQL","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Example_JSONArray_ESQL/Example_JSONArray_ESQL.msgflow"}],"deployedResources":[{"type":"application","path":"Example_JSONArray_ESQL"}]},{"name":"JSON - Using a Mapping node to create a JSON Object message","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Mapping node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/jsonobject-mapping-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jsonobject-mapping-tutorial","zipURL":"https://github.com/ot4i/jsonobject-mapping-tutorial/releases/download/v3.0/PI_jsonobjectmapping.zip","barFile":"","visible":"true","tags":"JSON;map","isPattern":"false","isFavorite":"true","projects":"Example_JSONObject_Mapping","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Example_JSONObject_Mapping/Example_JSONObject_Mapping.msgflow"}],"deployedResources":[{"type":"application","path":"Example_JSONObject_Mapping"}]},{"name":"JSON - Using a Mapping node to create a JSON Array message","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a Mapping node to create a new JSON Array message in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/jsonarray-mapping-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jsonarray-mapping-tutorial","zipURL":"https://github.com/ot4i/jsonarray-mapping-tutorial/releases/download/v3.0/PI_jsonarraymapping.zip","barFile":"","visible":"true","tags":"JSON;map","isPattern":"false","isFavorite":"true","projects":"Example_JSONArray_Mapping","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Example_JSONArray_Mapping/Example_JSONArray_Mapping.msgflow"}],"deployedResources":[{"type":"application","path":"Example_JSONArray_Mapping"}]},{"name":"JSON - Using a JavaCompute node to create a JSON Object message","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a JavaCompute node to create a new JSON Object message in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/jsonobject-jcn-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jsonobject-jcn-tutorial","zipURL":"https://github.com/ot4i/jsonobject-jcn-tutorial/releases/download/v3.0/PI_jsonobjectjcn.zip","barFile":"","visible":"true","tags":"JSON;java","isPattern":"false","isFavorite":"true","projects":"Example_JSONObject_Java","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Example_JSONObject_Java/Example_JSONObject_Java.msgflow"}],"deployedResources":[{"type":"application","path":"Example_JSONObject_Java"}]},{"name":"JSON - Using a JavaCompute node to create a JSON Array message","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use a JavaCompute node to create a new JSON Array message in a message flow driven by an XML message over HTTP.","detailsURL":"https://ot4i.github.io/jsonarray-jcn-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/jsonarray-jcn-tutorial","zipURL":"https://github.com/ot4i/jsonarray-jcn-tutorial/releases/download/v3.0/PI_jsonarrayjcn.zip","barFile":"","visible":"true","tags":"JSON;java","isPattern":"false","isFavorite":"true","projects":"Example_JSONArray_Java","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Example_JSONArray_Java/Example_JSONArray_Java.msgflow"}],"deployedResources":[{"type":"application","path":"Example_JSONArray_Java"}]},{"name":"Unit Testing - Generating test data and unit tests from the runtime","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to record messages passing through the runtime, and use them to automate the generation of large volumes of unit tests.","detailsURL":"https://ot4i.github.io/unit-test-record-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/unit-test-record-tutorial","zipURL":"https://github.com/ot4i/unit-test-record-tutorial/releases/download/v3.0/PI_UnitTestRecord.zip","barFile":"","visible":"true","tags":"test","isPattern":"false","isFavorite":"true","projects":"ExampleRouterApp","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleRouterApp/ExampleRouterFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleRouterApp"}]},{"name":"Unit Testing - Creating a Message Assembly file for use with Test Driven Development","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Message Assembly Editor for viewing, creating and updating Message Assembly (.mxml) files for use with Test Driven Development.","detailsURL":"https://ot4i.github.io/unit-test-messageassembly-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/unit-test-messageassembly-tutorial","zipURL":"https://github.com/ot4i/unit-test-messageassembly-tutorial/releases/download/v3.0/PI_UnitTestTDD.zip","barFile":"","visible":"true","tags":"test","isPattern":"false","isFavorite":"true","projects":"ExampleTestDrivenDevelopment","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleTestDrivenDevelopment/PurchaseFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleTestDrivenDevelopment"}]},{"name":"Unit Testing - Building and executing unit tests outside the Toolkit","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to build and execute IBM App Connect Enterprise unit tests outside the Toolkit development environment.","detailsURL":"https://ot4i.github.io/unit-test-gradle-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/unit-test-gradle-tutorial","zipURL":"https://github.com/ot4i/unit-test-gradle-tutorial/releases/download/v3.0/PI_UnitTestGradleOutsideToolkit.zip","barFile":"","visible":"true","tags":"test","isPattern":"false","isFavorite":"true","projects":"MyApplicationToBeTested","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/MyApplicationToBeTested/MyMessageFlowToBeTested.msgflow"}],"deployedResources":[{"type":"application","path":"MyApplicationToBeTested"}]},{"name":"Unit Testing - Testing multiple message flow nodes using propagate and evaluate","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how unit tests can be used for testing a sequence of multiple message flow nodes.","detailsURL":"https://ot4i.github.io/unit-test-multiple-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/unit-test-multiple-tutorial","zipURL":"https://github.com/ot4i/unit-test-multiple-tutorial/releases/download/v3.0/PI_UnitTestMultipleNodes.zip","barFile":"","visible":"true","tags":"test","isPattern":"false","isFavorite":"true","projects":"MySimpleApplication","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/MySimpleApplication/MyMessageFlowWithTwoComputeNodes.msgflow"}],"deployedResources":[{"type":"application","path":"MySimpleApplication"}]},{"name":"Unit Testing - Running Test Cases in Test Projects and Integration Server JUnit configuration","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to structure Test Cases inside Test projects, and how to configure test execution options for Integration Server JUnits.","detailsURL":"https://ot4i.github.io/unit-test-testproject-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/unit-test-testproject-tutorial","zipURL":"https://github.com/ot4i/unit-test-testproject-tutorial/releases/download/v3.0/PI_UnitTest_TestConfigurations.zip","barFile":"","visible":"true","tags":"test","isPattern":"false","isFavorite":"true","projects":"MyApplicationUnderTest","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/MyApplicationUnderTest/MyFlowUnderTest.msgflow"}],"deployedResources":[{"type":"application","path":"MyApplicationUnderTest"}]},{"name":"Commands - Using the ibmint command to package BAR files, apply overrides and deploy","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the ibmint command to prepare and deploy integration artifacts outside of the IBM App Connect Enterprise Toolkit","detailsURL":"https://ot4i.github.io/ibmint-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/ibmint-tutorial","zipURL":"https://github.com/ot4i/ibmint-tutorial/releases/download/v3.0/PI_Demo_ibmint.zip","barFile":"","visible":"true","tags":"commands","isPattern":"false","isFavorite":"true","projects":"MyDemoApplication","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/MyDemoApplication/MyDemoFlow.msgflow"}],"deployedResources":[{"type":"application","path":"MyDemoApplication"}]},{"name":"Commands - Migrate from earlier product versions using the mqsiextractcomponents command","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the mqsiextractcomponents command to create integration nodes and servers based on existing IBM Integration Bus 10 and IBM App Connect Enterprise 11 topologies.","detailsURL":"https://ot4i.github.io/migrate-extract-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/migrate-extract-tutorial","zipURL":"https://github.com/ot4i/migrate-extract-tutorial/releases/download/v3.0/PI_MigrateExtract.zip","barFile":"","visible":"true","tags":"commands;migration","isPattern":"false","isFavorite":"true","projects":"MigrationTutorialHelperFiles","editorResPaths":[{"id":"MainFlow","editor":"","wspath":"<workspace>/MigrationTutorialHelperFiles/BARfiles/Transformation_ESQL.bar"}],"deployedResources":[]},{"name":"JSON Input Validation using an OpenAPI Specification in JSON format","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to validate input JSON messages over HTTP by checking them against an OpenAPI Specification document in JSON format.","detailsURL":"https://ot4i.github.io/json-validation-oasjson-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/json-validation-oasjson-tutorial","zipURL":"https://github.com/ot4i/json-validation-oasjson-tutorial/releases/download/v3.0/PI_Validate_Using_OAS_JSON.zip","barFile":"","visible":"true","tags":"JSON;validation;OpenAPI","isPattern":"false","isFavorite":"true","projects":"Validate_Using_OAS_JSON","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Validate_Using_OAS_JSON/Validate_Using_OAS_JSON.msgflow"}],"deployedResources":[{"type":"application","path":"Validate_Using_OAS_JSON"}]},{"name":"JSON Input Validation using an OpenAPI Specification in YAML format","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to validate input JSON messages over HTTP by checking them against an OpenAPI Specification document in YAML format.","detailsURL":"https://ot4i.github.io/json-validation-oasyaml-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/json-validation-oasyaml-tutorial","zipURL":"https://github.com/ot4i/json-validation-oasyaml-tutorial/releases/download/v3.0/PI_Validate_Using_OAS_YAML.zip","barFile":"","visible":"true","tags":"JSON;validation;YAML;OpenAPI","isPattern":"false","isFavorite":"true","projects":"Validate_Using_OAS_YAML","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Validate_Using_OAS_YAML/Validate_Using_OAS_YAML.msgflow"}],"deployedResources":[{"type":"application","path":"Validate_Using_OAS_YAML"}]},{"name":"JSON Input Validation using a JSON Schema in JSON format","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to validate input JSON messages over HTTP by checking them against a JSON schema in JSON format.","detailsURL":"https://ot4i.github.io/json-validation-schemajson-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/json-validation-schemajson-tutorial","zipURL":"https://github.com/ot4i/json-validation-schemajson-tutorial/releases/download/v3.0/PI_Validate_Using_Schema_JSON.zip","barFile":"","visible":"true","tags":"JSON;validation","isPattern":"false","isFavorite":"true","projects":"Validate_Using_Schema_JSON","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Validate_Using_Schema_JSON/Validate_Using_Schema_JSON.msgflow"}],"deployedResources":[{"type":"application","path":"Validate_Using_Schema_JSON"}]},{"name":"JSON Input Validation using a JSON Schema in YAML format","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to validate input JSON messages over HTTP by checking them against a JSON schema in YAML format.","detailsURL":"https://ot4i.github.io/json-validation-schemayaml-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/json-validation-schemayaml-tutorial","zipURL":"https://github.com/ot4i/json-validation-schemayaml-tutorial/releases/download/v3.0/PI_Validate_Using_Schema_YAML.zip","barFile":"","visible":"true","tags":"JSON;validation;YAML","isPattern":"false","isFavorite":"true","projects":"Validate_Using_Schema_YAML","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/Validate_Using_Schema_YAML/Validate_Using_Schema_YAML.msgflow"}],"deployedResources":[{"type":"application","path":"Validate_Using_Schema_YAML"}]},{"name":"Discovery Connector - Using the IBM Cloudant Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the IBM Cloudant Request node (requires v12.0.5.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-cloudant-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-cloudant-tutorial","zipURL":"https://github.com/ot4i/discovery-cloudant-tutorial/releases/download/v3.0/PI_Cloudant.zip","barFile":"","visible":"true","tags":"Discovery;Cloudant","isPattern":"false","isFavorite":"true","projects":"ExampleCloudant:CompleteExampleCloudant:CompletePolicyProjectCloudant","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleCloudant/ExampleCloudantFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleCloudant"}]},{"name":"Discovery Connector - Using the Microsoft Azure Blob storage Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Microsoft Azure Blob storage Request node (requires v12.0.5.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-azureblobstorage-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-azureblobstorage-tutorial","zipURL":"https://github.com/ot4i/discovery-azureblobstorage-tutorial/releases/download/v3.0/PI_AzureBlobStorage.zip","barFile":"","visible":"true","tags":"Discovery;AzureBlobStorage","isPattern":"false","isFavorite":"true","projects":"ExampleAzureBlobStorage:CompleteExampleAzureBlobStorage:CompletePolicyProjectAzureBlobStorage","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleAzureBlobStorage/ExampleAzureBlobStorageFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleAzureBlobStorage"}]},{"name":"Discovery Connector - Using the Coupa Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Coupa Request node (requires v12.0.5.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-coupa-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-coupa-tutorial","zipURL":"https://github.com/ot4i/discovery-coupa-tutorial/releases/download/v3.0/PI_Coupa.zip","barFile":"","visible":"true","tags":"Discovery;Coupa","isPattern":"false","isFavorite":"true","projects":"ExampleCoupa:CompleteExampleCoupa:CompletePolicyProjectCoupa","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleCoupa/ExampleCoupaFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleCoupa"}]},{"name":"Discovery Connector - Using the Amazon S3 Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Amazon S3 Request node (requires v12.0.5.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-amazons3-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-amazons3-tutorial","zipURL":"https://github.com/ot4i/discovery-amazons3-tutorial/releases/download/v3.0/PI_AmazonS3.zip","barFile":"","visible":"true","tags":"Discovery;AmazonS3","isPattern":"false","isFavorite":"true","projects":"ExampleAmazonS3:CompleteExampleAmazonS3:CompletePolicyProjectAmazonS3","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleAmazonS3/ExampleAmazonS3Flow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleAmazonS3"}]},{"name":"Discovery Connector - Using the Magento Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Magento Request node (requires v12.0.5.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-magento-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-magento-tutorial","zipURL":"https://github.com/ot4i/discovery-magento-tutorial/releases/download/v3.0/PI_Magento.zip","barFile":"","visible":"true","tags":"Discovery;Magento","isPattern":"false","isFavorite":"true","projects":"ExampleMagento:CompleteExampleMagento:CompletePolicyProjectMagento","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleMagento/ExampleMagentoFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleMagento"}]},{"name":"Discovery Connector - Using the Salesforce Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Salesforce Request node (requires v12.0.5.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-salesforce-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-salesforce-tutorial","zipURL":"https://github.com/ot4i/discovery-salesforce-tutorial/releases/download/v3.0/PI_Salesforce.zip","barFile":"","visible":"true","tags":"Discovery;Salesforce","isPattern":"false","isFavorite":"true","projects":"ExampleSalesforce:CompleteExampleSalesforce:CompletePolicyProjectSalesforce","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleSalesforce/ExampleSalesforceFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleSalesforce"}]},{"name":"Discovery Connector - Using the Salesforce Input node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Salesforce Input node (requires v12.0.6.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-salesforceinput-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-salesforceinput-tutorial","zipURL":"https://github.com/ot4i/discovery-salesforceinput-tutorial/releases/download/v3.0/PI_SalesforceInput.zip","barFile":"","visible":"true","tags":"Discovery;Salesforce","isPattern":"false","isFavorite":"true","projects":"ExampleSalesforceInput:SalesforcePolicyProject","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleSalesforceInput/ExampleSalesforceRequestFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleSalesforceInput"}]},{"name":"Discovery Connector - Using the IBM Maximo Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the IBM Maximo Request node (requires v12.0.5.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-maximo-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-maximo-tutorial","zipURL":"https://github.com/ot4i/discovery-maximo-tutorial/releases/download/v3.0/PI_Maximo.zip","barFile":"","visible":"true","tags":"Discovery;Maximo","isPattern":"false","isFavorite":"true","projects":"ExampleMaximo:CompleteExampleMaximo:CompletePolicyProjectMaximo","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleMaximo/ExampleMaximoFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleMaximo"}]},{"name":"Discovery Connector - Using the Oracle E-Business Suite Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Oracle E-Business Suite Request node (requires v12.0.6.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-oracleebs-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-oracleebs-tutorial","zipURL":"https://github.com/ot4i/discovery-oracleebs-tutorial/releases/download/v3.0/PI_OracleEBS.zip","barFile":"","visible":"true","tags":"Discovery;OracleEBS","isPattern":"false","isFavorite":"true","projects":"ExampleOracleEBS:CompleteExampleOracleEBS:CompletePolicyProjectOracleEBS","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleOracleEBS/ExampleOracleEBSFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleOracleEBS"}]},{"name":"Discovery Connector - Using the SAP OData Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the SAP OData Request node (requires v12.0.6.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-sapodata-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-sapodata-tutorial","zipURL":"https://github.com/ot4i/discovery-sapodata-tutorial/releases/download/v3.0/PI_SAPOData.zip","barFile":"","visible":"true","tags":"Discovery;SAPOData","isPattern":"false","isFavorite":"true","projects":"ExampleSAPOData:CompleteExampleSAPOData:CompletePolicyProjectSAPOData","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleSAPOData/ExampleSAPODataFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleSAPOData"}]},{"name":"Discovery Connector - Using the Slack Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the Slack Request node (requires v12.0.6.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-slack-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-slack-tutorial","zipURL":"https://github.com/ot4i/discovery-slack-tutorial/releases/download/v3.0/PI_Slack.zip","barFile":"","visible":"true","tags":"Discovery;Slack","isPattern":"false","isFavorite":"true","projects":"ExampleSlack:CompleteExampleSlack:CompletePolicyProjectSlack","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleSlack/ExampleSlackFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleSlack"}]},{"name":"Discovery Connector - Using the ServiceNow Request node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the ServiceNow Request node (requires v12.0.6.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-servicenow-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-servicenow-tutorial","zipURL":"https://github.com/ot4i/discovery-servicenow-tutorial/releases/download/v3.0/PI_ServiceNow.zip","barFile":"","visible":"true","tags":"Discovery;ServiceNow","isPattern":"false","isFavorite":"true","projects":"ExampleServiceNow:CompleteExampleServiceNow:CompletePolicyProjectServiceNow","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleServiceNow/ExampleServiceNowFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleServiceNow"}]},{"name":"Discovery Connector - Using the ServiceNow Input node","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to use the ServiceNow Input node (requires v12.0.6.0 or higher)","detailsURL":"https://ot4i.github.io/discovery-servicenowinput-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/discovery-servicenowinput-tutorial","zipURL":"https://github.com/ot4i/discovery-servicenowinput-tutorial/releases/download/v3.0/PI_ServiceNowInput.zip","barFile":"","visible":"true","tags":"Discovery;ServiceNow","isPattern":"false","isFavorite":"true","projects":"ExampleServiceNowInput:ServiceNowPolicyProject","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/ExampleServiceNowInput/ExampleServiceNowRequestFlow.msgflow"}],"deployedResources":[{"type":"application","path":"ExampleServiceNowInput"}]},{"name":"App Connect for Manufacturing - Using the OPC-UA-Read node to read data from an OPC Server","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to create a simple message flow for reading data from an OPC server using the OPC-UA-Read Node.","detailsURL":"https://ot4i.github.io/acmfg-opc-ua-read-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/acmfg-opc-ua-read-tutorial","zipURL":"https://github.com/ot4i/acmfg-opc-ua-read-tutorial/releases/download/v3.1/PI_OPCUAREAD.zip","barFile":"","visible":"true","tags":"Manufacturing;OPCUA","isPattern":"false","isFavorite":"true","projects":"App_OPCUA_Control:App_OPCUA_Read","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/App_OPCUA_Read/Flow_OPCUA_Read.msgflow"}],"deployedResources":[{"type":"application","path":"App_OPCUA_Read"}]},{"name":"App Connect for Manufacturing - Using the OPC-UA-Input node to read subscribed data from an OPC Server","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to create a simple message flow using OPC-UA-Input node for reading changed values of subscribed data from an OPC server.","detailsURL":"https://ot4i.github.io/acmfg-opc-ua-input-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/acmfg-opc-ua-input-tutorial","zipURL":"https://github.com/ot4i/acmfg-opc-ua-input-tutorial/releases/download/v3.1/PI_OPCUAINPUT.zip","barFile":"","visible":"true","tags":"Manufacturing;OPCUA","isPattern":"false","isFavorite":"true","projects":"App_OPCUA_Control:App_OPCUA_Input","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/App_OPCUA_Input/Flow_OPCUA_Input.msgflow"}],"deployedResources":[{"type":"application","path":"App_OPCUA_Input"}]},{"name":"App Connect for Manufacturing - Using the OPC-UA-Write node to write data into an OPC Server","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to create a simple message flow for writing data into an OPC server using the OPC-UA-Write Node.","detailsURL":"https://ot4i.github.io/acmfg-opc-ua-write-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/acmfg-opc-ua-write-tutorial","zipURL":"https://github.com/ot4i/acmfg-opc-ua-write-tutorial/releases/download/v3.1/PI_OPCUAWRITE.zip","barFile":"","visible":"true","tags":"Manufacturing;OPCUA","isPattern":"false","isFavorite":"true","projects":"App_OPCUA_Control:App_OPCUA_Write","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/App_OPCUA_Write/Flow_OPCUA_Write.msgflow"}],"deployedResources":[{"type":"application","path":"App_OPCUA_Write"}]},{"name":"App Connect for Manufacturing - Using the OPC-UA-Method-Call node to call a method on an OPC Server","version":"1.0","iibVersions":"12.*-12.*","shortDesc":"Learn how to create a simple message flow for calling a method on an OPC Server using the OPC-UA-Method-Call Node.","detailsURL":"https://ot4i.github.io/acmfg-opc-ua-method-call-tutorial/v12/en/details.html","stepsURL":"https://ot4i.github.io/ace-tutorials/v12/en/#/./tutorials/acmfg-opc-ua-method-call-tutorial","zipURL":"https://github.com/ot4i/acmfg-opc-ua-method-call-tutorial/releases/download/v3.1/PI_OPCUAMETHOD.zip","barFile":"","visible":"true","tags":"Manufacturing;OPCUA","isPattern":"false","isFavorite":"true","projects":"App_OPCUA_Control:App_OPCUA_MethodCall","editorResPaths":[{"id":"MainFlow","editor":"flow","wspath":"<workspace>/App_OPCUA_MethodCall/Flow_OPCUA_MethodCall.msgflow"}],"deployedResources":[{"type":"application","path":"App_OPCUA_MethodCall"}]}]},{"name":"Scenarios","description":"Explore powerful App Connect Enterprise capabilities through integrated scenarios","descriptionUrl":"https://ot4i.github.io/tutorials/v11/en/categories/Scenario_Category_overview.htm","iibVersions":"","visible":"true","tutorials":[]}]}')}},[[677,1,2]]]);
//# sourceMappingURL=main.6435562e.chunk.js.map