{
  "(V11.0.0.4) Using a Mapping node to graphically access a Lookup table that is stored in the Global Cache": {
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"(V11.0.0.4) Using a Mapping node to graphically access a Lookup table that is stored in the Global Cache",
        "shortDescription":"Learn how to use a Mapping node to graphically access a Lookup table that is stored in the Global Cache by exploring this simple example.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"6 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Cache Get and Cache Put transforms in a Mapping node"
          },
          {
            "title":"Global Cache"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use IBM App Connect Enterprise Mapping node Cache Get and Cache Put transforms to graphically access and load a Lookup table stored in the Global Cache.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to graphically access a Lookup table stored in the Global Cache using a Mapping node."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates graphically accessing the Global Cache. It shows the use of a Mapping node to replace an abbreviated value in a message with an associated full name from a Lookup table that is held in the Global Cache. Another Mapping node shows the loading of the Lookup table.",
          "sections":[
            {
              "section":"Note: This tutorial requires the IBM App Connect Enterprise Toolkit Version 11.0.0.4 or later and an integration node or integration server that is running IBM App Connect Enterprise Version 11.0.0.4 or later."
            },
            {
              "section":"This tutorial demonstrates how to graphically access the Global Cache in a Mapping node by using the Cache Get and Cache Put transforms."
            },
            {
              "section":"One Mapping node demonstrates the use of a Cache Get transform to replace an abbreviated value in the input message with the associated full name from a Lookup table that is in the Global Cache."
            },
            {
              "section":"Another Mapping node demonstrates the use of a Cache Put transform to populate a Lookup table in the Global Cache with data that is read from a comma-separated-values file."
            },
            {
              "section":"In IBM App Connect Enterprise, message flows can be used to transform and enrich input data structures into output data structures. Several transformation options are provided including a Mapping node, which allows the transformation and enrichment to be completed graphically. The Global Cache is a repository for data that you want to reuse regularly. The Mapping node can get, put, and remove data from the Global Cache."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions from scratch",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Data caching overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23730_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Accessing a global cache by using a Mapping node",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br26101_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Global cache scenario: Caching static data",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23732_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import the application",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='application'>Import</span> to import the application into your workspace. Note: You must have IBM App Connect Enterprise Toolkit Version 11.0.0.4 or later."
              },
              {
                "section":"The <span class='application'>LookupTable_UsingMappingGlobalCache</span> application is now shown in the Application Development view of your workspace. The <span class='msgflow'>LookupCountyFullName</span> message flow is opened in the Message Flow editor."
              },
              {
                "section":"The <span class='msgflow'>LookupCountyFullName</span> message flow contains a number of nodes:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"<span class='uicontrol'>HTTP Input</span>: An Input node that receives an input message that contains an abbreviated county name."
                    },
                    {
                      "details":"<span class='uicontrol'>LookupCountyFullName</span>: A Mapping node that accesses the global cache to interrogate the Lookup table for the full county name."
                    },
                    {
                      "details":"<span class='uicontrol'>FoundCountyFullName</span>: A Route node that determines the path that the message should take depending on whether the full county name was retrieved from the global cache."
                    },
                    {
                      "details":"<span class='uicontrol'>File Read</span>: A FileRead node that reads the file that contains the Lookup table data."
                    },
                    {
                      "details":"<span class='uicontrol'>LoadCache</span>: A Mapping node that loads the Lookup table data into the global cache."
                    },
                    {
                      "details":"<span class='uicontrol'>HTTP Reply</span>: A Reply node that returns a message that contains the full county name."
                    }
                  ]
                }
              },
              {
                "section":"You can explore the configuration of these nodes later in the tutorial."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Data caching overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23730_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Accessing a global cache by using a Mapping node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br26101_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Accessing user-defined properties from a Mapping node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br34267_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Preparing to run the application",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Perform the following steps to prepare your environment to run the <span class='application'>LookupTable_UsingMappingGlobalCache</span> application.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "name":"Enable the default Global Cache",
                      "details":"Enable the embedded global cache by copying the GlobalCache entry in the <code>basic_1_catalog_1_container\\server.conf.yaml</code> found in the <code>ace-install-directory\\server\\sample\\globalcache</code> directory into your integration server server.conf.yaml file and following the instructions in this directory. Note: The integration node or server must be running IBM App Connect Enterprise Version 11.0.0.4 or later."
                    },
                    {
                      "name":"Setup the location of the lookup table initialization data file",
                      "details":"Setup the location of the lookup table initialization data file by completing one of the following steps:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"On Windows: Create the input directory <code>C:\\temp</code>."
                          },
                          {
                            "details":"On Linux: Change the Input directory property of the 'File Read' node to a Linux path."
                          }
                        ]
                      }
                    },
                    {
                      "name":"Copy the lookup table initialization data file",
                      "details":"Copy the <span class='filepath'>CountyAbbrNames.csv</span> file from the 'Other Resources' folder in the <span class='application'>LookupTable_UsingMappingGlobalCache</span> application to the input directory that you created in step 2."
                    },
                    {
                      "details":"Drag and drop deploy the shared library <span class='application'>LookupTableCSVdata</span> on to your integration server."
                    }
                  ]
                }
              },
              {
                "section":"Next you will use the Flow exerciser to send HTTP requests to the message flow."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"FileRead node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc34090_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to run the application",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Open the <span class='uicontrol'>LookupCountyFullName</span> message flow from the application and complete the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Click the <span class='icon'>Flow Exerciser</span> icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start recording the message path through the flow."
                    },
                    {
                      "details":"Click the <span class='icon'>Send Message</span> icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> to select the first message to send to the flow."
                    },
                    {
                      "details":"Select the 'Berks' input message, and click <span class='uicontrol'>Send</span>.<br/>The request message is sent to the HTTP Input node, and the response message containing the full name, 'Berkshire', is received."
                    },
                    {
                      "details":"Close the Send message dialog. <br/>The message path is automatically highlighted on the message flow. Note: The message path shows that the message was sent through the 'File Read' and 'LoadCache' Mapping nodes. Because the Lookup table was not in the Global Cache, the 'LookupCountyFullName' Mapping node cannot find a match."
                    },
                    {
                      "details":"Click on any connection to see the data that passed through that connection."
                    },
                    {
                      "details":"Click the <span class='icon'>Send Message</span> icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> again, to select the 'Hants' message and send it to the flow by clicking <span class='uicontrol'>Send</span>."
                    },
                    {
                      "details":"Review the received message and close the Send message dialog to see the message path.<br/>Note: The message path shows that the message was sent directly to the 'HTTP Reply' node. Because the Lookup table is in the Global Cache, the 'LookupCountyFullName' Mapping node found a match and set the 'CountyFullName'."
                    }
                  ]
                }
              },
              {
                "section":"If you restart the integration node or integration server, or issue a <span class='cmdname'>mqsicacheadmin</span> command to clear the Global Cache, the next message is sent through the 'File Read' and 'LoadCache' Mapping nodes again. (For example: <code>mqsicacheadmin --admin-host localhost --admin-port 7600 -c clearGrid -m CountyAbbrNames</code>)"
              },
              {
                "section":"<span class='uicontrol'>The following optional steps help you explore and understand the application</span>"
              },
              {
                "section":"The <span class='msgflow'>LookupCountyFullName</span> message flow uses an HTTP Input node to receive a JSON message that contains a 'CountyAbbr' value. The 'CountyAbbr' value is used in the 'LookupCountyFullName' Mapping node to lookup the replacement full county name from the Global Cache.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Double click the 'LookupCountyFullName' Mapping node to open the associated Graphical Data Map that includes the 'Cache Get' transform."
                    },
                    {
                      "details":"Click the 'Local map' to enter the nested mapping. Note: The value for the input element, 'CountyAbbr', is placed in the 'Environment' so that it is not overwritten by the data that is retrieved from the <span class='filepath'>'CountyAbbrNames.csv</span> file."
                    },
                    {
                      "details":"Click the 'Cache Get' transform to enter the nested mapping for the transform and review the mapping of the 'Key' that is used to select the entry in the Lookup table. Note: 'MapName' is set by using a CustomXPath transform to configure a user-defined property."
                    },
                    {
                      "details":"Click the up arrow <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/exitNestedMapping.png' alt='' /> to exit the nested mapping, then click the 'Cache Return' transform to enter the nested mapping for the transform and review the mapping from the 'Value' that is returned from the Global Cache."
                    },
                    {
                      "details":"Click the 'Move' transform and view the Condition tab in the Properties, to see that the 'Value' element is created only if an entry is found in the Global Cache."
                    },
                    {
                      "details":"Return to the message flow editor.<br/>The 'FoundCountyFullName' Route node checks for the presence of the 'CountyFullName' value:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"If the 'CountyFullName' value exists, the message is routed directly to the 'HTTP Reply' node."
                          },
                          {
                            "details":"If the 'CountyFullName' value does not exist (for example, if the Lookup table in the Global Cache is not populated), the message is routed to the 'File Read' node. The 'File Read' node retrieves name-value pairs from a comma-separated-values file that is parsed by using a DFDL CSV model. The name-value data is passed to the 'LoadCache' Mapping node, where the data is loaded into a Lookup table in the Global Cache. The 'LoadCache' mapping node also sets the 'CountyFullName' value in the output message."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Double click the 'LoadCache' Mapping node to open and explore the map and review the use of the 'Cache Put' transform within the 'For each' transform. Note: The value of 'CountyFullName' for the current lookup request is taken directly from the data that is read from the comma-separated-values file."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"mqsicacheadmin command",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23783_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Aggregation nodes using CallableFlowAsyncInvoke nodes with back-end services": {
    "version":"0.1",
  "pageContent":{
    "_comments":"object that contains data for page labels, buttons, etc.",
    "navItems":{
      "_common":{
        "buttonBackToGallery":{
          "name":"Back To Gallery",
          "method":"backToGallery()",
          "idName":"backToGallery"
        },
        "buttonStartTutorial":{
          "name":"Start Tutorial",
          "method":"startTutorialFromDetailsScreen()",
          "idName":"startTutorial"
        },
        "buttonViewDetails":{
          "name":"View Details",
          "method":"viewDetails()",
          "idName":"stepsViewDetails"
        }
      }
    }
  },
  "tutorial":{
    "_common":{
      "name":"Aggregation nodes using CallableFlowAsyncInvoke nodes with back-end services",
      "shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous Callable Flow nodes.",
      "durationText":"This tutorial takes approximately",
      "durationTime":"5 minutes",
      "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
      "resourceToOpen":"MainFlow",
      "helpLink":{
        "text":"IBM Knowledge Center",
        "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
      }
    },
    "pageDetails":{
      "topicsName":"Tutorial Topics",
      "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
      "topicList":[
        {
          "title":"Aggregation nodes"
        },
        {
          "title":"Asynchronous Callable Flows"
        }
      ],
      "outcomesName":"Learning outcomes",
      "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
      "outcomeList":[
        {
          "title":"Use IBM App Connect Enterprise to fan-out asynchronous Callable Flow invocations and aggregate their responses."
        }
      ],
      "summary":{
        "overviewName":"OVERVIEW",
        "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
        "sections":[
          {
            "section":"This tutorial demonstrates a simple REST API that receives an HTTP GET, and fans-out two separate asynchronous Callable Flow invocations (after simple transformations using a Mapping node). Two separate example back-end message flows are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the REST API aggregates values from the two response messages together."
          },
          {
            "section":"This tutorial requires an ACE integration node (or standalone server) which is associated with a local queue manager."
          },
          {
            "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. A REST API is a specialized form of an application which describes a set of resources, and a set of operations that can be called on those resources from any HTTP client. This tutorial provides a REST API which holds the fan-out / fan-in aggregation flow, and two other applications for the back-end callable flows."
          }
        ]
      },
      "helpLinks":{
        "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
        "title":"Find out more",
        "details":[
          {
            "title":"Knowledge Center link to ",
            "description":"Developing integration solutions by using applications",
            "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
            "type":"web"
          }
        ]
      }
    },
    "pageSteps":{
      "create":{
        "overview":{
          "name":"Create",
          "heading":"Import projects",
          "_createComment":"A description of what will happen when the user clicks Import.",
          "sections":[
            {
              "section":"When you click Import, one REST API and two applications will be created in your workspace:"
            },
            {
              "section":"The REST API <span class='application'>AggregationCallableAsync</span> provides a single GET operation on a resource named AggregationResponse. The subflow representation of the operation, <span class='application'>getAggregatedResponse.subflow</span>, uses CallableFlowAsyncInvoke nodes to fan-out two requests. Two CallableFlowAsyncResponse nodes are used to fan-in reply messages from the back-end message flows."
            },
            {
              "section":"The Application <span class='application'>AggregationCallableAsyncBackend1</span> provides a single message flow with CallableInput, Mapping and CallableReply nodes."
            },
            {
              "section":"The Application <span class='application'>AggregationCallableAsyncBackend2</span> provides a single message flow with CallableInput, Mapping and CallableReply nodes."
            },
            {
              "section":"For simplicity, the REST API and two back-end applications can all be deployed to the same integration server. If you wish, you could deploy AggregationCallableAsyncBackend1 and AggregationCallableAsyncBackend2 to different integration servers (assuming you configure a Switch component to link the callable flows)."
            },
            {
              "section":"Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        },
        "actions":{
          "title":"Create Actions",
          "details":[
            {
              "name":"Import",
              "method":"importArtifacts()"
            }
          ]
        }
      },
      "prepare":{
        "overview":{
          "name":"Prepare",
          "heading":"Create queues",
          "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
          "sections":[
            {
              "section":"Although this solution uses Callable Flows to route messages between the REST API and applications, the aggregation nodes require MQ queues to operate.",
              "steps":{
                "type":"ordered",
                "details":[
                  {
                    "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                    "substeps":{
                      "type":"ordered",
                      "details":[
                        {
                          "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                        },
                        {
                          "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                        }
                      ]
                    }
                  },
                  {
                    "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                    "substeps":{
                      "type":"ordered",
                      "details":[
                        {
                          "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                        },
                        {
                          "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                        },
                        {
                          "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                        }
                      ]
                    }
                  }
                ]
              }
            }
          ]
        },
        "helpLinks":{

        }
      },
      "run":{
        "overview":{
          "name":"Run",
          "heading":"",
          "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
          "sections":[
            {
              "section":"<h4>Deploy the back-end Callable Flow Applications</h4>",
              "steps":{
                "type":"ordered",
                "details":[
                  {
                    "details":"Deploy the <span class='application'>AggregationCallableAsyncBackend1</span> application, by dragging and dropping it on to the default integration server."
                  },
                  {
                    "details":"Deploy the <span class='application'>AggregationCallableAsyncBackend2</span> application, by dragging and dropping it on to the default integration server."
                  }
                ]
              }
            },
            {
              "section":"<h4>Use any web browser to simply test the REST API",
              "steps":{
                "type":"ordered",
                "details":[
                  {
                    "details":"Look inside the <span class='resource'>AggregationCallableAsync</span> REST API, right-click the <span class='resource'>AggregationCallableAsync.msgflow</span> and select <span class='resource'>Open with > Message Flow Editor</span>.",
                    "substeps":{
                      "type":"unordered",
                      "details":[
                        {
                          "details":"Click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow"
                        }
                      ]
                    }
                  },
                  {
                    "details":"Open any web browser. We will be using this to send an HTTP GET into the REST API <span class='resource'>AggregationCallableAsync</span>.",
                    "substeps":{
                      "type":"unordered",
                      "details":[
                        {
                          "details":"In the address bar of the browser paste in the URL for the HTTP GET operation. If you have used default settings, then this is likely to be:"
                        },
                        {
                          "details":"http://localhost:7080/aggregationcallableasync/v1/AggregatedResponse?Field1=value1&Field2=value2"
                        },
                        {
                          "details":"Note that this URL includes query parameters with the values <span class='resource'>value1</span> and <span class='resource'>value2</span>. One of these values will be sent to each back-end flow. The back end flows will uppercase the values and reply."
                        }
                      ]
                    }
                  },
                  {
                    "details":"Return to <span class='resource'>AggregationCallableAsync.msgflow</span>.",
                    "substeps":{
                      "type":"unordered",
                      "details":[
                        {
                          "details":"Click the View Path icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png' alt='' /> to see the path which the message took through the flow and see the message content on the path. You can open the subflow <span class='resource'>getAggregatedResponse.subflow</span> and click on the flow connections to see what the message tree looked like as it traversed through the REST API."
                        },
                        {
                          "details":"Back in the web browser, you should see the final output message carries return data from both of the back-end callable message flows which has been changed to upper case. It should look like this:"
                        },
                        {
                          "details":"<span class='resource'>{&quot;ResponseBackend1&quot;:&quot;VALUE1&quot;,&quot;ResponseBackend2&quot;:&quot;VALUE2&quot;}</span>"
                        }
                      ]
                    }
                  }
                ]
              }
            },
            {
              "section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages to Callable Flows."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Message Flow Aggregation",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac00660_.htm",
              "type":"web"
            }
          ]
        }
      }
    }
  }
  },
  "Aggregation nodes using HTTPAsyncRequest nodes with back-end services": {
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Aggregation nodes using HTTPAsyncRequest nodes with back-end services",
        "shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous HTTP nodes.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Aggregation nodes"
          },
          {
            "title":"Asynchronous HTTP"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to fan-out requests over HTTP and aggregate their responses."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple Application that receives an XML format message over HTTP, and fans-out two separate asynchronous HTTP request messages (after simple transformations to a CSV format using a Mapping node). Two separate example back-end Applications are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the Application aggregates values from the two response messages together."
            },
            {
              "section":"This tutorial requires an ACE integration node (or standalone server) which is associated with a local queue manager."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides three Applications in total, one to hold the fan-out / fan-in aggregation flow, and two other back-end Applications. A shared library is used to hold the associated XSD and DFDL message model files which describe the required message formats."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, three Applications and one shared library will be created in your workspace:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"The Application <span class='application'>AggregationHTTPAsync</span> provides a single message flow with HTTPAsyncRequest nodes to fan-out two requests. Two HTTPAsyncResponse nodes fan-in reply messages from the back-end message flows. This Application references the shared library named <span class='application'>AggregationHTTPAsyncLib</span> which contains XSD and DFDL message model definitions."
                    },
                    {
                      "details":"The Application <span class='application'>AggregationHTTPBackend1</span> provides a single message flow which receives a CSV message and uses a Mapping node to upper-case the data and return it over HTTP."
                    },
                    {
                      "details":"The Application <span class='application'>AggregationHTTPBackend2</span> provides a single message flow which receives a CSV message and uses a Mapping node to upper-case the data and return it over HTTP."
                    }
                  ]
                }
              },
              {
                "section":"For simplicity, the three Applications can all be deployed to the same integration server. Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create queues",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Although this solution uses HTTP to route messages between the applications, the aggregation nodes require MQ queues to operate.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Deploy the back-end Applications</h4>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Deploy the <span class='application'>AggregationHTTPAsyncLib</span> Shared Library, by dragging and dropping it on to the default integration server."
                    },
                    {
                      "details":"Deploy the <span class='application'>AggregationHTTPBackend1</span> Application, by dragging and dropping it on to the default integration server."
                    },
                    {
                      "details":"Deploy the <span class='application'>AggregationHTTPBackend2</span> Application, by dragging and dropping it on to the default integration server."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Test the scenario using the Flow Exerciser",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Look inside the <span class='resource'>AggregationHTTPAsync</span> Application, and open the message flow also named <span class='resource'>AggregationHTTPAsync</span>",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow. If your Toolkit is connected to multiple servers, you may be asked which one you would like to use. Select an Integration Server under the node which you prepared to work with MQ in the Prepare section."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />, choose the provided InputMessage and click Send."
                          },
                          {
                            "details":"Note that the input XML message has string values in lower case:"
                          },
                          {
                            "details":"<code><b>&lt;Message&gt;</b></code>"
                          },
                          {
                            "details":"<code><b>&lt;Backend1&gt;&lt;FieldA&gt;hello&lt;/FieldA&gt;&lt;FieldB&gt;world&lt;/FieldB&gt;&lt;FieldC&gt;backend1&lt;/FieldC&gt;&lt;/Backend1&gt;</b></code>"
                          },
                          {
                            "details":"<code><b>&lt;Backend2&gt;&lt;FieldA&gt;greetings&lt;/FieldA&gt;&lt;FieldB&gt;globe&lt;/FieldB&gt;&lt;FieldC&gt;backend2&lt;/FieldC&gt;&lt;/Backend2&gt;</b></code>"
                          },
                          {
                            "details":"<code><b>&lt;/Message&gt;</b></code>"
                          },
                          {
                            "details":"The Flow Exerciser should report that an HTTP Reply message has been received. Note that this response message has string values in upper case which has occurred as a result of the aggregation's invocation of the backend services:"
                          },
                          {
                            "details":"<code><b>&lt;Message&gt;</b></code>"
                          },
                          {
                            "details":"<code><b>&lt;Backend1&gt;&lt;FieldA&gt;HELLO&lt;/FieldA&gt;&lt;FieldB&gt;WORLD&lt;/FieldB&gt;&lt;FieldC&gt;BACKEND1&lt;/FieldC&gt;&lt;/Backend1&gt;</b></code>"
                          },
                          {
                            "details":"<code><b>&lt;Backend2&gt;&lt;FieldA&gt;GREETINGS&lt;/FieldA&gt;&lt;FieldB&gt;GLOBE&lt;/FieldB&gt;&lt;FieldC&gt;BACKEND2&lt;/FieldC&gt;&lt;/Backend2&gt;</b></code>"
                          },
                          {
                            "details":"<code><b>&lt;/Message&gt;</b></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Close the Flow Exerciser:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"You should be able to see the path which the message followed through the flow."
                          },
                          {
                            "details":"Click on the flow connections to see what the message tree looked like as it traversed through the Integration Service."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages using the HTTP transport to back-end services."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message Flow Aggregation",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac00660_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Aggregation nodes using SOAPAsyncRequest nodes with back-end services":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Aggregation nodes using SOAPAsyncRequest nodes with back-end services",
        "shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous SOAP nodes.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Aggregation nodes"
          },
          {
            "title":"Asynchronous SOAP/HTTP"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to fan-out requests over SOAP/HTTP and aggregate their responses."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple Integration Service that receives a SOAP/HTTP message, and fans-out two separate asynchronous SOAP/HTTP request messages (after simple transformations using a Mapping node). Two separate example back-end Integration Services are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the Integration Service aggregates values from the two response messages together."
            },
            {
              "section":"This tutorial requires an ACE integration node (or standalone server) which is associated with a local queue manager."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An Integration Service is a specialized form of an application with a defined interface and structure that acts as a container for a web services solution. This tutorial provides an Integration Service which holds the fan-out / fan-in aggregation flow, and two other back-end Integration Services. A shared library is used to hold the associated WSDL and XSD files describing the back-end services which is required by the main Integration Service."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using integration services",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12001_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, three Integration Services and one shared library will be created in your workspace:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"The Integration Service <span class='application'>AggregationSOAPAsync</span> provides a single operation named getAggregatedResponseOperation. The subflow representation of this operation uses SOAPAsyncRequest nodes to fan-out two requests. Two SOAPAsyncResponse nodes are used to fan-in reply messages from the back-end message flows. This Integration Service references the shared library named <span class='application'>AggregationSOAPAsyncLib</span> which contains WSDL and XSD definitions of the backend services."
                    },
                    {
                      "details":"The Integration Service <span class='application'>AggregationSOAPBackend1</span> provides a single operation named backendOperation1 whose subflow representation uses a Mapping node to upper-case the input data."
                    },
                    {
                      "details":"The Integration Service <span class='application'>AggregationSOAPBackend2</span> provides a single operation named backendOperation2 whose subflow representation uses a Mapping node to upper-case the input data."
                    }
                  ]
                }
              },
              {
                "section":"For simplicity, the three Integration Services can all be deployed to the same integration server. If you wish, you could deploy <span class='application'>AggregationSOAPBackend1</span> and <span class='application'>AggregationSOAPBackend2</span> to different integration servers. Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using integration services",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12001_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create queues",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Although this solution uses HTTP to route messages between the Integration Services, the aggregation nodes require MQ queues to operate.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Deploy the required Shared Library</h4>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Deploy the <span class='application'>AggregationSOAPAsyncLib</span> Shared Library, by dragging and dropping it on to the default integration server."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Deploy the back-end Integration Services</h4>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Deploy the <span class='application'>AggregationSOAPBackend1</span> Integration Service, by dragging and dropping it on to the default integration server."
                    },
                    {
                      "details":"Deploy the <span class='application'>AggregationSOAPBackend2</span> Integration Service, by dragging and dropping it on to the default integration server."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Test the scenario using the Flow Exerciser",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Look inside the <span class='resource'>AggregationSOAPAsync</span> Integration Service, and inside the Integration Servie Description folder, double-click the getAggregatedResponseOperation to open it.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow. If your Toolkit is connected to multiple servers, you may be asked which one you would like to use. Select an Integration Server under the node which you prepared to work with MQ in the Prepare section."
                          },
                          {
                            "details":"Click the Send Message icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />, choose the provided TestInputMessage and click Send."
                          },
                          {
                            "details":"Note that the input message includes a SOAP Body which has string values in lower case:"
                          },
                          {
                            "details":"In getAggregatedResponseOperation: <span class='resource'>...&lt;input1&gt;value1&lt;/input1&gt;&lt;input2&gt;value2&lt;/input2&gt;...</span>"
                          },
                          {
                            "details":"The Flow Exerciser should report that a SOAP Reply message has been received. Note that this response message has string values in upper case which has occurred as a result of the aggregation's invocation of the backend services:"
                          },
                          {
                            "details":"In getAggregatedResponseOperationResponse: <span class='resource'>...&lt;NS1:output1&gt;VALUE1&lt;/NS1:output1&gt;&lt;NS1:output2&gt;VALUE2&lt;/NS1:output2&gt;..."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Close the Flow Exerciser and navigate back to the graphical subflow view of getAggregatedResponseOperation: ",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"You should be able to see the path which the message followed through the flow."
                          },
                          {
                            "details":"Click on the flow connections to see what the message tree looked like as it traversed through the Integration Service."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages using the SOAP/HTTP transport to back-end services."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message Flow Aggregation",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac00660_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Call a REST API using the RESTAsyncRequest node":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Call a REST API using the RESTAsyncRequest node",
        "shortDescription":"Learn how to use a RESTAsyncRequest node to call a REST API and a RESTAsyncResponse node to receive the response.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"RESTAsyncRequest node"
          },
          {
            "title":"Calling a REST API using the RESTAsyncRequest node"
          },
          {
            "title":"Transformation using graphical data mapping"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to use the RESTAsyncRequest Node to call a REST API."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how a RESTAsyncRequest node and a RESTAsyncResponse node can be used to call a REST API and receive the response back asynchronously on a separate thread. A simple application has been created, which contains two message flows. The first flow receives XML data over HTTP (using an HTTPInput node). The XML data is parsed and passed to a RESTAsyncRequest node. The RESTAsyncRequest node's properties specify where the REST API is running (in this tutorial this will be your localhost), and the Request parameter to send. The REST API implements a GET operation, in which a graphical data mapping node is used to 'retrieve' information (actually the values are hard coded in a map) about a user based on the input data. A RESTAsyncResponse node in the second message flow receives the REST API response and transmits it to the HTTPReply node."
            },
            {
              "section":"In App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An application can contain App Connect Enterprise resources, such as flows, message definitions, libraries, and JAR files. In this tutorial, an application is used to hold the message flow which contains the RESTAsyncRequest node. A referenced shared Library is used, to hold an XML schema to describe the input data and a Swagger file to describe the interface of the REST API which is invoked."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDL Schemas",
              "link":"http://github.com/DFDLSchemas",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Use the Import button to the right to import the tutorial artifacts into your workspace:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"The <b>RESTAsyncRequest_Client</b> application application contains two simple message flows, which will initiate the call to the REST API using a RESTAsyncRequest node and handle the response using a RESTAsyncResponse node."
                    },
                    {
                      "details":"The <b>RESTAsyncRequest_SharedLibrary</b> contains resources which may be referenced by different applications or other libraries."
                    },
                    {
                      "details":"The <b>RESTAsyncRequest_API</b> has one implemented operation (GET)."
                    }
                  ]
                }
              },
              {
                "section":[
                  "Please note that the <b>RESTAsyncRequest_API</b> contains its own copy of the swagger document, which describes the REST API. The application references a separate copy of the swagger file in <b>RESTAsyncRequest_SharedLibrary</b>."
                ]
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>RESTAsyncRequest_Everything.bar</b> inside the <b>RESTAsyncRequest_Client</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using integration services",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>RESTAsyncRequest_Client</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/REST/getUser -d @.\\RESTAsyncRequest_client\\input1.xml</code>"
                    },
                    {
                      "details":"The input XML message structure looks like this:<br><b>&lt;User&gt;&lt;UserNumber&gt;1&lt;/UserNumber&gt;&lt;/User&gt;"
                    },
                    {
                      "details":"The output JSON message structure looks like this:<br><b>{\"userNumber\":\"1\",\"firstName\":\"Peter\",\"lastName\":\"Pan\",\"userDetails\":\"Employee\"}"
                    },
                    {
                      "details":"Feel free to test the REST API by sending 'User 2' (input2.xml) or 'User 3' (input3.xml) test messages, in a similar way to the above instructions"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Call a REST API using the RESTRequest node":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Call a REST API using the RESTRequest node",
        "shortDescription":"Learn how to use a RESTRequest node to call a REST API",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"REST Request node"
          },
          {
            "title":"Calling a REST API using the RESTRequest node"
          },
          {
            "title":"Transformation using graphical data mapping"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to use the RESTRequest Node to call a REST API."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how a RESTRequest node can be used to call REST APIs. A simple application has been created, containing a message flow which receives XML data over HTTP (using an HTTPInput node). The XML data is parsed and passed to a RESTRequest node. The RESTRequest node's properties specify where the REST API is running (in this tutorial this will be your localhost), and the Request parameter to send. The REST API implements a GET operation, in which a graphical data mapping node is used to 'retrieve' information (actually the values are hard coded in a map) about a user based on the input data."
            },
            {
              "section":"In App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An application can contain App Connect Enterprise resources, such as flows, message definitions, libraries, and JAR files. In this tutorial, an application is used to hold the message flow which contains the RESTRequest node. A referenced shared Library is used, to hold an XML schema to describe the input data and a Swagger file to describe the interface of the REST API which is invoked."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDL Schemas",
              "link":"http://github.com/DFDLSchemas",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Use the Import button to the right to import the tutorial artifacts into your workspace:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"The <b>RESTRequest_Client</b> application contains a simple message flow, which will call the REST API using a RESTRequest Node."
                    },
                    {
                      "details":"The <b>RESTRequest_SharedLibrary</b> contains resources which may be referenced by different applications or other libraries."
                    },
                    {
                      "details":"The <b>RESTRequest_API</b> has one implemented operation (GET)."
                    }
                  ]
                }
              },
              {
                "section":[
                  "Please note that the <b>RESTRequest_API</b> contains its own copy of the swagger document, which describes the REST API. The application references a separate copy of the swagger file in <b>RESTRequest_SharedLibrary</b>."
                ]
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>RESTRequest_Everything.bar</b> inside the <b>RESTRequest_Client</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>RESTRequest_Client</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/REST/getUser -d @.\\RESTRequest_client\\input1.xml</code>"
                    },
                    {
                      "details":"The input XML message structure looks like this:<br><b>&lt;User&gt;&lt;UserNumber&gt;1&lt;/UserNumber&gt;&lt;/User&gt;"
                    },
                    {
                      "details":"The output JSON message structure looks like this:<br><b>{\"userNumber\":\"1\",\"firstName\":\"Peter\",\"lastName\":\"Pan\",\"userDetails\":\"Employee\"}"
                    },
                    {
                      "details":"Feel free to test the REST API by sending 'User 2' (input2.xml) or 'User 3' (input3.xml) test messages, in a similar way to the above instructions"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Creating a very simple message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Creating a very simple message flow",
        "shortDescription":"Learn how to quickly create a very simple message flow",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"SimpleFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Creating a message flow"
          },
          {
            "title":"Testing a message flow"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Start learning some product basics with a very simple Toolkit use case",
        "outcomeList":[
          {
            "title":"Understand the concept of a message flow"
          },
          {
            "title":"Understand how to create a message flow from scratch"
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial helps you to create a message flow for the first time. Message flows are created in the IBM App Connect Enterprise Toolkit."
            },
            {
              "section":"Once you have created the flow, you will learn how to use the Toolkit to run the message flow and test it by sending data through it."
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Create the Message Flow",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"<b>Create an Application project to hold the new message flow</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Message flows are created in the Toolkit using a drag and drop editor. The actions of this editor are executed on a file which has a .msgflow extension. Saving your changes causes this file to be updated in your workspace. Before creating the message flow, you will need to create a project which will be used to store it. The Toolkit offers several different types of project which can be used to store message flows. Users who are familiar with older versions of App Connect Enterprise might be familiar with using Integration Projects for this purpose. Although these projects still exist, a better choice particularly if you are entirely new to App Connect Enterprise would be to use an Application project."
                    },
                    {
                      "details":"As is common with Eclipse based tools, there are several handy shortcuts and alternate ways to make navigation as easy as possible; but all these options will take you to the same New Application wizard. For example, if you've just launched a new workspace for the first time you will see a <span class='uicontrol'>Quick Starts</span> page with a link to <span class='uicontrol'>Start by creating an application</span>. Regardless of your starting point, you will be able to use the menus at the top of the Toolkit and select <span class='uicontrol'>File - New - Application</span>"
                    },
                    {
                      "details":"When the wizard launches, provide an Application name such as <span class='uicontrol'>ExampleApplication</span> and click Finish."
                    }
                  ]
                }
              },
              {
                "section":"<b>Create the message flow</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the Application Development view (normally in the top left corner of your Toolkit) you will see that the application has been created. Underneath <span class='uicontrol'>ExampleApplication</span>, click where it says <span class='uicontrol'>(New...)</span>. If you can't see where this is, you can also go to the top menu and choose <span class='uicontrol'>File - New - Message flow</span>. When the wizard launches, ensure that the Container selection is set to <span class='uicontrol'>ExampleApplication</span>. Note that the term Container, is just another word for project. Provide a Message Flow name such as <span class='uicontrol'>ExampleMessageFlow</span>, then click Finish."
                    },
                    {
                      "details":"<span class='uicontrol'>ExampleMessageFlow.msgflow</span> will open in an editor. The flow starts off empty, but down the left side of the flow editor you will see a palette with a large number of labelled drawers, each with its own icon. A message flow node is a processing step in a message flow. You can wire message flow nodes together to define the order of processing. Each message flow node receives a message, performs a set of actions, and typically passes on the message to the next node in the message flow."
                    },
                    {
                      "details":"Expand the HTTP drawer, and drag and drop two message flow nodes - an HTTPInput and an HTTPReply - on to the canvas. You will see four terminals on the right side of the HTTPInput message flow node. Wire the two message flow nodes together by clicking on the second terminal down (labelled <span class='uicontrol'>Out</span> if you hover over it) on the HTTPInput and then click on the HTTPReply node. If you find it easier, you could right-click on the HTTPInput node and select <span class='uicontrol'>Create connections</span> and use the menu which pops up. Save the message flow using the keyboard shortcut Ctrl-S, or from the top menu <span class='uicontrol'>File - Save</span>"
                    }
                  ]
                }
              },
              {
                "section":"<b>Edit the properties of the HTTPInput node</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"You will now see a small red cross displayed on the HTTPInput node. If you hover over it you will see an error telling you there is an unset, yet mandatory, property. To fix this, right-click on the HTTPInput node and select <span class='uicontrol'>Properties</span>. Focus will shift to the Properties tab which is found below the picture of the message flow itself, a few tabs to the left of the Tutorial Steps view where you are reading this text! Fill out the <span class='uicontrol'>Path suffix for URL</span> property with the value <span class='uicontrol'>\/ExampleMessageFlow</span> being careful to include the leading slash character. Save the message flow again and the error should be resolved and the red cross on the HTTPInput node should disappear."
                    },
                    {
                      "details":"Congratulations, you have just created your first message flow. Move to the Prepare section of the tutorial and we will prepare to test the flow."
                    }
                  ]
                }
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server to test the message flow",
            "_prepareComment":"Creating an IntegrationServer:",
            "sections":[
              {
                "section":"<b>Create an Integration Server</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Next we will test the message flow using a local integration server, which we can create from within the Toolkit. If you're using a Toolkit earlier than version 11.0.0.7, then you will need to open an App Connect Enterprise Command Console and start an integration server that way. This alternate option is detailed in the <a href='https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn03995_.html'>Knowledge Center</a>, but we will progress in this tutorial assuming you're using our most up to date Toolkit capabilities."
                    },
                    {
                      "details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class='uicontrol'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit's workspace as the work directory. Click OK to dismiss the Success dialog."
                    }
                  ]
                }
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow using the local Integration Server",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<b>Testing using the Flow Exerciser</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow you created should still be open in the main window. At the top of the flow canvas, click on the circular red record button (just to the right of the <span class='uicontrol'>Flow Exerciser</span> text) to start the Flow Exerciser. Agree to the confirmation dialog which warns that the message flow is owned by an Application, and after a few seconds the background of the flow canvas will change to a grey colour. Another confirmation dialog will appear with a Ready to record message status. Read through the information on the dialog and click Close."
                    },
                    {
                      "details":"Back at the top of the flow, click on the Send Message icon to create an input message."
                    },
                    {
                      "details":"The Send Message dialog will open with instructions for how to create an input message. Click the New button, type some text (such as the classic <b>Hello world</b> for example!) in the Main window and click Send."
                    },
                    {
                      "details":"A Progress Information dialog will appear showing the message has been sent, and a reply received. The same data should be echoed back in the reply."
                    },
                    {
                      "details":"Congratulations, you have just successfully tested your first message flow! Click on the Close button and a green line should show the path the message took between the HTTPInput and HTTPReply nodes. Use the Flow Exerciser buttons at the top of the message flow to either send more test data or to return the flow to editting mode."
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Creating an Integration Server":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Creating an Integration Server",
        "shortDescription":"Learn some basics about Integration Servers and how to use them",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"SimpleFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Creating a Standalone Integration Server"
          },
          {
            "title":"Creating Integration Servers which are owned by an Integration Node"
          },
          {
            "title":"Connecting to an Integration Server"
          },
          {
            "title":"Deploying to an Integration Server"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Learn how to use Integration Servers effectively in ACE v12",
        "outcomeList":[
          {
            "title":"Understand the use of, and concepts behind, ACE Integration Servers in v12"
          },
          {
            "title":"Understand how to create, connect to and deploy a simple flow to an Integration Server"
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"An Integration Server is used to provide an isolated runtime environment for a set of deployed message flows and resources. Each integration server runs as a unique operating system process in a separate address space. Previous versions of this software product (IBM Integration Bus v10, IBM Integration Bus v9, WebSphere Message Broker v8 etc.) have also included integration servers, but App Connect Enterprise v11 is the first version to allow Integration Server processes to be entirely stand-alone, and defined independently from an integration node. An integration node provides a higher level operating system process, as part of a wider process hierarchy, which is designed to look after the integration servers which are associated with the integration node.  In the past integration nodes have also taken on other responsibilities such as executing new deployments, configuring updates to the server processes and serving the product's administrative REST API."
            },
            {
              "section":"If you are planning to run the ACE software directly on a physical machine or within a virtual machine image, then you are advised to define Integration Servers under an Integration Node."
            },
            {
              "section":"If you are planning to run the ACE software in conjunction with a container framework such as Kubernetes or IBM Cloud Private, then it is the responsibility of this framework to ensure that the servers remain running (or are restarted appropriately) so in this situation using independent integration servers would be the better choice."
            },
            {
              "section":"Independent Integration Servers can also be very useful to quickly get up and running with ACE software, especially if you are working in a development phase of your project or trying out the product for the first time. This tutorial will demonstrate how to create an Integration Server under an Integration Node and as an independent process."
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click  <span class='uicontrol'>Import</span> and the <span class='uicontrol'>SimpleApp</span> application will be imported into your workspace."
              },
              {
                "section":"This simple application contains a message flow which simply receives HTTP data and echoes it back to the requesting client. Once we have created an Integration Server we will deploy this example flow later in the tutorial."
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare your Integration Servers",
            "_prepareComment":"Creating an IntegrationServer:",
            "sections":[
              {
                "section":"<b>Create an Integration Server</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class='uicontrol'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit's workspace as the work directory. Click OK to dismiss the Success dialog. Well done, you've just created a standalone Integration Server hosted locally on your own machine!"
                    },
                    {
                      "details":"<b>This step is only required if you are using a Toolkit earlier than version 11.0.0.7</b>. If you're using a Toolkit earlier than version 11.0.0.7, then you will not find a menu option to <span class='uicontrol'>Create a local integration server</span>. Instead, you will need to open an App Connect Enterprise Command Console and start an integration server in that console session. This alternate option is also detailed in the <a href='https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn03995_.html'>Knowledge Center</a>. Open an App Connect Enterprise Command Console and start an integration server using the following command:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code> <br>where <b>C:\\MyServer</b> is a folder on your file system that the server will use for its working directory.</li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code> <br>where <b>/home/exampleuser/MyServer</b> is a folder on your file system that the server will use for its working directory.</li></ul> After a few seconds the server should report that it has finished initialization and that its HTTP Listener has started listening for connections. Well done, you've just created a standalone Integration Server hosted locally on your own machine!"
                    }
                  ]
                }
              },
              {
                "section":"<b>Create a second Integration Server which is owned by an Integration Node</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open a new App Connect Enterprise Command Console and create an integration node using the following command:<br><code>mqsicreatebroker MyNode</code> <br>"
                    },
                    {
                      "details":"Start the Integration Node using the following command:<br><code>mqsistart MyNode</code><br>"
                    },
                    {
                      "details":"Create an Integration Server which is owned by the Integration Node using the following command:<br><code>mqsicreateexecutiongroup MyNode -e MyNodeOwnedServer</code><br>"
                    },
                    {
                      "details":"Make a note of the administration port which the Integration Node has opened using the <code>mqsilist</code> command.<br>The response should report something like:<br><code>BIP1325I: Integration node 'MyNode' with administration URI 'http://YourHostName:4414' is running.</code><br>"
                    }
                  ]
                }
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Connect your App Connect Enterprise Toolkit to your Integration Servers",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<b>Connect to the Integration Server MyServer</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<b>The steps in this section are only needed if you are using a Toolkit earlier than version 11.0.0.7.</b> If you created a local integration server in your Toolkit then it is already displayed to you without you needing to explicitly connect to it."
                    },
                    {
                      "details":"In the ACE Toolkit, find the Integration Explorer view. By default, this is located directly below the Application Development tab in the bottom left corner."
                    },
                    {
                      "details":"Right click on the <span class='uicontrol'>Integration Servers</span> label and select <span class='uicontrol'>Connect to an Integration Server</span>"
                    },
                    {
                      "details":"Enter the <span class='uicontrol'>Host Name</span> as <span class='uicontrol'>localhost</span> and the <span class='uicontrol'>port</span> as <span class='uicontrol'>7600</span>. Remember this is the '--admin-rest-api' port which was used when starting the server.  Click <span class='uicontrol'>Finish</span>"
                    },
                    {
                      "details":"Your server labelled <span class='uicontrol'>MyServer</span> should appear with a green arrow showing that the server is currently running."
                    }
                  ]
                }
              },
              {
                "section":"<b>Connect to the Integration Node MyNode</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"If you are using App Connect Enterprise v11.0.0.5 or a later fix pack, then local Integration Nodes defined on the same machine as your Toolkit will already be displayed automatically! If the runtime you are using is on a different machine to your Toolkit, or if you are on App Connect Enterprise v11.0.0.4 or earlier then you will need to follow the next three instructions to connect to an integration node."
                    },
                    {
                      "details":"Still in the Integration Explorer view in the ACE Toolkit, right click on the <span class='uicontrol'>Integration Nodes</span> label and select <span class='uicontrol'>Connect to an Integration Node</span>"
                    },
                    {
                      "details":"Enter the <span class='uicontrol'>Host Name</span> as <span class='uicontrol'>localhost</span> and the <span class='uicontrol'>port</span> number which was reported to you using the <span class='uicontrol'>mqsilist</span> command which you ran in the Prepare section."
                    },
                    {
                      "details":"Your node labelled <span class='uicontrol'>MyNode</span>, and its server labelled <span class='uicontrol'>MyNodeOwnedServer</span> should appear with green arrows showing that they are currently running."
                    }
                  ]
                }
              },
              {
                "section":"<b>Deploy a simple message flow to your server</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Locate the Broker Archive file named <span class='uicontrol'>SimpleDeploy.bar</span> inside the Application project which you imported earlier named <span class='uicontrol'>SimpleApp</span>, then drag and drop it onto your standalone server named <span class='uicontrol'>MyServer</span>."
                    },
                    {
                      "details":"Try testing the message flow SimpleFlow by sending it data using an HTTP client such as cURL: <br><code>curl -X POST http://localhost:7900/Echo -d HelloWorld</code><br>"
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Creating a Simple Unit Test":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Creating a Simple Unit Test",
        "shortDescription":"Learn how ACE unit tests help you with rapid Test Driven Development by creating and executing a simple Java Unit Test.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MyMessageFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Java Unit Testing"
          },
          {
            "title":"Test Projects"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to create a test case for a Mapping node in a message flow."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial uses a simple message flow in an application that receives an XML input message over HTTP, and converts the data into JSON using a Mapping node. The output JSON data is returned to the requesting client using an HTTPReply node. An example input message is provided."
            },
            {
              "section":"The tutorial provides the user with the message flow already constructed and describes step-by-step instructions for writing and executing a unit test for the flow. The new test is created in a Test Project (a new project type added for the first time in ACEv12) using the New Java Unit Test wizard. Once created the unit test is executed inside an independent integration server which is configured as part of the tutorial."
            },
            {
              "section":"In IBM App Connect Enterprise, a Test Project (which has a reference to the application under test) is a container for all the resources that are required to run unit tests. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing unit tests using Test Projects",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import a project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> to add the required project to your workspace:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "name":"The application named <span class='application'>MyApplication</span> will be imported into your workspace.",
                      "details":"The application named <span class='application'>MyApplication</span> will be imported into your workspace.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"<span class='application'>MyApplication</span> provides a single message flow named <span class='resource'>MyMessageFlow</span> which receives data over HTTP."
                          },
                          {
                            "details":"The HTTPInput node is configured to expect an XML message which conforms to <span class='resource'>MyModel.xsd</span> although the HTTPInput node itself is not set up to validate the message immediately."
                          },
                          {
                            "details":"The next node in the flow is a graphical mapping node which transforms the message into a JSON output."
                          },
                          {
                            "details":"The HTTPReply node at the end of the flow returns the JSON to the requester."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Now move to the Prepare tab where we describe how to create a unit test for the flow we have just imported."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create a unit test for the mapping node in the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"<span class='application'>MyApplication</span> contains <span class='application'>MyMessageFlow</span> which should already be open in your workspace:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Right-click the node in the message flow named <span class='application'>Mapping</span> and choose the menu option to <span class='application'>Create testcase</span>. The New Java Unit Test Class wizard will launch. Note that the Node Location fields will already have been populated with the name of the application, message flow, node and terminals."
                    },
                    {
                      "details":"In the section labelled <span class='application'>Input Data</span>, change the radio button selection to <span class='application'>Use data file (*.json or *.xml)</span> and then click the <span class='Application'>Browse</span> button. Select the file <span class='application'>RawInput.xml</span> from the <span class='application'>Other resources</span> section of the <span class='application'>MyApplication</span> project in your workspace. This option creates a unit test using serialized input data which you already have available. The other radio button option configures the test for using a Message Assembly file with the extension .mxml. A Message Assembly file describes the internal representation of a message as it passes through a message flow (sometimes this is also called the logical tree) but this alternative is left for exploration in another tutorial."
                    },
                    {
                      "details":"In the section labelled <span class='application'>Output Data</span>, change the radio button selection to <span class='application'>Use data file (*.json or *.xml)</span> and then click the <span class='Application'>Browse</span> button. Select the file <span class='application'>RawOutput.json</span> from the <span class='application'>Other resources</span> section of the <span class='application'>MyApplication</span> project in your workspace."
                    },
                    {
                      "details":"In the section labelled <span class='application'>Assertions and Matchers to be included in the generated test</span>, tick the option to <span class='application'>Assert output message body data</span>. You can scroll through the preview pane to see what the generated unit test will look like. Click the <span class='Application'>Finish</span> button to generate the test."
                    },
                    {
                      "details":"You will find that a Test Project named <span class='application'>MyApplication_IntegrationTest</span> is generated for you. The generated java unit test is opened for you (you can also find it in <span class='application'>MyMessageFlow_Mapping_IntegrationTest.java</span>). The project has a resources folder where your input and output data files will have been placed. The generated Test Project has a project reference configured which points the Test Project at the application <span class='application'>MyApplication</span>. On the next tab we will describe how to run the unit test you have just created."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Run the Unit Test",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the <span class='Application'>Application Development</span> view (by default in the top left of the Toolkit), locate the Test Project which you just created."
                    },
                    {
                      "details":"Right click the Test Project named <span class='Application'>MyApplication_IntegrationTest</span> and choose the option  <span class='Application'>Run as &gt; Integration Server JUnit Test Runner</span>."
                    },
                    {
                      "details":"After a few seconds, the Console view should be opened, which will show an independent integration server  being started in order to execute the unit test. There is no deployment step required - This is taken care of for you so that the application under test, and the Test Project which we just created are automatically available to the server."
                    },
                    {
                      "details":"The JUnit view will open in the top left corner (just to the right of the Application Development view and the Patterns Explorer) and will show that the test which was generated ran successfully and passed."
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to create and excute a simple Unit Test."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Unit Testing your message flow",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Exploring the Web UI":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Exploring the Web UI",
        "shortDescription":"Learn some basics about administering ACE using a Web UI",
        "durationText":"This tutorial takes approximately",
        "durationTime":"15 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Connecting to the ACE Web UI for an Integration Node"
          },
          {
            "title":"Connecting to the ACE Web UI for an Integration Server (which is defined independently from an Integration Node)"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Become familiar with the key similarities and differences in the ACE Web UI views, depending on whether you are connected to an Integration Node, or an Integration Server."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial helps you explore the App Connect Enterprise Web UI which is used for administering installations of the software product. If you are not already familiar with the concept of an Integration Node and an Integration Server, you should start by looking through another tutorial named Getting Started with ACEv12 - Creating an Integration Server, which will help explain these concepts."
            },
            {
              "section":"The App Connect Enterprise Web UI contains slightly different options depending on whether you connect to an Integration Node, or an Integration Server (which is defined independently from an Integration Node). This example uses a few simple flows to populate the WebUI enough to demonstrate the basics of it."
            },
            {
              "section":"In this tutorial you will deploy several message flows to Integration Servers (both those associated with an Integration Node and those which are independent) and you will then use the Web UI to view what has been deployed."
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, the following projects will be created in your workspace:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"The Application <span class='application'>Transformation_Map</span> provides a simple HTTP driven message flow which transforms an XML message."
                    },
                    {
                      "details":"The Integration Service <span class='application'>TemperatureConverter</span> provides an HTTP web service (based on a WSDL definition) which offers two operations for converting temperatures in celsius to fahrenheit and vice versa."
                    },
                    {
                      "details":"The REST API <span class='application'>CustomerDatabaseV1</span> provides a REST interface for managing a set of customer records."
                    }
                  ]
                }
              },
              {
                "section":"These three types of project provide examples of the main kinds of integration which users deploy to the ACE runtime. Later in the tutorial we will deploy them and view them in the Web UI. The import process also provides a Broker Archive file named <span class='application'>Everything.bar</span> inside the project named <span class='application'>BARfiles</span>"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an example ACE environment",
            "_prepareComment":"Enable resource statistics tracking:",
            "sections":[
              {
                "section":"<b>Prepare a server to host the ACE Web UI for administering an Integration Server</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open an App Connect Enterprise Command Console and create a working directory by running the mqsicreateworkdir command:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\MyServer</code></li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/MyServer</li></ul>"
                    },
                    {
                      "details":"Edit the <code>server.conf.yaml</code> file which the above command will have created in the directory <code>C:\\MyServer</code> on Windows, or <code>/home/exampleuser/MyServer</code> on UNIX. To turn on Basic Authentication for users logging in to the ACE Web UI, find the line <code>&nbsp;&nbsp;#basicAuth: true</code> and uncomment the line by removing the leading # symbol. Remember to save the <code>server.conf.yaml</code> file."
                    },
                    {
                      "details":"Use the mqsiwebuseradmin command to specify a web userid and password which will be used to login to the Web UI:<br><ul><li>If you are using a Windows platform: <code>mqsiwebuseradmin -w C:\\MyServer -c -u webuser -a password123</code></li><li>If you are using a UNIX platform: <code>mqsiwebuseradmin -w /home/exampleuser/MyServer -c -u webuser -a password123</code></li></ul>"
                    },
                    {
                      "details":"Start an integration server using the following command: <br><ul><li>If you are using a Windows platform: <code>IntegrationServer --name MyServer --work-dir C:\\MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --name MyServer --work-dir /home/exampleuser/MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li></ul>"
                    },
                    {
                      "details":"We will use a web browser to explore the Web UI in the Run section of this tutorial."
                    }
                  ]
                }
              },
              {
                "section":"<b>Prepare a server to host the ACE Web UI for administering an Integration Node</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Now create an Integration Node and create three integration servers which will be owned by it. Open a new ACE Command Console and type:<br><code>mqsicreatebroker MyNode -P 4414</code><br><code>mqsistart MyNode</code><br><code>mqsicreateexecutiongroup MyNode -e MyNodeOwnedServer1</code><br>Repeat the final command and replace the 'MyNodeOwnedServer1' to create a 'MyNodeOwnedServer2', and 'MyNodeOwnedServer3'."
                    },
                    {
                      "details":"We will use a web browser to explore the Web UI in the Run section of this tutorial."
                    }
                  ]
                }
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Explore the ACE Web UI",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open a tab in a web browser and connect to the URL <code>http://localhost:7600</code>. This will present the WebUI for your standalone integration server, which we configured to use Basic Authentication.  When challenged type the username <code>webuser</code> and password <code>password123</code>.  Log-in should succeed and you should see several tabs along the top of the page (eg Contents), and a Deploy button on the right."
                    },
                    {
                      "details":"Now we'll deploy the example BAR file using the Web UI. Click the 'Deploy' button on the right of the page. Click on 'Select a BAR file' and navigate to your toolkit's workspace. Select <code>Everything.bar</code> inside the <code>BARfiles</code> directory, and deploy it."
                    },
                    {
                      "details":"Under the Contents tab you should now see the Application called Transformation_Map, the Integration Service called TemperatureConverter and the REST API called CustomerDatabaseV1. "
                    },
                    {
                      "details":"Explore the other areas of the Web UI yourself.  Separate tutorials on the topic of Policies and Statistics are also provided in the Tutorials Gallery."
                    },
                    {
                      "details":"Open another tab in your web browser and connect to the URL <code>http://localhost:4414</code>. This will show you information about the Integration Node named MyNode, and its three servers MyNodeOwnedServer1, MyNodeOwnedServer2 and MyNodeOwnedServer3 which you created earlier. You should see a tile representing each server, which you can click into to display their content, which will be empty to start with until you deploy something, which you might like to try!"
                    },
                    {
                      "details":"In the server view of the Integration Node Web UI, on the right you will find a button labelled 'Create a Server'. You can use this option to create another integration server which is owned by the node."
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Exploring the Admin REST API":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Exploring the Admin REST API",
        "shortDescription":"Learn some basics about administering ACE using its administrative REST API",
        "durationText":"This tutorial takes approximately",
        "durationTime":"15 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Using the administrative REST API to interact with a standalone Integration Server"
          },
          {
            "title":"Using the administrative REST API to interact with an Integration Node and its child Integration Servers"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Learning how to find the administrative REST API and use its interactive features to directly invoke the API."
          },
          {
            "title":"Understand the available features of the administrative REST API"
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial shows how to find the documentation for the App Connect Enterprise administrative REST API and use it to interact with Integration Servers which are associated with an Integration Node, and those which are defined independently."
            },
            {
              "section":"We will access the documentation which is served directly from the App Connect Enterprise runtime. The tutorial will guide you through the similarities and differences depending on whether you are communicating with an Integration Node or Integration Server. Example REST API invocations will be used to accomplish some basic tasks like creation of servers, deployment of a BAR file, and viewing descriptive information about what is running."
            },
            {
              "section":"This new style of documentation introduced in App Connect Enterprise v12 is even easier to find and makes it simpler to interact with the product. "
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click Import and the <span class='application'>ExampleApp</span> application project will be imported into your workspace. It contains three message flows <span class='application'>HTTPEcho1</span>, <span class='application'>HTTPEcho2</span> and <span class='application'>HTTPEcho3</span>, and the BAR file named <span class='application'>ExampleDeploy.bar</span>."
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Enable resource statistics tracking:",
            "sections":[
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"From the Integration Explorer view in the bottom left corner of the Toolkit, right-click the Integration Servers folder and select the option to <span class='uicontrol'>Create a local integration server</span>. Leave all the options with their default values and click Finish. The local Integration Server will be started, using a project in your Toolkit's workspace as the work directory. Click OK to dismiss the Success dialog. Well done, you've just created a standalone Integration Server hosted locally on your own machine!"
                    },
                    {
                      "details":"<b>This step is only required if you are using a Toolkit earlier than version 11.0.0.7</b>. If you're using a Toolkit earlier than version 11.0.0.7, then you will not find a menu option to <span class='uicontrol'>Create a local integration server</span>. Instead, you will need to open an App Connect Enterprise Command Console and start an integration server in that console session. This alternate option is also detailed in the <a href='https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn03995_.html'>Knowledge Center</a>. Open an App Connect Enterprise Command Console and start an integration server using the following command:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code> <br>where <b>C:\\MyServer</b> is a folder on your file system that the server will use for its working directory.</li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code> <br>where <b>/home/exampleuser/MyServer</b> is a folder on your file system that the server will use for its working directory.</li></ul> After a few seconds the server should report that it has finished initialization and that its HTTP Listener has started listening for connections."
                    },
                    {
                      "details":"You can deploy the provided BAR file to your Integration Server using the Toolkit. This technique is described in several other tutorials, but to demonstrate the administrative REST API (which the App Connect Enterprise Toolkit and administrative Web UI both utilise), in this example we will deploy using the following cURL command:<br><ul><li>If you are using a Windows platform: <code>curl -X POST http://localhost:7600/apiv2/deploy --data-binary @C:\\YourToolkitWorkspace\\ExampleApp\\ExampleDeploy.bar  -H \"Content-Type: application/octet-stream\" </code> where <b>C:\\YourToolkitWorkspace</b> is the directory location of your App Connect Enterprise Toolkit's workspace.</li><li>If you are using a UNIX platform: <code>curl -X POST http://localhost:7600/apiv2/deploy --data-binary /YourToolkitWorkspace/ExampleApp/ExampleDeploy.bar</code> where <b>/YourToolkitWorkspace</b> is the directory location of your App Connect Enterprise Toolkit's workspace.</li></ul>"
                    },
                    {
                      "details":"Open up your preferred web browser and go to this URL:<br><code>http://localhost:7600/apidocs</code><br>You will be presented a page containing comprehensive documentation on the administrative REST API, which can be used to control your Integration Server."
                    },
                    {
                      "details":"Launch a separate App Connect Enterprise Command Console.  Create and start an Integration Node by typing the following commands:<br><code>mqsicreatebroker MyNode<br>&nbsp;mqsistart MyNode<br>&nbsp;mqsilist</code><br>The last mqsilist command should return a message like this:<br><code>BIP1325I: Integration node 'MyNode' with administration URI 'http://YourHostName:YourPortNumber' is running.</code> where YourHostName is your machine's hostname and YouPortNumber is an available port, starting from 4414."
                    },
                    {
                      "details":"Back in your preferred web browser, open a new tab and go to your URL which will be similar to this:<br><code>http://localhost:4414/apidocs</code><br>You will be presented a similar documentation page, however there are a few key differences in the actions provided by the administrative REST API when dealing with a node as opposed to a server, which we will explore in the Run stage of the tutorial."
                    }
                  ]
                }
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Exercise the administrative REST API",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<b>Interact with the Integration Server:</b",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the web browser tab for your Integration Server (http://localhost:7600/apidocs), on the left side you will see all the available actions in the API. In this part of the tutorial we will view the details for this server, view details about the deployed application, stop the deployed application and then start it again; all from within the interactive documentation."
                    },
                    {
                      "details":"Click on the <code>GET /apiv2</code> tab in the list of actions. The body of the docs should change to present you with all the details on this particular action. You'll be presented with the description of the action, its parameters (and their structure), example requests from different languages (curl, python etc.) and examples of the standard responses. At the top of the web page, select the 'Try it' tab."
                    },
                    {
                      "details":"Here you can run the action against your server as an example. Don't change anything from the defaults, and just click 'Send' in the bottom right. You will see the real request to your server and its response."
                    },
                    {
                      "details":"Scroll down and inspect the JSON response, and you will see a few sections:<br> - The name and type of your server at the very top<br> - A section called 'actions' which shows you all the valid actions which can be conducted on the server<br> - Further sections showing content which has been deployed to the server, such as 'applications', 'restApis', 'services' and 'policies', with details on whether they contain any further children."
                    },
                    {
                      "details":"Run a <code>GET /apiv2/applications</code> to view the currently deployed applications. You will see the application which you deployed earlier, named 'ExampleApp'"
                    },
                    {
                      "details":"Run a <code>GET /apiv2/applications/{application}</code> (changing the Application parameter to be 'ExampleApp') to view details about a particular deployed application."
                    },
                    {
                      "details":"Run a <code>POST /apiv2/applications/{application}/stop</code> (changing the Application parameter to be 'ExampleApp') to stop the ExampleApp application."
                    },
                    {
                      "details":"Run a <code>POST /apiv2/applications/{application}/start</code> (changing the Application parameter to be 'ExampleApp') to start the ExampleApp application."
                    }
                  ]
                }
              },
              {
                "section":"<b>Interact with the Integration Node:</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the web browser tab for your Integration Node (http://localhost:4414/apidocs) for your integration node, on the left side you will see all the available actions in the API. In this part of the tutorial we will create a server under the node, view the server's properties and then delete the server; all from within the interactive documentation."
                    },
                    {
                      "details":"Navigate to <code>GET /apiv2/servers</code> and proceed to the 'Try it' section. Send the request to the Integration Node and you will receive a response, showing that there are currently no child Integration Servers."
                    },
                    {
                      "details":"Navigate to <code>POST /apiv2/servers</code> and proceed to the 'Try it' section. In the Body field use the following JSON to specify the name of an integration server which will be created: <code>{\"name\":\"MyNodeOwnedServer\"}</code>. Click 'Send' and then run another <code>GET /servers</code> to see the updated list of servers."
                    },
                    {
                      "details":"Navigate to <code>GET /apiv2/servers/{server}</code> and the 'Try it' section. Copy the name <code>MyNodeOwnedServer</code> of your newly created server into the 'Path' field and click 'Send'. The response at the bottom of the page will show all the properties of the newly created server."
                    },
                    {
                      "details":"Navigate to <code>POST /apiv2/servers/{server}/stop</code> and the 'Try it' section. Copy the name <code>MyNodeOwnedServer</code> of your newly created server into the 'Path' field and click 'Send'. This may take a while, so please be patient."
                    },
                    {
                      "details":"Navigate to <code>DELETE /apiv2/servers/{server}</code> and the 'Try it' section. Input the name of the stopped server, <code>MyNodeOwnedServer</code> and click 'Send' to delete it."
                    },
                    {
                      "details":"Run one last <code>GET /apiv2/servers</code> request to check that the server has been successfully deleted."
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Policy Projects and Policies":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Policy Projects and Policies",
        "shortDescription":"Learn about configuring ACE behavior using Policies",
        "durationText":"This tutorial takes approximately",
        "durationTime":"15 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Creating a Policy Project"
          },
          {
            "title":"Creating a Policy within a Policy Project"
          },
          {
            "title":"Configuring a simple Policy"
          },
          {
            "title":"Deploying and seeing the effects of a Policy"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to create a Policy within a Policy Project, configure it and then build it into a Bar file for deployment."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how to create a simple Policy within a Policy Project. The example guides you through the creation of an Activity Log Policy which is deployed alongside a simple flow. The Activity Log Policy specifies how App Connect Enterprise should log activity associated with the deployed flow, saved directly to a local file."
            },
            {
              "section":"App Connect Enterprise v12 introduces the concept of a Policy Project which can be created in the Toolkit, and is used to hold one or more policies. Policies are used to control connection properties and operational properties which are required by the ACE runtime. A policy can be used by an administrator to override or abstract some specific property values. For example sensitive data  which might differ between runtime environments such as Dev / Test / Production."
            },
            {
              "section":"Policies can also be used to provide global properties that have wider scope than a message flow node, such as the Activity Log example in this tutorial.  To understand more about policy overrides, a separate specific tutorial on this topic has been provided."
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='application'>SimpleApp</span> application and the <span class='application'>SimplePolicyProject</span> policy project will be imported into your workspace"
              },
              {
                "section":"This simple application contains a single messageflow named <span class='application'>HTTPEcho</span> which listens for HTTP data and just echoes the same data back in response. <span class='application'>SimplePolicyProject</span> contains a single policy which is of type <span class='application'>Activity Log</span>. "
              },
              {
                "section":"Activity Log information helps you to understand what your message flows are doing by providing a high-level overview of interactions with external resources. Activity Log messages are concise and avoid technical complexity, although more information is provided in the message detail. Because the log entries are short, uncomplicated, and focused on single activities, they can be quickly scanned and understood. Patterns of behavior and changes to such patterns are easier to identify than in more extensive product trace. Activity Logs can be written to a circular file system. The ActivityLog policy is used to set up file logging if you want continuous logging of activities over a long period. In the next section we will deploy the policy and message flow and observe their behavior."
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Enable resource statistics tracking:",
            "sections":[
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open the policy named <span class='application'>MyActivityLogPolicy.policyxml</span> inside the <span class='application'>SimplePolicyProject</span>"
                    },
                    {
                      "details":"Edit the <code>File name</code> property of the policy:<br><ul><li>If you are using a Windows platform, set the <code>File name</code> property value to <code>C:\\MyServer\\ActivityLog.txt</code> and save the policy.</li><li>If you are using a UNIX platform, set the <code>File name</code> property value to <code>/MyServer/ActivityLog.txt</code> and save the policy.</li></ul>"
                    },
                    {
                      "details":"Create a Broker Archive file inside <span class='application'>SimplePolicyProject</span> named <span class='application'>SimpleDeploy.bar</span>"
                    },
                    {
                      "details":"Build the application and policy projects into the BAR file:<br> - Select the Applications radio button and select the <span class='application'>SimpleApp</span> application<br> - Select the Policies radio button and select the <span class='application'>SimplePolicyProject<br> - Click the 'Build and Save' button to generate the contents in the BAR file."
                    },
                    {
                      "details":"If you are using Toolkit version 11.0.0.7 or later, then you can exploit the option to create a local integration server to test this tutorial. However the more detailed instructions which follow, work on earlier versions as well. Open an App Connect Enterprise Command Console and create a working directory by running the mqsicreateworkdir command:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\MyServer</code></li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/MyServer</li></ul>"
                    },
                    {
                      "details":"Start an Integration Server by typing the following command into the ACE Command Console:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --name MyServer --work-dir C:\\MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --name MyServer --work-dir /home/exampleuser/MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li></ul>"
                    },
                    {
                      "details":"Connect to the Integration Server from the Integration Explorer view in the Toolkit, then drag and drop deploy the <span class='application'>SimpleDeploy.bar</span>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Creating a BAR file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/af03870_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Adding resources to a BAR file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/af03880_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Starting an integration server",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/be10140_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Follow the following steps to complete the tutorial.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Test the message flow by sending HTTP data to it using a client such as cURL:<br><code>curl -X POST http://localhost:7900/HTTPEcho -d HelloWorld</code><br>The message flow should echo back the same HelloWorld message to the HTTP client. Repeat this test a few times."
                    },
                    {
                      "details":"Navigate to the directory location which was specified when editting the Activity Log policy:<br><ul><li>If you are using a Windows platform, navigate to <code>C:\\MyServer</code> and you should see a text file with the name ActivityLog.txt</li><li>If you are using a UNIX platform, navigate to <code>/MyServer</code> and you should see a text file with the name ActivityLog.txt</li></ul>"
                    },
                    {
                      "details":"Open this file in your preferred text editor and you should see log entries formatted as comma separated data. Each log line corresponds to one of the curl requests which you just made."
                    },
                    {
                      "details":"This concludes our simple example demonstrating how to use an Activity Log Policy."
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Policy Projects and Policies with Overrides":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Policy Projects and Policies with Overrides",
        "shortDescription":"Learn about configuring ACE behavior using Policies and the hierarchy of policy overrides",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"SimpleFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Creating a Policy Project and a simple Policy"
          },
          {
            "title":"Deploying policies in a BAR file"
          },
          {
            "title":"Overriding behavior by copying policies directlty on to the runtime file system"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Learn how to use Integration Servers effectively in ACE v12",
        "outcomeList":[
          {
            "title":"Understand the use of policies in ACEv12"
          },
          {
            "title":"Understand the hierarchy of policy overrides and the concept of a default policy project"
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"App Connect Enterprise v12 introduces the concept of a Policy Project which can be created in the Toolkit, and is used to hold one or more policies. Policies are used to control connection properties and operational properties which are required by the ACE runtime."
            },
            {
              "section":"A policy can be used to provide values which override the properties of message flow nodes. This is helpful for properties which are likely to differ across different runtime environments such as Dev / Test / Production as it avoids having to change the message flow itself when promoting it between environments."
            },
            {
              "section":"A policy can be used to abstract the definition of message flow node properties which may include sensitive data that a developer (unlike an administrator) may not have access to."
            },
            {
              "section":"Policies can be used to provide global properties that have wider scope than a message flow node. For example, a user can define an Activity Log policy which defines the name of a file to which activity log records should be written."
            },
            {
              "section":"This tutorial uses a simple message flow which receives data over HTTP and sends an Email output. The EmailOutput message flow node is configured to use an SMTP Policy which is deployed using a BAR file. The tutorial demonstrates how to refer to the policy from the EMailOutput message flow node, how you can override policies, and the concept of a default policy project."
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import an application and create a policy project with an SMTP policy",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Click  <span class='uicontrol'>Import</span> and the <span class='uicontrol'>HTTPInputEmailOutput</span> application will be imported into your workspace."
                    },
                    {
                      "details":"Open the HTTPInputEmailOutput message flow and look at the EmailOutput node's properties. Note that the Basic property tab has a property named <span class='uicontrol'>SMTP Server and Port</span> which addresses <code>{MyPolicyProject}:MySMTPPolicy</code>"
                    },
                    {
                      "details":"On the Email property tab, note that the property named <span class='uicontrol'>To Addresses</span> specifies a value of <code>anyobscurenameyouwant@mailinator.com</code>. You can optionally change this if you want. This is the email address to which an email will be sent (from your SMTP email provider)"
                    },
                    {
                      "details":"On the Email property tab, change the property named <span class='uicontrol'>From Address</span> to be your email address from which you intend the email to be sent (when ACE connects to your SMTP server)"
                    },
                    {
                      "details":"Create a Policy project named <span class='uicontrol'>MyPolicyProject</span> using the New link in the top right corner of the Application Development view."
                    },
                    {
                      "details":"Create a Policy named <span class='uicontrol'>MySMTPPolicy</span> of type SMTP (click the New link which appeared inside the empty project you just created).  Set the <span class='uicontrol'>SMTP server name</span> to be your SMTP server. For example, smtp.hursley.ibm.com:25 Set the <span class='uicontrol'>Security identity</span> to be the hardcoded string <code>GoodIdentity</code> (this value will be mapped to your actual identity using the mqsisetdbparms command in the later steps)"
                    }
                  ]
                }
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create and Configure an Integration Server",
            "_prepareComment":"Creating an IntegrationServer:",
            "sections":[
              {
                "section":"",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open an App Connect Enterprise Command Console and run the mqsicreateworkdir command to prepare a work directory for an integration server:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\MyServer</code></li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/MyServer</li></ul>"
                    },
                    {
                      "details":"Run the mqsisetdbparms command to define the identity which ACE will use when communicating with your SMTP server:<br><ul><li>If you are using a Windows platform: <code>mqsisetdbparms -w C:\\MyServer -n smtp::GoodIdentity -u YourSMTPUserId -p YourSMTPPassword</code><br>where <b>C:\\MyServer</b> is a folder on your file system, created in the command above, that the server will use for its working directory.</li><li>If you are using a UNIX platform: <code>mqsisetdbparms -w /home/exampleuser/MyServer -n smtp::GoodIdentity -u YourSMTPUserId -p YourSMTPPassword</code><br>where <b>/home/exampleuser/MyServer</b> is a folder on your file system, created in the command above, that the server will use for its working directory.</li></ul>"
                    },
                    {
                      "details":"Now, start the integration server using the following command:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/MyServer --name MyServer --admin-rest-api 7600 --http-port-number 7900 --console-log</code></li></ul>"
                    },
                    {
                      "details":"After a few seconds the server should report that it has finished initialization and that its HTTP Listener has started listening for connections."
                    }
                  ]
                }
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Run three separate examples to demonstrate policy identification and overrides",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<b>Learn how the {PolicyProject}:Policy syntax can address a deployed policy</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the App Connect Enterprise Toolkit, connect to your Integration Server <span class='uicontrol'>MyServer</span> on localhost:7600. Create a Broker Archive file, for example named <span class='uicontrol'>HTTPInputEmailOutput.bar</span> inside the <span class='uicontrol'>HTTPInputEmailOutput</span> application project which you imported earlier.  Once you have created the BAR file, you need to add to it both the <span class='uicontrol'>HTTPInputEmailOutput</span> application and the <span class='uicontrol'>MyPolicyProject</span> policy project. Remember to click the <span class='uicontrol'>Build and Save</span> button on the BAR editor's prepare tab."
                    },
                    {
                      "details":"Drag and drop deploy the <span class='uicontrol'>HTTPInputEmailOutput.bar</span> BAR file onto <span class='uicontrol'>MyServer</span>."
                    },
                    {
                      "details":"Test the message flow by sending HTTP data to it using a client such as cURL: <br><code>curl -X POST http://localhost:7900/HTTPInputEmailOutput -d HelloWorld</code><br>"
                    },
                    {
                      "details":"The message flow should echo back the same message to the HTTP client, but you should find that the flow's email Output node has successfully found the SMTP policy you deployed, which in turn used the abstracted userid and password which was defined using mqsisetdbparms, and an email will have been successfully sent. Check this is the case. If you are using mailinator for this purpose, you can open the public mailbox using a web browser and a URL like this:<br><code>http://www.mailinator.com/v2/inbox.jsp?zone=public&query=anyobscurenameyouwant</code>"
                    }
                  ]
                }
              },
              {
                "section":"<b>Learn how unqualified policy names won't be resolved, if you haven't defined a default policy project</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Delete all resources which have previously been deployed. Open the HTTPInputEmailOutput message flow and on the EmailOutput node's Basic property tab edit the property named <span class='uicontrol'>SMTP Server and Port</span> to take the value <code>MySMTPPolicy</code> (so it is no longer qualified by the name of the policy project)."
                    },
                    {
                      "details":"Open the  <span class='uicontrol'>HTTPInputEmailOutput.bar</span> BAR file and click the <span class='uicontrol'>Build and Save</span> button on the BAR editor's prepare tab. Drag and drop deploy the updated BAR file."
                    },
                    {
                      "details":"Repeat the test of the message flow by sending HTTP data to it using a client such as cURL, and this time you will note that an exception is reported in the command console window where the IntegrationServer is running. This exception occurs because having deleted the Policy Project qualifier, the EmailOutput node's policy can no longer be located. In this circumstance, the <span class='uicontrol'>SMTP Server and Port</span> property has been interpreted as a literal hard-coded SMTP server hostname, which of course cannot be connected to."
                    }
                  ]
                }
              },
              {
                "section":"<b>Learn how unqualified policy names will be resolved, if you have defined a default policy project</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Delete all resources which have previously been deployed and then stop the Integration Server using CTRL-C in the command console window where it is running."
                    },
                    {
                      "details":"Look inside your integration server's work directory on the file system (at <code>C:\\MyServer</code> on Windows and at <code>/home/exampleuser/MyServer</code> on UNIX) and edit the <code>server.conf.yaml</code> file. Find this line:<br><code>  #policyProject: 'DefaultPolicies'   # Name of the Policy project that will be used for unqualified Policy references</code><br>... and change it to become ...<br><code>  policyProject: 'MyPolicyProject'   # Name of the Policy project that will be used for unqualified Policy references </code>"
                    },
                    {
                      "details":"From your App Connect Enterprise Toolkit's workspace directory on the file system, copy the <code>MyPolicyProject</code> project (which is a directory on your file system) into your Integration Server's overrides directory. If you have followed this tutorial's suggested naming conventions then this directory will end up at <code>C:\\MyTestServer\\overrides\\MyPolicyProject</code> on Windows and at <code>/home/exampleuser/MyServer/overrides/MyPolicyProject</code> on UNIX. Restart your integration server."
                    },
                    {
                      "details":"Back in the App Connect Enterprise Toolkit, create a new BAR file, for example named  <span class='uicontrol'>HTTPInputEmailOutput2.bar</span>, and build it to <strong>just</strong> contain the application <span class='uicontrol'>HTTPInputEmailOutput</span> and NOT the policy project   <span class='uicontrol'>MyPolicyProject</span>. Deploy the new BAR file."
                    },
                    {
                      "details":"Retest the message flow using cURL just as you have done before and note that it will now send the email again successfully. This has demonstrated the fact that on message flow node properties, App Connect Enterprise will look for unqualified policies in the default policy project which you can configure for your server using the server.conf.yaml file."
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Message Flow Statistics":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Message Flow Statistics",
        "shortDescription":"Learn how to view ACE performance information using Message Flow Statistics",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Finding and editing the server's configuration file"
          },
          {
            "title":"Accessing the WebUI"
          },
          {
            "title":"Viewing the message flow statistics panels"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to locate the server's configuration file, turn on message flow statistics and view them in real-time using the Web UI."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial shows how to turn on message flow statistics and then view the statistics information in real-time using the ACE administrative Web UI. This tutorial uses a simple message flow deployed to an integration server in order to demonstrate these concepts."
            },
            {
              "section":"A configuration file, known as 'server.conf.yaml', is used to control the integration server's statistics settings. In this example we will only focus on the statistics settings in this file, but many other options are available in order to control the server's configuration."
            },
            {
              "section":"Once an integration server has been created with statistics enabled, a simple flow will be deployed. A few messages will be sent to the message flow over HTTP, before launching the product's administrative Web UI where the statistics can be viewed in real-time."
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='application'>StatsApp</span> application will be imported into your workspace."
              },
              {
                "section":"This simple application contains a message flow which receives HTTP data and echoes it back to the requesting client. Once we have created an Integration Server we will deploy this example flow later in the tutorial. This flow will enable us to respond to some small load on the integration server as we view the server's performance statistics in the Web UI."
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Enable message flow statistics",
            "sections":[
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open an App Connect Enterprise Command Console and run the mqsicreateworkdir command to create a working directory which will be used to store the files which the runtime integration server needs:<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\StatsServer</code><br> where <b>C:\\StatsServer</b> will be the working directory for your integration server.</li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/StatsServer</code><br> where <b>/home/exampleuser/StatsServer</b> will be the working directory for your integration server.</li></ul>"
                    },
                    {
                      "details":"Navigate to your server's working directory (<code>C:\\StatsServer</code> in Windows and <code>/home/exampleuser/StatsServer</code> on UNIX) and locate the file <span class='uicontrol'>server.conf.yaml</span>. Open it using your preferred text editor, locate the Statistics section and edit the settings (the comments in the sample help with allowed values, and you will need to remove some # comment characters). Depending on the precise version of App Connect Enterprise v12 which you are using you will find that these settings are slightly different. In version 11.0.0.8 for example, the settings were changed to have statistics turned on by default:<br><code>Statistics:&nbsp;<br>&nbsp;&nbsp;Snapshot:&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;accountingOrigin: 'basic'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;nodeDataLevel: 'advanced'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;outputFormat: 'json'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;publicationOn: 'active'&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;threadDataLevel: 'basic'&nbsp;</code><br> Save and close the file."
                    },
                    {
                      "details":"Back in the App Connect Enterprise Command Console window, start the server:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\StatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/StatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li></ul>"
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit, locate the Integration Explorer view (by default this is located in the bottom left corner), right click on the <span class='uicontrol'>Integration Servers</span> label and select <span class='uicontrol'>Connect to an Integration Server</span>. Enter the <span class='uicontrol'>Host Name</span> as <span class='uicontrol'>localhost</span> and the <span class='uicontrol'>port</span> as <span class='uicontrol'>7600</span> and click <span class='uicontrol'>Finish</span>."
                    },
                    {
                      "details":"Locate the Broker Archive file named <span class='uicontrol'>StatsBar.bar</span> inside the Application project which you imported earlier named <span class='uicontrol'>StatsApp</span>, then drag and drop it onto your server named <span class='uicontrol'>StatsServer</span>."
                    },
                    {
                      "details":"Right click on the server in the Toolkit and select <span class='uicontrol'>Start Web User Interface</span>"
                    }
                  ]
                }
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Send some messages to the message flow and view statistics in the Web User Interface",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Navigate to a Command Prompt and run this command a handful of times:<br><code>curl -X POST http://localhost:7800/request -d HelloWorld</code><br>Each execution should receive the same fixed reply message:<br><code>{\"OutputMessage\":\"This is a fixed reply message!\"}</code>"
                    },
                    {
                      "details":"Return to the administrative WebUI for the server which you opened in the Prepare stage."
                    },
                    {
                      "details":"When you first open the WebUI you will be looking at information at the Server level. Select the <span class='uicontrol'>Flow Statistics</span> tab on the navigation bar at the top."
                    },
                    {
                      "details":"After a brief pause you should see a tabular <span class='uicontrol'>Message flow statistics</span> view which summarises activity at the flow level. Notice that the value in the <span class='uicontrol'>Total input messages</span> column corresponds to the number of curl requests you made to the server."
                    },
                    {
                      "details":"To get a more detailed view of how data is passing through your flows, change to the <span class='uicontrol'>Flow node statistics</span> view to see a breakdown for each node in the flow."
                    },
                    {
                      "details":"In both views, the message flow name links you to another page with information about the message flow. This also has a <span class='uicontrol'>Flow Statistics</span> tab which includes some graphs which you may like to explore."
                    },
                    {
                      "details":"When you're ready to conclude this tutorial, stop the Integration Server in the Command Console and close your browser."
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Getting started with ACEv12 - Resource Statistics":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Getting started with ACEv12 - Resource Statistics",
        "shortDescription":"Learn how to view ACE performance information using Resource Statistics",
        "durationText":"This tutorial takes approximately",
        "durationTime":"15 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Finding and editing the server's configuration file"
          },
          {
            "title":"Accessing the WebUI"
          },
          {
            "title":"Viewing the resource statistics graphs"
          },
          {
            "title":"Configuring the FileInput and FileOutput message flow nodes"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to locate the server's configuration file, turn on resource statistics and view them in real time using the Web UI. "
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial shows how to turn on resource statistics and then view the statistics information in real-time using the ACE administrative Web UI. This tutorial uses a message flow containing a FileInput and FileOutput message flow node to demonstrate these concepts."
            },
            {
              "section":"A configuration file, known as 'server.conf.yaml', is used to control the integration server's resource statistics settings. In this example we will only focus on the resource statistics settings in this file, but many other options are available in order to control the server's configuration. "
            },
            {
              "section":"Once an integration server has been created with resource statistics enabled, a simple message flow will be deployed and sent an input file for processing. The resource statistics regarding the file transfer inbound and outbound (statistics for Files Read, Records Read, Bytes Read, Files Created, Records Written, Bytes Written) will be viewed in real-time using the product's administrative Web UI. "
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDL Schemas",
              "link":"http://github.com/DFDLSchemas",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='application'>Import</span> and the <span class='application'>ResourceStatsApp</span> application will be imported into your workspace. The project contains a message flow named <span class='application'>FileRecordSplitter</span>, and the BAR file <span class='application'>ResourceStatsDeploy.bar</span>."
              },
              {
                "section":"The message flow is designed to read in a file, record by record, splitting the records from one another using the end of line character.  Each record contains either a JSON or XML structure. The message flow examines the first character of the line in order to decide which one it is, and routes it to the relevant FileOutput node. Each output file name is provided a number which reflects the line number of the record in the input file. This scenario lets us view varying File resource statistics in the web UI."
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Enable resource statistics tracking:",
            "sections":[
              {
                "section":"You can use resource statistics with node owned integration servers and also independent integration servers. In this tutorial we will use an independent integration server.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open an App Connect Enterprise Command Console and create a working directory for an Integration Server using the following command: :<br><ul><li>If you are using a Windows platform: <code>mqsicreateworkdir C:\\ResourceStatsServer</code><br> where <b>C:\\ResourceStatsServer</b> will be the working directory for your integration server.</li><li>If you are using a UNIX platform: <code>mqsicreateworkdir /home/exampleuser/ResourceStatsServer</code><br> where <b>/home/exampleuser/ResourceStatsServer</b> will be the working directory for your integration server.</li></ul>"
                    },
                    {
                      "details":"Navigate to your working directory and locate the file 'server.conf.yaml' (following the above suggestion, this will be <code>C:\\ResourceStatsServer</code> on Windows and <code>/home/exampleuser/ResourceStatsServer</code> on UNIX). Open it using your preferred text editor, locate the Resource Statistics section and edit the settings (the comments in the sample help with allowed values, and you may need to remove some # comment characters).  Depending on the precise version of App Connect Enterprise v12 which you are using you will find that these settings are slightly different. In version 11.0.0.8 for example, the settings were changed to have resource statistics turned on by default:<br><code>Statistics<br>&nbsp;&nbsp;Resource:<br>&nbsp;&nbsp;&nbsp;&nbsp;reportingOn: true</code><br>Save and close the file."
                    },
                    {
                      "details":"In the ACE Command Console, start an Integration Server:<br><ul><li>If you are using a Windows platform: <code>IntegrationServer --work-dir C:\\ResourceStatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li><li>If you are using a UNIX platform: <code>IntegrationServer --work-dir /home/exampleuser/ResourceStatsServer --name StatsServer --admin-rest-api 7600 --http-port-number 7800 --console-log</code></li></ul> Connect to the integration server from your Toolkit's Integration Explorer view (in the bottom left corner by default)."
                    },
                    {
                      "details":"In the Toolkit, open the message flow <span class='application'>FileRecordSplitter</span>. Examine the FileInput node properties, and on the Basic properties tab edit the <code>Input Directory</code> property to a local directory on your file system. By default this has been set to <code>C:\\ResourceStatsInput</code>, but on UNIX for example you might choose <code>/home/exampleuser/ResourceStatsInput</code>. Do the same thing for the two FileOutput nodes, whose output directory has been defaulted to <code>C:\\ResourceStatsOutput</code>, but on UNIX for example you might choose <code>/home/exampleuser/ResourceStatsOutput</code>. From the Application Development view in the Toolkit, drag and drop deploy the project <span class='application'>ResourceStatsApp</span>, to the server."
                    },
                    {
                      "details":"Right click on the server in the Toolkit and select <span class='application'>Start Web User Interface</span>."
                    }
                  ]
                }
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Follow the following steps to complete the tutorial.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open a web browser to view the Web UI for the server (http://localhost:7600) and navigate to the display of 'Resource Statistics'. For detailed navigation help, please refer to the <a href=\"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bj43320_.html\">Knowledge Center</a> tab on the top navigation bar. When statistics start to appear, view the 'File' statistics."
                    },
                    {
                      "details":"From your Toolkit workspace, look inside the <span class='application'>ResourceStatsApp</span> project and copy the provided input file <span class='application'>InputData.txt</span> and paste it into the input directory on your file system."
                    },
                    {
                      "details":"Check the output file directory, and you should find several JSON output files and several XML output files. Open these and view the contents if you wish."
                    },
                    {
                      "details":"Return to the Web UI for the server, and after a moment you should see several graphs with file statistics (such as Files Read, Records Read, Bytes Read, Files Created, Records Written, Bytes Written) begin to rise with direct correlation to the amount of data read, processed and written by the server."
                    }
                  ]
                }
              }
            ]
          }
        }
      }
    }
  },
  "Using the Java IBM Integration API - Strategic classes":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using the Java IBM Integration API - Strategic classes",
        "shortDescription":"Learn how to use the ACEv12 Java IBM Integration API's strategic com.ibm.integration.admin.proxy.* classes.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainJava",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"ACEv12 Java IBM Integration API"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use the com.ibm.integration.admin.proxy.* classes in a Java application to discover details about what's deployed to an integration server."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple java application executing stand-alone (in a JVM but outside of the ACE runtime itself). The application uses the ACEv12 Java Integration API's com.ibm.integration.admin.proxy.* classes. These classes are strategic for the ACEv12 product so should be used when writing any new administrative Java application. Separate tutorials are provided which also showcase other packages in the API."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, and provides an example application which can be deployed to the server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution.  The Java application can then be run to report information about the deployed application."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleApplication</span> and a Java project name <span class='application'>ExampleACEV11AdminProgram</span>."
              },
              {
                "section":"<span class='application'>NOTE:</span> You may see errors with the imported <span class='application'>ExampleACEV11AdminProgram</span> project, which requires some dependent jar files which it expects to find in the default installation location for ACEv11.0.0.5 on Windows. You may be on a different platform, or fix pack level, or have a system using a non-default location for the product installation. Don't be concerned - instructions are provided later on the Prepare tab to help with this."
              },
              {
                "section":"<span class='application'>ExampleApplication</span> provides a single message flow named <span class='resource'>ExampleFlow</span>. This message flow is not important - it simply provides an HTTPInput node wired to an HTTPReply. The only purpose for providing this flow is so that when the Java program is executed, there are some deployed artifacts to report on."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExampleApplication</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node owned server, deploy the message flow and inspect the Java program",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>DeployApplication.bar</span> which you will find inside the <span class='application'>ExampleApplication</span> application."
                    },
                    {
                      "details":"Inspect the provided java application. Switch to the Java perspective and then open <span class='application'>ExampleACEV11AdminProgram.java</span> which you will find inside the Java project named <span class='application'>ExampleACEV11AdminProgram</span>. If required by your runtime environment, update the values of the two variables, <span class='resource'>nodeHostName</span> and <span class='resource'>nodePortNumber</span> which enable the Java program to communicate with your integration node. Have a look through the rest of the Java."
                    },
                    {
                      "details":"Check the Java Build Path for the provided java application. Right-click the project <span class='application'>ExampleACEV11AdminProgram</span>, select <span class='application'>Properties</span> and choose the Java Build Path. You will see that the project has been configured to expect several jar files to be available from the default installation location on Windows at <span class='resource'>C:\\Program Files\\IBM\\ACE\\11.0.0.5</span>. If you are using a different platform or install location you will need to use the <span class='resource'>Remove</span> and <span class='resource'>Add External JARs</span> buttons to satisfy the required dependencies. The precise versions of these files may change in future, but at ACEv11.0.0.5 the required libraries are as follows:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"From <code>C:\\Program Files\\IBM\\ACE\\11.0.0.5\\common\\classes</code>: IntegrationAPI.jar"
                          },
                          {
                            "details":"From <code>C:\\Program Files\\IBM\\ACE\\11.0.0.5\\common\\jackson\\lib</code>: jackson-annotations-2.9.8.jar, jackson-core-2.9.8.jar, jackson-databind-2.9.8.jar, jackson-dataformat-yaml-2.9.8.jar, snakeyaml-1.23.jar"
                          },
                          {
                            "details":"From <code>C:\\Program Files\\IBM\\ACE\\11.0.0.5\\common\\jnr\\lib</code>: asm-7.0.jar, jffi-1.2.19.jar, jffi-1.2.19-native.jar, jnr-a64asm-1.0.0.jar, jnr-constants-0.9.12.jar, jnr-enxio-0.21.jar, jnr-ffi-2.1.10.jar, jnr-posix-3.0.50.jar, jnr-unixsocket-0.23.jar, jnr-x86asm-1.0.2.jar"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Run the provided Java application from within Toolkit and view the Console to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>ExampleACEV11AdminProgram.java</span> which is located inside project <span class='resource'>ExampleACEV11AdminProgram</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Right-click <span class='resource'>ExampleACEV11AdminProgram.java</span> and select <span class='resource'>Run As > Java application</span>."
                          },
                          {
                            "details":"The Console view should open at the base of the screen and as the Java application runs, you should see logging like this:<br><code>(12/08/19 12:47:54) =============================================================================================</code><br><code>(12/08/19 12:47:54) This v11 admin program shows the use of com.ibm.integration.admin.proxy.* classes (STRATEGIC)</code><br><code>(12/08/19 12:47:54) =============================================================================================</code><br><code>(12/08/19 12:47:54) Connecting to host localhost and port 4414</code><br><code>(12/08/19 12:47:55) TESTNODE is running</code><br><code>(12/08/19 12:47:55)   TESTNODE,default is running</code><br><code>(12/08/19 12:47:55)     TESTNODE,default,ExampleApplication is running</code><br><code>(12/08/19 12:47:55)       TESTNODE,default,ExampleApplication,ExampleFlow is running</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the ACEv12 Java IBM Integration API's strategic com.ibm.integration.admin.proxy.* classes to discover details about what's deployed to an integration server."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"IBM Integration API",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/be43410_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using the Java IBM Integration API - HTTP classes":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using the Java IBM Integration API - HTTP classes",
        "shortDescription":"Learn how to use the ACEv12 Java IBM Integration API's strategic com.ibm.integration.admin.http.* classes",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainJava",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"ACEv12 Java IBM Integration API"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use the com.ibm.integration.admin.http.* classes in a Java application to discover details about what's deployed to an integration server."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple java application executing stand-alone (in a JVM but outside of the ACE runtime itself). The application uses the ACEv12 Java Integration API's com.ibm.integration.admin.http.* classes. These classes are strategic for the ACEv12 product. Users may find them more generalized than the classes provided in the package com.ibm.integration.admin.proxy The proxy package provides proxy objects for each item in the ACE runtime hierarchy i.e. integration server proxy, application proxy, message flow proxy etc. The http package is structured to expect from the developer a URL (matching the ACE administrative REST API) to describe a particular resource in the ACE runtime hierarchy. Which of these approaches you prefer may vary from developer to developer. For existing IBM Integration Bus users, the proxy package approach may be most familiar. To entirely new users the http package approach may be most easily understood. It is also possible to use classes from both packages within the same program, because the com.ibm.integration.admin.model.* classes can be used to help developers parse responses to requests in both styles. Whilst this tutorial focuses on the com.ibm.integration.admin.http package, another tutorial is provided which concentrates on com.ibm.integration.admin.proxy."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, and provides an example application which can be deployed to the server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution.  The Java application can then be run to report information about the deployed application."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"IBM Integration API",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/be43410_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: A Java project name <span class='application'>ExampleACEV11AdminProgram_HTTPClient</span>."
              },
              {
                "section":"This tutorial does not provide any other example applications or message flows for deployment. The java example simply connects to an integration server and reports its properties, so no other assets are needed for this trivial example."
              },
              {
                "section":"Once imported using the link on the right, the Java program is ready to be tested. Before doing so, we will set up the runtime integration node and server, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"IBM Integration API",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/be43410_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node owned server and inspect the Java program",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e default</span></code>"
                    },
                    {
                      "details":"Inspect the provided java application. Switch to the Java perspective and then open <span class='application'>ExampleACEV11AdminProgram_HTTPClient.java</span> which you will find inside the Java project named <span class='application'>ExampleACEV11AdminProgram_HTTPClient</span>. If required by your runtime environment, update the value of the variable, <span class='resource'>nodeName</span>. By default this is set to the value <span class='resource'>TESTNODE</span> to match to the naming convention used in the instructions above. Also, note the parameter which is passed to <span class='application'>getMethod</span> in the code <code>getMethod(\"\/apiv2\/servers\/default?depth=4\")</code>. This includes the value <span class='application'>default</span> to also match the name of the Integration Server used in the instructions above. Have a look through the rest of the Java. You will see that once the initial response has been returned, the IntegrationServerModel class is used to parse the reply and make various properties of the integration server easily accessible by the code."
                    },
                    {
                      "details":"Check the Java Build Path for the provided java application. Right-click the project <span class='application'>ExampleACEV11AdminProgram_HTTPClient</span>, select <span class='application'>Properties</span> and choose the Java Build Path. You will see that the project has been configured to expect several jar files to be available from the default installation location on Windows at <span class='resource'>C:\\Program Files\\IBM\\ACE\\11.0.0.5</span>. If you are using a different platform or install location you will need to use the <span class='resource'>Remove</span> and <span class='resource'>Add External JARs</span> buttons to satisfy the required dependencies. The precise versions of these files may change in future, but at ACEv11.0.0.5 the required libraries are as follows:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"From <code>C:\\Program Files\\IBM\\ACE\\11.0.0.5\\common\\classes</code>: IntegrationAPI.jar"
                          },
                          {
                            "details":"From <code>C:\\Program Files\\IBM\\ACE\\11.0.0.5\\common\\jackson\\lib</code>: jackson-annotations-2.9.8.jar, jackson-core-2.9.8.jar, jackson-databind-2.9.8.jar, jackson-dataformat-yaml-2.9.8.jar, snakeyaml-1.23.jar"
                          },
                          {
                            "details":"From <code>C:\\Program Files\\IBM\\ACE\\11.0.0.5\\common\\jnr\\lib</code>: asm-7.0.jar, jffi-1.2.19.jar, jffi-1.2.19-native.jar, jnr-a64asm-1.0.0.jar, jnr-constants-0.9.12.jar, jnr-enxio-0.21.jar, jnr-ffi-2.1.10.jar, jnr-posix-3.0.50.jar, jnr-unixsocket-0.23.jar, jnr-x86asm-1.0.2.jar"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Run the provided Java application from within Toolkit and view the Console to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>ExampleACEV11AdminProgram_HTTPClient.java</span> which is located inside project <span class='resource'>ExampleACEV11AdminProgram_HTTPClient</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Right-click <span class='resource'>ExampleACEV11AdminProgram_HTTPClient.java</span> and select <span class='resource'>Run As > Java application</span>."
                          },
                          {
                            "details":"The Console view should open at the base of the screen and as the Java application runs, you should see logging like this:<br><code>(12/08/19 15:45:23) ==========================================================================================</code><br><code>(12/08/19 15:45:23) This v11 admin program shows the use of com.ibm.integration.admin.http classes (STRATEGIC)</code><br><code>(12/08/19 15:45:23) ==========================================================================================</code><br><code>(12/08/19 15:45:23) Connecting locally to the integration node named TESTNODE</code><br><code>(12/08/19 15:45:23) URL: /apiv2/servers/default?depth=4</code><br><code>(12/08/19 15:45:23) StatusCode: 200</code><br><code>(12/08/19 15:45:23) ReasonCode: OK</code><br><code>(12/08/19 15:45:23) BuildLevel: ib000-L190627.16880 (S000-L190627.15920)</code><br><code>(12/08/19 15:45:23) PlatformArchitecture: AMD64</code><br><code>(12/08/19 15:45:23) PlatformName: Windows 10 Enterprise</code><br><code>(12/08/19 15:45:23) PlatformVersion: 6.3 build 17763</code><br><code>(12/08/19 15:45:23) ProductName: IBM App Connect Enterprise</code><br><code>(12/08/19 15:45:23) ProductVersion: 11.0.0.5</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the ACEv12 Java IBM Integration API's strategic com.ibm.integration.admin.http.* classes to show details about an integration server."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"IBM Integration API",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/be43410_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a REST API to manage a set of records":{
    "version":"0.6",
    "pageContent":{
      "comments":"Must use underscore for en-us.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a REST API to manage a set of records",
        "shortDescription":"Learn how to use a REST API with a simple example managing a set of records.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "resourceToOpen":"CustomerDatabaseV1",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "topicList":[
          {
            "title":"IBM App Connect Enterprise REST API."
          },
          {
            "title":"Subflows."
          },
          {
            "title":"Transformation using graphical data mapping, Compute and Java Compute nodes."
          }
        ],
        "outcomesName":"Learning outcomes",
        "outcomeList":[
          {
            "title":"Understand how a REST API is defined, implemented, deployed, and invoked."
          },
          {
            "title":"Learn how to implement REST API operations by using subflows."
          },
          {
            "title":"Review how Java Compute, Compute and Mapping nodes can handle messages based on JSON objects."
          }
        ],
        "summary":{
          "comments":"",
          "overviewName":"OVERVIEW",
          "sections":[
            {
              "section":"IBM App Connect Enterprise provides a specific REST API project for developing RESTful web service implementations. These services help you define and implement a RESTful service based on the existing Swagger document. These services, which can be invoked from other standard REST or HTTP clients, allow you to send REST requests and receive responses over HTTP. This tutorial shows a simple example where a REST API service implements several functions to query and manage a sample customer registry."
            },
            {
              "section":"The REST API description allows you to view the RESTful interface that is defined in the imported Swagger document, and allows easy navigation between the REST API interface editor and the subflows that implement the interface operations. In this example, the REST API defines five operations. Each operation can be invoked by a unique combination of the URL path and HTTP method. An operation can make use of a JSON input object and URL parameters. The operations are implemented as subflows that use different transformation nodes. The nodes demonstrate how you can use ESQL, Java, or Graphical Mapping to process an incoming JSON message. The subflows also show you how to construct a response message that includes a JSON response object. You can also generate subflows to handle errors that might occur while processing the REST requests and responses."
            },
            {
              "section":"You will see how you can deploy and test the REST API on the integration node by using a REST client. As you run the example, you will see how the REST API is deployed as a single entity, which packages your solution."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using REST APIs",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Manipulating messages in the JSON domain",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc28410_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import the REST API project",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> to add a REST API project called <span class='application'>CustomerDatabaseV1</span> to your workspace."
              },
              {
                "section":"The <span class='application'>CustomerDatabaseV1</span> application consists of a REST API description and other resources, including a number of subflows. You can explore these resources later in the tutorial. The REST API description is opened in the REST API editor."
              },
              {
                "section":"Next, click the <span class='uicontrol'>Prepare</span> tab to see the steps that you complete to deploy the REST API."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using REST APIs",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "comment":"",
            "name":"Prepare",
            "heading":"Deploy the REST API",
            "sections":[
              {
                "section":"Create an integration node by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a console window, and create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span></code>"
                    },
                    {
                      "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                    },
                    {
                      "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                    }
                  ]
                }
              },
              {
                "section":"Deploy the <span class='application'>CustomerDatabaseV1</span> REST API service by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Drag and drop the <span class='application'>CustomerDatabaseV1</span> application on the integration server to deploy the REST API."
                    },
                    {
                      "details":"Check that the application deployed with no errors. Your REST API HTTP endpoints should be up and running, waiting for HTTP REST requests to arrive."
                    },
                    {
                      "details":"Find and record the Base URL of the REST API. The way to discover this information varies slightly on different installed ACE fix pack versions. In recent fix packs, find and select the deployed <span class='application'>CustomerDatabaseV1</span> REST API in the <span class='uicontrol'>Integration Explorer</span> view of the Toolkit (by default this is shown in the bottom left corner of the Toolkit), then select the <span class='uicontrol'>Properties</span> view and find the <span class='uicontrol'>REST API Base URL</span> property.<br>Alternatively, right click  your integration node in the <span class='uicontrol'>Integration Explorer</span> view of the Toolkit and choose <span class='uicontrol'>Start Web User Interface</span>. From the web page that opens, select the correct integration server, select the deployed <span class='application'>CustomerDatabaseV1</span> REST API, and find the <span class='uicontrol'>REST API Base URL</span> property. For example, the value you are looking for will be something like this: <span class='userinput'>http://localhost:7800/customerdb/v1</span>"
                    }
                  ]
                }
              },
              {
                "section":"Next, click the <span class='uicontrol'>Run</span> tab to see the steps that you complete to run the REST API."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using REST APIs",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Run the REST API",
            "sections":[
              {
                "section":"To run the REST API, you need a REST client. If you do not have a dedicated REST client, most browsers, for example Google Chrome or Mozilla Firefox, have REST client extensions or add-ons that you can install in the browser."
              },
              {
                "section":"Call the REST API from a REST client to complete the following tasks:"
              },
              {
                "section":"<b>Add a customer</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers</span><br/> where <span class='varname'>baseURL</span> is the base URL of the REST API that you found in the previous section. For example:<br/><span class='userinput'>http://localhost:7800/customerdb/v1/customers</span>"
                    },
                    {
                      "details":"For the input object, specify the customer details in the following format:<br/><code>{<br/>\"firstname\" : \"John\",<br/>\"lastname\" : \"Doe\",<br/>\"address\" : \"123 Main Street\"<br/>}</code>"
                    },
                    {
                      "details":"Select the POST method, and initiate the call. You should see the following response:<br/><span class='msgph'>A new customer with ID <span class='varname'>customerID</span> was successfully added to the database.</span>"
                    }
                  ]
                }
              },
              {
                "section":"<b>List all customers</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers</span>"
                    },
                    {
                      "details":"Select the GET method, and initiate the call. You should see a list of all the customers in the database.<br/>"
                    }
                  ]
                }
              },
              {
                "section":"<b>Get the details for a customer</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers/<span class='varname'>customerID</span></span><br/> where <span class='varname'>customerID</span> is the ID of the customer whose details you want to get. For example:<br/><span class='userinput'>http://localhost:7800/customerdb/v1/customers/3</span>"
                    },
                    {
                      "details":"Select the GET method, and initiate the call. The response should contain the details of the customer. For example:<br/><span class='msgph'>{\"id\":3,\"firstname\":\"Lyle\",\"lastname\":\"Longino\",\"address\":\"3 The Street, The Town\"}</span>"
                    }
                  ]
                }
              },
              {
                "section":"<b>Update the details for a customer</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers/<span class='varname'>customerID</span></span>"
                    },
                    {
                      "details":"For the input object, specify the customer details in the following format:<br/><code>{<br/>\"firstname\" : \"Lyle\",<br/>\"lastname\" : \"Longino\",<br/>\"address\" : \"123 New Address, New Town\"<br/>}</code><br/> Note: You must specify all fields in the customer record, not just the field that you want to update."
                    },
                    {
                      "details":"Select the PUT method, and initiate the call. You should see the following response:<br/><span class='msgph'>An existing customer with ID <span class='varname'>customerID</span> was successfully updated in the database.</span>."
                    }
                  ]
                }
              },
              {
                "section":"<b>Delete a customer</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Enter the following URL in your REST client:<br/><span class='userinput'><span class='varname'>baseURL</span>/customers/<span class='varname'>customerID</span></span>"
                    },
                    {
                      "details":"For the header, enter <code>Authorization : secr3t</code>."
                    },
                    {
                      "details":"Select the DELETE method, and initiate the call. You should see the following response:<br/><span class='msgph'>The customer with the specified ID was successfully deleted from the database.</span>."
                    }
                  ]
                }
              },
              {
                "section":"<b>The following optional steps help you explore and understand the application</b>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the Toolkit, a REST API is created from a Swagger document. To see the Swagger document that was used to create this REST API, double-click the <span class='filepath'>swagger.json</span> file under <span class='application'>CustomerDatabaseV1/Other Resources</span> in the <span class='uicontrol'>Application Development</span> view. The file is opened in a text editor."
                    },
                    {
                      "details":"When you use the Toolkit to create a REST API from a Swagger document, a REST API description is created. From the <span class='application'>CustomerDatabaseV1</span> project, open the REST API Description for the REST API  (if it is not already open). Each URL path/HTTP Method combination is mapped to a logical operation name. From each operation, you can click a link to create a subflow where the operation functionality is defined."
                    },
                    {
                      "details":"Click the <span class='uicontrol'>/customers</span> and <span class='uicontrol'>/customers/{customerId}</span> headers to expand and collapse the sections that show all the HTTP methods and operations that are defined for each URL path in this REST API."
                    },
                    {
                      "details":"Click the <span class='uicontrol'>Open the operation</span> links in the header of each operation to open the subflow that implements the operation.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"In the subflow that implements the <span class='resource'>addCustomer</span> operation, double-click the Mapping node to see the transformation of the JSON input data using a custom Java class that simulates adding a customer to the registry. Select a Custom Java element in the mapping editor, and look at the Properties view to see the class name and operation that is responsible for performing the task. Click the <span class='uicontrol'>Edit</span> button to view the Java code."
                          },
                          {
                            "details":"In the subflow that implements the <span class='resource'>getAllCustomers</span> operation, double-click the Compute node to see the ESQL code that handles the message created based on the JSON request object and creates the response message for the JSON response object."
                          },
                          {
                            "details":"In the subflow that implements the <span class='resource'>deleteCustomer</span> operation, double-click the Java Compute node to see the code that processes the REST API request and response messages."
                          }
                        ]
                      }
                    },
                    {
                      "details":"In the <span class='uicontrol'>Error Handling</span> section, click <span class='uicontrol'>Implement the Catch handler</span>, <span class='uicontrol'>Implement the Failure handler</span>, or <span class='uicontrol'>Implement the Timeout handler</span> to create and open a subflow where you can implement error handling logic."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using REST APIs",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12016_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Manipulating messages in the JSON domain",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc28410_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a HTTP Input to drive a message flow":{
    "version":"0.6",
    "pageContent":{
      "comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a HTTP Input to drive a message flow",
        "shortDescription":"Learn how to use HTTPInput and HTTPReply nodes to expose an http URL that can drive a message flow",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"HTTP Input node"
          },
          {
            "title":"JSON parsing and writing"
          },
          {
            "title":"Transformation using graphical data mapping"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Develop a message flow which handles HTTP requests"
          },
          {
            "title":"Learn how HTTP endpoints are hosted in IBM App Connect Enterprise"
          },
          {
            "title":"Learn how to map JSON documents"
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"In IBM App Connect Enterprise, you have several options on how to create an HTTP interface to external programs."
            },
            {
              "section":"If you want to use a standard interface definition, there are specialised development artefacts which simplify that process.  If you use WSDL for Web Service interactions then create an Integration Service, and if you use Swagger to define REST-style actions over a set of resources then create a REST API."
            },
            {
              "section":"However there are some http interactions which don't fit either of these categories. This tutorial shows how to create an RPC-style interaction over raw HTTP, where all requests to a particular URL are routed to a message flow for processing. In this case, the processing is a transformation step using a Mapping node."
            },
            {
              "section":"You will import the message flow to your Toolkit workspace, and send an HTTP request to the message flow by using the Flow exerciser."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Processing HTTP messages",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac56650_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click on the Import link to create and open the <span class='application'>HTTPInputApplication</span> project in your workspace. Then click on the Prepare tab to see a description of what has been imported."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Imported projects",
            "sections":[
              {
                "section":"You now have a project in your workspace called <span class='application'>HTTPInputApplication</span>, which is shown under the Application Development section of your workbench. Inside that project is one message flow called <span class='application'>HTTPInputMessageFlow</span>, which has been opened for you. There is also a mapping file called <span class='application'>HTTPInputMessageFlow_Mapping.map</span>."
              },
              {
                "section":"Look at the Properties view for the HTTP Input node. The Basic tab configures the Path suffix for URL, which forms the endpoint that is exposed by this flow. The exact URL exposed to external applications depends on the listener port which has been configured for HTTP nodes on that Integration Node. Note also that the Input Message Parsing tab has been configured with JSON, because this message flow expects to receive JSON data on that URL."
              },
              {
                "section":"Double-click on the Mapping node to show the transformation which this flow performs on its requests. The example here shows that both input and outputs are both JSON format, and the input has been modelled as containing two input fields which are mapped to two output fields of different labels. A Move transform has been used, so the data is unchanged, but the field names will change. There is no separate message model file for these input and output types; the map itself has been refined to specify these fields by adding user-defined elements under the JSONObject type."
              },
              {
                "section":"Next, you will use the Flow exerciser to deploy send an HTTP request to the message flow, and to observe the transformation. Click Run to see those steps."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Processing HTTP messages",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac56650_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"HTTP listeners",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc43700_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Creating or transforming a JSON message with a message map",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/sm12004_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The <span class='application'>HTTPInputApplication</span> application is shown in the Application Development view of your workspace.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "name":"",
                      "details":"Open the <span class='application'>HTTPInputMessageFlow</span>, and click the Flow Exerciser icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png' alt='' /> to start recording the message path through the flow."
                    },
                    {
                      "name":"",
                      "details":"Click the Send Message icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png' alt='' /> to select a message to send to the flow."
                    },
                    {
                      "name":"",
                      "details":"Choose the ExampleInputMessage1, edit the message data if you like, and click Send. Your request message is sent to the HTTP input node."
                    }
                  ]
                }
              },
              {
                "section":"After the request message is processed, the message path is automatically highlighted on the message flow."
              },
              {
                "section":"Click on any connection to see the data that passed through that connection. You can see that the request (input) message data has two fields named InputField1 and InputField2. The response (output) message has converted this to fields named OutputField1 and OutputField2."
              },
              {
                "section":"To stop recording the message path through the flow, click the Return flow to edit mode icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/stopFlowExerciser.png' alt='Return flow to edit mode' />."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Mapping node to access a Lookup table that is stored in the Global Cache":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Mapping node to access a Lookup table that is stored in the Global Cache",
        "shortDescription":"Learn how to use a Mapping node to graphically access a Lookup table that is stored in the Global Cache by exploring this simple example.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"6 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Cache Get and Cache Put transforms in a Mapping node"
          },
          {
            "title":"Global Cache"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use IBM App Connect Enterprise Mapping node Cache Get and Cache Put transforms to graphically access and load a Lookup table stored in the Global Cache.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to graphically access a Lookup table stored in the Global Cache using a Mapping node."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates graphically accessing the Global Cache. It shows the use of a Mapping node to replace an abbreviated value in a message with an associated full name from a Lookup table that is held in the Global Cache. Another Mapping node shows the loading of the Lookup table.",
          "sections":[
            {
              "section":"Note: This tutorial requires the IBM App Connect Enterprise Toolkit Version 11.0.0.4 or later and an integration node or integration server that is running IBM App Connect Enterprise Version 11.0.0.4 or later."
            },
            {
              "section":"This tutorial demonstrates how to graphically access the Global Cache in a Mapping node by using the Cache Get and Cache Put transforms."
            },
            {
              "section":"One Mapping node demonstrates the use of a Cache Get transform to replace an abbreviated value in the input message with the associated full name from a Lookup table that is in the Global Cache."
            },
            {
              "section":"Another Mapping node demonstrates the use of a Cache Put transform to populate a Lookup table in the Global Cache with data that is read from a comma-separated-values file."
            },
            {
              "section":"In IBM App Connect Enterprise, message flows can be used to transform and enrich input data structures into output data structures. Several transformation options are provided including a Mapping node, which allows the transformation and enrichment to be completed graphically. The Global Cache is a repository for data that you want to reuse regularly. The Mapping node can get, put, and remove data from the Global Cache."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions from scratch",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Data caching overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23730_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Accessing a global cache by using a Mapping node",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br26101_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Global cache scenario: Caching static data",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23732_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import the application",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='application'>Import</span> to import the application into your workspace. Note: You must have IBM App Connect Enterprise Toolkit Version 11.0.0.4 or later."
              },
              {
                "section":"The <span class='application'>LookupTable_UsingMappingGlobalCache</span> application is now shown in the Application Development view of your workspace. The <span class='msgflow'>LookupCountyFullName</span> message flow is opened in the Message Flow editor."
              },
              {
                "section":"The <span class='msgflow'>LookupCountyFullName</span> message flow contains a number of nodes:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"<span class='uicontrol'>HTTP Input</span>: An Input node that receives an input message that contains an abbreviated county name."
                    },
                    {
                      "details":"<span class='uicontrol'>LookupCountyFullName</span>: A Mapping node that accesses the global cache to interrogate the Lookup table for the full county name."
                    },
                    {
                      "details":"<span class='uicontrol'>FoundCountyFullName</span>: A Route node that determines the path that the message should take depending on whether the full county name was retrieved from the global cache."
                    },
                    {
                      "details":"<span class='uicontrol'>File Read</span>: A FileRead node that reads the file that contains the Lookup table data."
                    },
                    {
                      "details":"<span class='uicontrol'>LoadCache</span>: A Mapping node that loads the Lookup table data into the global cache."
                    },
                    {
                      "details":"<span class='uicontrol'>HTTP Reply</span>: A Reply node that returns a message that contains the full county name."
                    }
                  ]
                }
              },
              {
                "section":"You can explore the configuration of these nodes later in the tutorial."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Data caching overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23730_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Accessing a global cache by using a Mapping node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br26101_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Accessing user-defined properties from a Mapping node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br34267_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Preparing to run the application",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Perform the following steps to prepare your environment to run the <span class='application'>LookupTable_UsingMappingGlobalCache</span> application.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "name":"Enable the default Global Cache",
                      "details":"Enable the embedded global cache by copying the GlobalCache entry in the <code>basic_1_catalog_1_container\\server.conf.yaml</code> found in the <code>ace-install-directory\\server\\sample\\globalcache</code> directory into your integration server server.conf.yaml file and following the instructions in this directory. Note: The integration node or server must be running IBM App Connect Enterprise Version 11.0.0.4 or later."
                    },
                    {
                      "name":"Setup the location of the lookup table initialization data file",
                      "details":"Setup the location of the lookup table initialization data file by completing one of the following steps:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"On Windows: Create the input directory <code>C:\\temp</code>."
                          },
                          {
                            "details":"On Linux: Change the Input directory property of the 'File Read' node to a Linux path."
                          }
                        ]
                      }
                    },
                    {
                      "name":"Copy the lookup table initialization data file",
                      "details":"Copy the <span class='filepath'>CountyAbbrNames.csv</span> file from the 'Other Resources' folder in the <span class='application'>LookupTable_UsingMappingGlobalCache</span> application to the input directory that you created in step 2."
                    },
                    {
                      "details":"Drag and drop deploy the shared library <span class='application'>LookupTableCSVdata</span> on to your integration server."
                    }
                  ]
                }
              },
              {
                "section":"Next you will use the Flow exerciser to send HTTP requests to the message flow."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"FileRead node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc34090_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to run the application",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Open the <span class='uicontrol'>LookupCountyFullName</span> message flow from the application and complete the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Click the <span class='icon'>Flow Exerciser</span> icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start recording the message path through the flow."
                    },
                    {
                      "details":"Click the <span class='icon'>Send Message</span> icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> to select the first message to send to the flow."
                    },
                    {
                      "details":"Select the 'Berks' input message, and click <span class='uicontrol'>Send</span>.<br/>The request message is sent to the HTTP Input node, and the response message containing the full name, 'Berkshire', is received."
                    },
                    {
                      "details":"Close the Send message dialog. <br/>The message path is automatically highlighted on the message flow. Note: The message path shows that the message was sent through the 'File Read' and 'LoadCache' Mapping nodes. Because the Lookup table was not in the Global Cache, the 'LookupCountyFullName' Mapping node cannot find a match."
                    },
                    {
                      "details":"Click on any connection to see the data that passed through that connection."
                    },
                    {
                      "details":"Click the <span class='icon'>Send Message</span> icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> again, to select the 'Hants' message and send it to the flow by clicking <span class='uicontrol'>Send</span>."
                    },
                    {
                      "details":"Review the received message and close the Send message dialog to see the message path.<br/>Note: The message path shows that the message was sent directly to the 'HTTP Reply' node. Because the Lookup table is in the Global Cache, the 'LookupCountyFullName' Mapping node found a match and set the 'CountyFullName'."
                    }
                  ]
                }
              },
              {
                "section":"If you restart the integration node or integration server, or issue a <span class='cmdname'>mqsicacheadmin</span> command to clear the Global Cache, the next message is sent through the 'File Read' and 'LoadCache' Mapping nodes again. (For example: <code>mqsicacheadmin --admin-host localhost --admin-port 7600 -c clearGrid -m CountyAbbrNames</code>)"
              },
              {
                "section":"<span class='uicontrol'>The following optional steps help you explore and understand the application</span>"
              },
              {
                "section":"The <span class='msgflow'>LookupCountyFullName</span> message flow uses an HTTP Input node to receive a JSON message that contains a 'CountyAbbr' value. The 'CountyAbbr' value is used in the 'LookupCountyFullName' Mapping node to lookup the replacement full county name from the Global Cache.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Double click the 'LookupCountyFullName' Mapping node to open the associated Graphical Data Map that includes the 'Cache Get' transform."
                    },
                    {
                      "details":"Click the 'Local map' to enter the nested mapping. Note: The value for the input element, 'CountyAbbr', is placed in the 'Environment' so that it is not overwritten by the data that is retrieved from the <span class='filepath'>'CountyAbbrNames.csv</span> file."
                    },
                    {
                      "details":"Click the 'Cache Get' transform to enter the nested mapping for the transform and review the mapping of the 'Key' that is used to select the entry in the Lookup table. Note: 'MapName' is set by using a CustomXPath transform to configure a user-defined property."
                    },
                    {
                      "details":"Click the up arrow <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/exitNestedMapping.png' alt='' /> to exit the nested mapping, then click the 'Cache Return' transform to enter the nested mapping for the transform and review the mapping from the 'Value' that is returned from the Global Cache."
                    },
                    {
                      "details":"Click the 'Move' transform and view the Condition tab in the Properties, to see that the 'Value' element is created only if an entry is found in the Global Cache."
                    },
                    {
                      "details":"Return to the message flow editor.<br/>The 'FoundCountyFullName' Route node checks for the presence of the 'CountyFullName' value:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"If the 'CountyFullName' value exists, the message is routed directly to the 'HTTP Reply' node."
                          },
                          {
                            "details":"If the 'CountyFullName' value does not exist (for example, if the Lookup table in the Global Cache is not populated), the message is routed to the 'File Read' node. The 'File Read' node retrieves name-value pairs from a comma-separated-values file that is parsed by using a DFDL CSV model. The name-value data is passed to the 'LoadCache' Mapping node, where the data is loaded into a Lookup table in the Global Cache. The 'LoadCache' mapping node also sets the 'CountyFullName' value in the output message."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Double click the 'LoadCache' Mapping node to open and explore the map and review the use of the 'Cache Put' transform within the 'For each' transform. Note: The value of 'CountyFullName' for the current lookup request is taken directly from the data that is read from the comma-separated-values file."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"mqsicacheadmin command",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bn23783_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a JavaCompute node to split up a large input file":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a JavaCompute node to split up a large input file",
        "shortDescription":"Split a large input message into individual records by using Java transformation code, in a memory-efficient manner.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Transformation using Java"
          },
          {
            "title":"Working with files"
          },
          {
            "title":"Splitting a large message"
          }
        ],
        "outcomesName":"Learning outcomes",
        "outcomeList":[
          {
            "title":"Use Java in a message flow to transform data."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "sections":[
            {
              "section":"This tutorial demonstrates how to convert an input file that contains a single large XML document, and split it into multiple output files, one for each instance of a repeating element in that document."
            },
            {
              "section":"This implementation uses Java transformation code and avoids fully parsing the entire input file, which minimizes the amount of memory that is consumed during processing."
            }
          ]
        }
      },
      "pageSteps":{
        "concept":{
          "overview":{
            "name":"Overview",
            "heading":"Overview",
            "_overviewComment":"A short description of what this tutorial does, and what the user will do to run the tutorial.",
            "sections":[
              {
                "section":"This tutorial demonstrates how to convert an input file that contains a single large XML document, and split it into multiple output files, one for each instance of a repeating element in that document. It uses Java transformation code and avoids fully parsing the entire input file, which minimizes the amount of memory that is consumed during processing."
              },
              {
                "section":"The solution uses a JavaCompute node to process a large input XML message that contains sales data, in the form of a list of SaleList child XML elements. The input message is split into 10 individual messages by creating a new message from each SaleList child element. In this tutorial, FileInput and FileOutput nodes are used to handle the input and output messages."
              },
              {
                "section":"You will import the LargeMessages application to your Toolkit workspace, deploy it to an integration node owned server, and create a test  message in an input directory that will be processed by the flow. You will record the path taken through the message flow by using the Flow Exerciser."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Writing Java",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac30300_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55170_.htm",
                "type":"web"
              }
            ]
          }
        },
        "create":{
          "overview":{
            "comment":"",
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"The Large messaging tutorial includes one project that is imported into your workspace, and the message flow is opened in the editor."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Writing Java",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac30300_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55170_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare your development environment",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"After import, the application named <span class='application'>LargeMessages</span> will be available in your workspace, and should now be shown in the Application Development view. There is a single message flow in the application also named <span class='application'>LargeMessages</span> which should already have been opened for you. Inside the flow the FileInput node named MessageWithRepeatingElements monitors an input directory on the file system for files to process. By default, this is set to <code>C:\\temp_in</code>. The message flow also includes several FileOutput nodes which by default are set to write to <code>C:\\temp_out</code>.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "name":"",
                      "details":"Assuming you are using Windows, create the input directory <code>C:\\temp_in</code> and the output directory <code>C:\\temp_out</code> on your file system. If you are using Linux, you will need to create directories in a location of your choice, and then change the following flow node properties:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"The <span class='application'>Input directory</span> property on the <span class='application'>Basic</span> tab of the <span class='application'>MessageWithRepeatingElements</span> node."
                          },
                          {
                            "details":"The <span class='application'>Directory</span> property on the <span class='application'>Basic</span> tab of the <span class='application'>RepeatedElementSlices</span> node."
                          },
                          {
                            "details":"The <span class='application'>Directory</span> property on the <span class='application'>Basic</span> tab of the <span class='application'>MessageSlicingComplete</span> node."
                          },
                          {
                            "details":"The <span class='application'>Directory</span> property on the <span class='application'>Basic</span> tab of the <span class='application'>General Failure</span> node."
                          },
                          {
                            "details":"The <span class='application'>Directory</span> property on the <span class='application'>Basic</span> tab of the <span class='application'>Malformed messages</span> node."
                          }
                        ]
                      }
                    },
                    {
                      "details":"In the message flow, the memory-efficient record splitting is performed by the JavaCompute node labelled ProduceMessageSlicesFromRepeatingElements. You can double-click this node to see the Java code that is run."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Writing Java",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac30300_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55170_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "cleanupName":"Clean up",
          "cleanupDescription":"Clean up and remove any changes made by the tutorial.",
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The following instructions assume you have a node-owned integration server already available which you will use in conjunction with the Flow Exerciser:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the message flow editor, click the Flow Exerciser record icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png' alt='' /> to start recording the message path through the flow.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"The application is deployed to your default integration server, and the message flow is then running on your integration server and ready to process messages."
                          },
                          {
                            "details":"When the message is processed, you will see the path taken through the flow."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an input directory on your file system that matches the directory that is monitored by the MessageWithRepeatingElements node.",
                      "details":"Copy the test XML message from <code>&lt;Toolkit workspace&gt;/Large Messages/inputSalesList.xml</code> to the input directory that you created on your file system.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"The file is processed by the message flow and deleted."
                          }
                        ]
                      }
                    },
                    {
                      "details":"In the Flow Exerciser toolbar, click the View Path icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png' alt='View path' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."
                    }
                  ]
                }
              },
              {
                "section":"The input data has been split into 10 messages propagated to the Out terminal of the JavaCompute node named ProduceMessageSlicesFromRepeatingElement. You can double-click on the JavaCompute node to view the Java code that is executed to process the input message. To observe how the Java code works on the message tree, you can step through the code by using the Flow debugger while the flow processes the input message. You should observe that elements which have already been processed are freed from memory. To stop recording the message path through the flow, click the Return flow to edit mode icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/stopFlowExerciser.png' alt='Return flow to edit mode' />."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Writing Java",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac30300_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55170_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow debugger",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ag11080_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Using a ResetContentDescriptor node to associate a new parser with a message in a flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a ResetContentDescriptor node to associate a new parser with a message in a flow",
        "shortDescription":"Learn how to use the ResetContentDescriptor node to associate a new parser with a message, shown in this example of reacting to a parser exception on input to a flow.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"ResetContentDescriptor node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to re-parse messages within a flow."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a deliberately badly formed XML input message over HTTP. When the fail terminal of the HTTPInput node is triggered, a ResetContentDescriptor node is used to re-parse the input message as a BLOB (Binary Large OBject). The scenario demonstrates the ResetContentDescriptor node's ability to associate a new parser with the input message bitstream. This can be helpful in scenarios like the one demonstrated, when input data does not conform to the expected model and so down a fail / catch branch it can be reassociated with a less stringent data model and then used to generate a helpful error message for the consumer of the flow. Note that contrary to some popular misconceptions, the ResetContentDescriptor node does not change the message content, nor does it actually convert the message from one format to another."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleResetContentDescriptor</span>."
              },
              {
                "section":"<span class='application'>ExampleResetContentDescriptor</span> provides a single message flow named <span class='resource'>ResetContentDescriptor</span> which uses an HTTPInput node to receive a deliberately badly formed XML input message, which is sent down its Fail terminal. The following ResetContentDescriptor node re-associates the input message with the BLOB domain and then a Compute node takes this data and includes it within a CDATA section in a well formed XML message which is sent back to the original client as an HTTPReply at the end of the flow."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>ResetContentDescriptor.bar</span> which you will find inside the <span class='application'>ExampleResetContentDescriptor</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>ResetContentDescriptor.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"One saved input message named <span class='resource'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage</span> contains this data:<br><span class='resource'>&lt;message&gt;This message is invalid due to the closing tag&lt;message&gt;</span>"
                          },
                          {
                            "details":"Click on the reply message and you will see that it contains this data:<br><span class='resource'>&lt;Reply&gt;<br>&lt;Explanation>There was a problem doing an XML parse of the input data&lt;/Explanation&gt;<br>&lt;OriginalInput&gt;&lt;![CDATA[&lt;message&gt;This message is invalid due to the closing tag&lt;message&gt;]]&gt;&lt;/OriginalInput&gt;<br>&lt;/Reply&gt;</span>"
                          },
                          {
                            "details":"After you close the dialog, the path taken through the message flow is highlighted."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the ResetContentDescriptor node being used to associate a new parser with a message in a flow."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"ResetContentDescriptor node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04810_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a FlowOrder node to control the order of execution paths in a flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a FlowOrder node to control the order of execution paths in a flow",
        "shortDescription":"Learn how to use the FlowOrder node to control the order of execution paths in a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"FlowOrder node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to control the order of execution in a message flow."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, which contains a single data field with mixed case data. Two separate HTTPInput nodes, which are triggered using different input URLs, are used to start the flow. These inputs drive two separate paths through the flow which contrast the use of a FlowOrder node to control the order of execution paths with the random ordering which occurs if two wires are connected from the same output terminal of a node."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleFlowOrder</span>."
              },
              {
                "section":"<span class='application'>ExampleFlowOrder</span> provides a single message flow named <span class='resource'>FlowOrder</span> which provides two separate HTTPInput nodes as entry points to the flow. Both branches of the flow start by tracing the input with a Trace node and then use an HTTPReply to reply to the requestor."
              },
              {
                "section":"The <span class='resource'>/FlowOrder</span> branch of the flow then uses a FlowOrder node to execute two separate maps - the first one to lowercase the message data and the second one to uppercase the message data. Trace information is written to an output file."
              },
              {
                "section":"The <span class='resource'>/RandomOrder</span> branch of the flow does not control the order of execution of the two separate maps, so the user has no control over whether the message data is first converted to lowercase and then uppercase or vice versa. Trace information is written to an output file."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare a trace directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>FlowOrder.bar</span> which you will find inside the <span class='application'>ExampleFlowOrder</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>FlowOrder.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Two saved messages are provided so you can execute both branches of the flow and compare the results. Each message provides the same input JSON message which contains mixed case data. To try out the FlowOrder branch select the input message <span class='resource'>FlowOrder</span>. Try out the RandomOrder branch, select the input message <span class='resource'>RandomOrder</span>. Click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"Both <span class='resource'>FlowOrder</span> and <span class='resource'>RandomOrder</span> contain this data:<br><span class='resource'>{\"message\":\"This is a MiXeD case message\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the path taken through the messageflow is highlighted. Using a text editor, open the trace file <span class='resource'>C:\\temp\\TraceFlowOrder.txt</span>. If you executed the FlowOrder branch, the trace file should read like this:<br><code>2019-08-02 17:08:38.802437 = The FlowOrder path has been invoked ...</code><br><code>2019-08-02 17:08:38.806927 = The message tree is set to: 'this is a mixed case message'</code><br><code>2019-08-02 17:08:38.808863 = The message tree is set to: 'THIS IS A MIXED CASE MESSAGE'</code><br>If you executed the RandomOrder branch, then the trace file entries may or may not be the other way around(!)"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the FlowOrder node control the order of execution paths in a flow."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"FlowOrder node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04790_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Validate node to check a message against an XML schema":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Validate node to check a message against an XML schema",
        "shortDescription":"Learn how to use the Validate node to check a message against an XML schema in a message flow driven by an XML message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Validate node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to validate XML message data in a flow using an XML schema."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives an XML input message over HTTP, and checks the data against an XML schema using a Validate node. Two example input messages are provided, one which will fail validation and one which will pass validation. Graphical mapping nodes are used in both cases to construct a reply message which is returned to the requesting client using an HTTPReply node."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleValidate</span>."
              },
              {
                "section":"<span class='application'>ExampleValidate</span> provides a single message flow named <span class='resource'>Validate</span> which receives data using an HTTPInput node. This node is configured to expect an XML message which conforms to <span class='resource'>ExampleModel.xsd</span> although the HTTPInput node itself is not set up to validate the message immediately. The next node in the flow is a Validate node which checks the input XML against the XML schema. The message is sent down the Match or Failure terminal depending on whether validation passes or fails. Next the graphical mapping node generates a suitable reply which is returned using the HTTPReply node at the end of the flow."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>Validate.bar</span> which you will find inside the <span class='application'>ExampleValidate</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>Validate.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Two saved messages are provided.<br>The input message <span class='resource'>ExampleFAIL</span> contains this data:<br><span class='resource'>&lt;Message&gt;&lt;InvalidName&gt;This message will FAIL validation&lt;/InvalidName&gt;&lt;/Message&gt;</span><br>The input message <span class='resource'>ExamplePASS</span> contains this data:<br><span class='resource'>&lt;Message&gt;&lt;Child&gt;This message will PASS validation&lt;/Child&gt;&lt;/Message&gt;</span><br>Select one of these input messages and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"After you close the dialog, the path taken through the messageflow is highlighted. Try out both the input messages and note that the reply message reports the result of whether the validation passed or failed."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Validate node check a message against an XML schema."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Validate node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac20803_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Throw node to throw an exception in a message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Throw node to throw an exception in a message flow",
        "shortDescription":"Learn how to use the throw node to throw an exception and use the Compute node to navigate the resulting ExceptionList.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Throw node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to throw user exceptions and handle the ExceptionList in a message flow."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP (any valid JSON data will do in terms of the design of the flow). The next node is a Throw node which generates a user exception which can include text defined by the flow developer as a property of the Throw node. When an exception is thrown in the message flow, it is caught by the Catch terminal of the HTTPInput node and passed to a Compute node. The Compute node is used to navigate the exception list and extract human readable data for insertion into an HTTPReply. An exception list contains information about exceptions, such as error numbers, the name of the node that generated the exception, and the reason for the exception. Typically, the most interesting information in an exception list is contained in the last exception which is most nested inside the exception list structure. An ESQL procedure is provided with the tutorial that navigates to the details of the last exception and constructs the final reply message which is returned to the requesting client using an HTTPReply node."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleThrowException</span>."
              },
              {
                "section":"<span class='application'>ExampleThrowException</span> provides a single message flow named <span class='resource'>ThrowException</span> which receives data using an HTTPInput node. The next node in the flow is a Throw node which generates a user exception. The message is returned to the HTTPInput node and sent down its Catch terminal. Next the Compute node ESQL navigates through the ExceptionList structure, extracts the human readable text explaining the reason for the exception and embeds it within a suitable reply which is returned using the HTTPReply node at the end of the flow."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>ThrowException.bar</span> which you will find inside the <span class='application'>ExampleThrowException</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>ThrowException.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved message is provided.<br>The input message <span class='resource'>InputMessage</span> contains this data:<br><span class='resource'>{\"Message\": \"This can be anything\"}</span><br>Select the input message and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"After you close the dialog, the path taken through the messageflow is highlighted."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the Throw node to throw an exception and how to use the Compute node to navigate the resulting ExceptionList."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Throw node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04830_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Accessing the ExceptionList tree using ESQL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac16830_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a TryCatch node to catch an exception thrown within a section of a message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a TryCatch node to catch an exception thrown within a section of a message flow",
        "shortDescription":"Learn how to use the TryCatch node to isolate exceptions which are thrown from different parts of a message flow.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"TryCatch node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to catch user exceptions and route them using the TryCatch node in a message flow."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP. Depending on the data in the message, the flow will either throw a user exception in the Compute node which follows the HTTPInput, or allow the message to carry on through a TryCatch node before throwing an exception from a Throw node. Each branch of flow logic uses a separate Mapping node to construct a reply message which is sent back to the HTTP Requestor using the HTTPReply node. This flow layout demonstrates how a TryCatch node can be used to route the handling of user exceptions down separate branches in a flow. This can be helpful if you wish to write exception handling logic which is specific for particular kinds of exception as it avoids all exceptions flowing back to the Catch terminal of your input node."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleTryCatch</span>."
              },
              {
                "section":"<span class='application'>ExampleTryCatch</span> provides a single message flow named <span class='resource'>TryCatch</span> which receives data using an HTTPInput node. The next node in the flow is a Compute node which depending on the content of the input message will either throw a user exception, or pass the message on to the next node in the flow which is a TryCatch node. If the Compute node throws an exception then the message is returned to the HTTPInput node and sent down its Catch terminal.  Alternatively, the message is sent to the TryCatch node. The TryCatch node acts like a valve.  Initially, the input message is routed through the node unchanged to the Try terminal. If a downstream node throws an exception, like the Throw node in this example flow, the TryCatch node catches it and routes the original message to its Catch terminal. You can connect the Catch terminal to further nodes to provide error processing for the message after an exception. Each branch of flow logic uses a separate Mapping node to construct a reply message which is sent back to the HTTP Requestor using the HTTPReply node. This flow layout demonstrates how a TryCatch node can be used to route the handling of user exceptions down separate branches in a flow. This can be helpful if you wish to write exception handling logic which is specific for particular kinds of exception as it avoids all exceptions flowing back to the Catch terminal of your input node."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>TryCatch.bar</span> which you will find inside the <span class='application'>ExampleTryCatch</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>TryCatch.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Two saved messages are provided.<br>The input message <span class='resource'>Input_UseCatchOnHTTPInput</span> contains this data:<br><span class='resource'>{\"Message\": \"Use catch terminal on HTTPInput node\"}</span><br>The input message <span class='resource'>Input_UseCatchOnTryCatch</span> contains this data:<br><span class='resource'>{\"Message\": \"Use catch terminal on TryCatch node\"}</span><br>Select one of the input messages and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"After you close the dialog, the path taken through the messageflow is highlighted. Try both input messages and note how the choice of data in the input message causes each flow branch to be executed."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the TryCatch node to isolate exceptions which are thrown from different parts of a message flow."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"TryCatch node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04850_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a WorkLoad Management Policy to restrict the maximum throughput of a flow":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a WorkLoad Management Policy to restrict the maximum throughput of a flow",
        "shortDescription":"Learn how to use a Workload Management Policy to control the throughput of a message flow.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"15 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Workload Management Policies"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to use a Workload Management Policy to limit the throughput of a Message Flow."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how to use a Workload Management Policy to control the maximum throughput of a message flow. This use of a Workload Management Policy is particularly useful when backend systems that a message flow interacts with are unable to keep up with a workload sent from a requesting application."
            },
            {
              "section":"This tutorial provides a message flow that performs a simple transformation of an XML input message received over HTTP before sending a reply to the requesting application."
            },
            {
              "section":"If you are using Developer Edition, which restricts message processing to 1 message per second, or your system is unable to process messages through the flow at a rate that exceeds 1 message per second then you will not be able to observe the effects of attaching a Workload Management Policy that is demonstated by this tutorial."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDL Schemas",
              "link":"http://github.com/DFDLSchemas",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> to add the required projects to your workspace:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "name":"The application named <span class='application'>WorkloadManagementApplication</span> contains the following resources.",
                      "details":"The application named <span class='application'>WorkloadManagementApplication</span> contains the following resources.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"A message flow named <span class='msgflow'>WorkloadManagementFlow</span> that receives an HTTP message, performs a simple transformation and then sends an HTTP reply."
                          },
                          {
                            "details":"An XML input message named <span class='resource'>TestMessage.xml</span> to test the message flow with."
                          },
                          {
                            "details":"A BAR File named <span class='resource'>wlm.bar</span> which contains <span class='application'>WorkloadManagementApplication</span>, which itself contains <span class='msgflow'>WorkloadManagementFlow</span>. The message flow has been configured to refer to the Workload Management policy (which is described below)."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The policy project named <span class='application'>MyPolicies</span> contains a Workload Management Policy named <span class='application'>WLM_MaxRate_Policy</span>. To start with this policy defines a Maximum Rate (messages per second) of 100,000. Later in the tutorial we will show the impact of changing this threshold."
                    },
                    {
                      "details":"The two java projects named <span class='application'>PerfHarness</span> and <span class='application'>HTTPPerfHarness</span> jointly provide a testing capability which we will use to drive workload through the message flow."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Workload management",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bj58250_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Setting the maximum rate for a message flow",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bj58270_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"<h4>Deploy the Application, Message Flow and Workload Management Policy</h4>"
              },
              {
                "section":"This tutorial assumes you have an Integration node owned integration server, or a stand-alone integration server already created. Other tutorials in the tutorial gallery will help you with this if you're not sure what this means."
              },
              {
                "section":"To deploy the artifacts locate the provided BAR file named <span class='msgflow'>wlm.bar</span> inside the application project named <span class='application'>WorkloadManagementApplication</span>, and drag and drop it on to your integration server in the Integration Explorer view (by default shown in the bottom left corner of your Toolkit)."
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the scenario",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"To test the scenario, you will generate a workload of messages for the message flow which runs for one minute. The message processing rate will be reported. Next, you will update the Workload Management Policy and redeploy it before repeating the one minute test, which will demonstrate the message processing rate being limited."
              },
              {
                "section":"<h4>Generating a workload of messages</h4>"
              },
              {
                "section":"The PerfHarness Test Tool is a small java utility written by IBM and freely available to help you generate a workload of HTTP request messages that are processed by the <span class='msgflow'>WorkloadManagementFlow</span> message flow. The link below provides more details about the PerfHarness tool, but for simplicity the tool is already available for you to run from your Toolkit workspace using the projects you imported earlier in this tutorial:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Check the properties of your integration server to determine which port is being used by the HTTP Input node in the deployed message flow. By default this is likely to be port 7800."
                    },
                    {
                      "details":"Expand the <span class='application'>src</span> folder of the <span class='application'>PerfHarness</span> project, right-click <span class='application'>JMSPerfHarness.java</span> and choose the menu option Run As > Run Configurations. From the list, select Java Application and click the New button to create a new run configuration."
                    },
                    {
                      "details":"On the <span class='application'>Main</span> tab, check that <span class='varname'>Project = PerfHarness</span> and <span class='varname'>Main class = JMSPerfHarness</span>"
                    },
                    {
                      "details":"On the <span class='application'>Arguments</span> tab, copy and paste the following into the Program arguments text window: <code>-tc http.HTTPRequestor -rl 60 -jh localhost -jp <span class='varname'>{HTTPPort}</span> -mf <span class='varname'>{WorkspacePath}</span>/WorkloadManagementApplication/TestMessages/TestMessage.xml -wi 10 -to 10000 -sh false -ws 1 -dn 1 -sc BasicStats -ss 5 -nt 1 -ur wlm</code><br>where:<br><span class='varname'>{HTTPPort}</span> is the port the Integration Server is listening on for HTTP requests from the previous step<br><span class='varname'>{WorkspacePath}</span> is the location of your current Toolkit workspace."
                    },
                    {
                      "details":"On the <span class='application'>Classpath</span> tab, select <span class='application'>User Entries</span>, click <span class='application'>Add Projects</span>, and select the <span class='application'>HTTPPerfHarness</span> and <span class='application'>PerfHarness</span> projects"
                    },
                    {
                      "details":"When you click Run, the PerfHarness will run for 60 seconds and every 5 seconds output the message rate at which it is processing messages. The actual message rate achieved will be dependent upon the performance of your system but it needs to be in excess of 1 message per second for you to observe the effects of applying the Workload Management Policy in this tutorial."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Redeploy the Workload Management Policy with a lower rate to restrict the message throughput</h4>"
              },
              {
                "section":"Use the <span class='application'>WLM_MaxRate_Policy</span> Workload Management Policy to restrict the throughput of the <span class='msgflow'>WorkloadManagementFlow</span> message flow by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Look inside the <span class='application'>MyPolicies</span> project, open <span class='application'>WLM_MaxRate_Policy</span> and change the <span class='application'>Maximum Rate (Messages per second)</span> parameter from its current value of 100000 to the value 1."
                    },
                    {
                      "details":"Deploy the update by dragging and dropping the <span class='application'>MyPolicies</span> project on to the integration server."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Re-run the workload with the new Workload Management Policy in place</h4>"
              },
              {
                "section":"Now the Workload Management Policy has been updated, repeat the same test as before and observe that the message processing rate has now been limited to 1 message per second."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"developerWorks link to ",
                "description":"Performance testing with PerfHarness",
                "link":"https://developer.ibm.com/open/2016/05/12/performance-testing-with-perfharness/",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"PerfHarness download",
                "link":"https://github.com/ot4i/perf-harness?cm_mc_uid=42692352179214933019160&cm_mc_sid_50200000=",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a LoopBack Request node to insert data into a Cloudant database":{
    "version":"0.1",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a LoopBack Request node to insert data into a Cloudant database",
        "shortDescription":"Learn how to use the LoopBackRequest node to create a JSON document in a Cloudant database",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"LoopBackRequest node"
          },
          {
            "title":"Cloudant DB"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use a LoopBackRequest node to insert JSON documents into a Cloudant database"
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON message over HTTP, and uses a LoopBackRequest node to insert the document into a NoSQL Cloudant database. This tutorial describes how to use npm to install a LoopBack connector for Cloudant, and the required configuration to let the LoopBackRequest node locate and authenticate a connection with a Cloudant database instance running on IBM Bluemix."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Working with LoopBack Connectors",
              "description":"Working with LoopBack Connectors",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90800_.htm",
              "type":"web"
            },
            {
              "title":"More detailed LoopBackRequest node tutorial",
              "description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)",
              "link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, an application will be created in your workspace named <span class='application'>LoopBack</span>."
              },
              {
                "section":"The application <span class='application'>LoopBack</span> contains a message flow named <span class='msgflow'>LoopBack_Cloudant.msgflow</span> which contains an HTTPInput node, LoopBackRequest node and HTTPReply node."
              },
              {
                "section":"The HTTPInput node has a path suffix <code>/LoopBack_Cloudant</code>."
              },
              {
                "section":"The LoopBackRequest node has a datasource property of <code>CLOUDANT</code>, and is configured to interact with a LoopBack object named <code>share_price</code> (in our example this is the name of the Cloudant database). The <code>Create</code> operation is selected so that the JSON structure passed in to the LoopBackRequest node is inserted into the Cloudant database."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Working with LoopBack Connectors",
                "description":"Working with LoopBack Connectors",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90800_.htm",
                "type":"web"
              },
              {
                "title":"More detailed LoopBackRequest node tutorial",
                "description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)",
                "link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"",
            "_prepareComment":"A description of the required preparation steps.",
            "sections":[
              {
                "section":"<h4>Create the Cloudant Database</h4>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"This tutorial assumes the availability of a non-partitioned Cloudant database. You can use IBM Cloud to provide this (free of charge). Sign into IBM Cloud, find Cloudant in the Databases section of the Catalog, and create an instance of the Cloudant service. "
                    },
                    {
                      "details":"Navigate to the Service Credentials section. If this is a new instance of Cloudant you will need to generate some new Service credentials. If you are generating new credentials you can choose the default options. When you view the Service credentials, you will find connection details that we will be using to tell ACE how to communicate with your IBM Cloud Cloudant instance. They will look similar to the following JSON (don't be surprised if you see some additional fields listed as well - for example related to the use of IAM):<br><span class='resource'>{<br>&quot;username&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix&quot;,<br>  &quot;password&quot;: &quot;bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb&quot;,<br>  &quot;host&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix.cloudantnosqldb.appdomain.cloud&quot;,<br>  &quot;port&quot;: 443,<br>  &quot;url&quot;: &quot;https://aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix:bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb@aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix.cloudant.com&quot;<br>}</span>"
                    },
                    {
                      "details":"Switch to the Cloudant dashboard part of the service and create a database called <code>share_price</code>."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Configure the ACE LoopBack connector</h4>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"To use the LoopBackRequest node in this tutorial, you must install the Cloudant LoopBack connector. Open the App Connect Enterprise Command Console:<br><code><span class='cmdname'> cd</span> <span class='varname'> %MQSI_WORKPATH%\\node_modules </span></code><br><code><span class='cmdname'> npm install loopback-connector-cloudant </span></code>"
                    },
                    {
                      "details":"If you don't already have one, create a datasources.json file in the connectors/loopback folder of your ACE workpath (by default on Windows, this will be at C:\\ProgramData\\IBM\\MQSI\\connectors\\loopback). This is where ACE stores connection information for Loopback Request node instances."
                    },
                    {
                      "details":"Add a stanza to the datasources.json file:<br><code><span class='cmdname'> { &quot;CLOUDANT&quot;:{&quot;database&quot;: &quot;share_price&quot;,&quot;name&quot;: &quot;CLOUDANT&quot;,&quot;host&quot;: &quot;aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix.cloudantnosqldb.appdomain.cloud&quot;,&quot;port&quot;: 443,&quot;connector&quot;: &quot;cloudant&quot;}}</code>"
                    },
                    {
                      "details":"From your command console, create an integration node (if you don't already have one):<code><span class='cmdname'> mqsicreatebroker TESTNODE</span></code>"
                    },
                    {
                      "details":"From your command console, configure ACE with your Cloudant security credentials like this:<br><code><span class='cmdname'> mqsisetdbparms TESTNODE -n loopback::CLOUDANT_SEC_ID -u aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa-bluemix -p bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb </span></code>"
                    },
                    {
                      "details":"From your command console, start your node: <code><span class='cmdname'> mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"From your command console, create an integration server (if you don't already have one): <code><span class='cmdname'> mqsicreateexecutiongroup TESTNODE -e default</span></code>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Working with LoopBack Connectors",
                "description":"Working with LoopBack Connectors",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90800_.htm",
                "type":"web"
              },
              {
                "title":"More detailed LoopBackRequest node tutorial",
                "description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)",
                "link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Use the Flow Exerciser to test the tutorial scenario",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Having prepared the scenario, the following steps describe how to use the Flow Exerciser to test the message flow:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>LoopBack_Cloudant.msgflow</span>."
                    },
                    {
                      "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow"
                    },
                    {
                      "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                    },
                    {
                      "details":"Select the saved message which has been provided, named <span class='resource'>InputMessage</span>, and click Send:<br><span class='resource'>{&quot;companyID&quot;:&quot;100&quot;,&quot;company&quot;:&quot;IBM UK Ltd&quot;,&quot;price&quot;:199}</span><br>Your message is sent to the HTTPInput node."
                    },
                    {
                      "details":"A response should be shown, which now includes an id that the database has created and given to the document, which should look like this:<br><span class='resource'>{&quot;id&quot;:&quot;de28e5b037b01a3670d9b9f8d459deb5&quot;,&quot;companyID&quot;:&quot;100&quot;,&quot;company&quot;:&quot;IBM UK Ltd&quot;,&quot;price&quot;:199}</span>"
                    },
                    {
                      "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the LoopBackRequest node creating a JSON document in a Cloudant database."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Working with LoopBack Connectors",
                "description":"Working with LoopBack Connectors",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90800_.htm",
                "type":"web"
              },
              {
                "title":"More detailed LoopBackRequest node tutorial",
                "description":"More detailed LoopBackRequest node Tutorial (written for IIBv10)",
                "link":"https://developer.ibm.com/integration/blog/2016/10/13/iib-v10-0-0-6-loopback-request-node-tutorial/",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a SalesforceRequest node to retrieve records from Salesforce.com":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a SalesforceRequest node to retrieve records from Salesforce.com",
        "shortDescription":"Learn how to use the SalesforceRequest node to retrieve records from Salesforce.com.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"15 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"SalesforceRequest node"
          },
          {
            "title":"Configuring a connection to Salesforce"
          },
          {
            "title":"Mapping using JSON schema"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"An understanding of how IBM App Connect Enterprise can be used to ...",
        "outcomeList":[
          {
            "title":"An understanding of how IBM App Connect Enterprise can be used to access records in Salesforce systems."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates a simple message flow which ...",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which retrieves existing Account records from a Salesforce system using the SalesforceRequest node. The flow exposes a HTTP service which accepts some filter properties to limit the number of Account records returned. The records are returned as an array of JSON objects."
            },
            {
              "section":"The SalesforceRequest node in IBM App Connect Enterprise allows message flows to be developed that can Create, Retrieve, Update and Delete records for the different objects that exist in a Salesforce system, such as Account, Contact and Lead. Records may be retrieved by Salesforce ID, by custom external ID, or by SOQL WHERE clause. Records may be updated by Salesforce ID or by custom external ID. Records may be deleted by Salesforce ID."
            },
            {
              "section":"The SalesforceRequest node uses the Force.com REST API to exchange data with Salesforce, and so the input and output message trees for the SalesforceRequest node are in the JSON domain."
            },
            {
              "section":"Each Salesforce object is described by a JSON schema, which may be used as the input or output schema for a Mapping node. The JSON schema for Salesforce objects are provided in the server/sample/Salesforce folder of your IBM Integration Bus installation, and must be copied into a shared library or REST API project. The map using the JSON schema must reside in the same container as the schema."
            },
            {
              "section":"You will import an application and a shared library into your Toolkit workspace, configure the connection to the Salesforce system, and invoke the message flow using the Flow Exerciser."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Working with Salesforce",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90600_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='application'>Salesforce_Retrieve</span> application and <span class='library'>Salesforce_Schemas</span> shared library will be imported into your workspace."
              },
              {
                "section":"The <span class='msgflow'>Salesforce_Retrieve</span> message flow will be opened for you."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with Salesforce",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90600_.htm",
                "type":"weB"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Imported projects",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The <span class='application'>Salesforce_Retrieve</span> application and <span class='library'>Salesforce_Schemas</span> shared library are now shown in the Application Development view of your workspace."
              },
              {
                "section":"Click on the <span class='icon'>Salesforce Request</span> node in the message flow. In the Properties view, the <span class='property'>Operation</span> is <span class='userinput'>Retrieve</span> and the <span class='property'>Salesforce object</span> is <span class='userinput'>Account</span>."
              },
              {
                "section":"Change the <span class='property'>Salesforce URL</span> property to the URL of a Salesforce system to which you have access. "
              },
              {
                "section":"In order for the SalesforceRequest node to communicate with Salesforce, a Connected App must be created in the Salesforce system and a Security Identity must be created in IBM App Connect Enterprise using <span class='cmdname'>mqsisetdbparms</span>. Follow the <span class='uicontrol'>Configuring a secure connection to Salesforce.com</span> link in the <span class='uicontrol'>Find out more</span> section to perform these tasks. The Security Identity should be called <span class='resource'>sf1</span> to match the <span class='icon'>Salesforce Request</span> node property, or you can create one with your own name and update the node property.<br>If you are using a standalone integration server (where C:\\MyServer is the server's work directory) then the command will look similar to this:<br/><code><span class='cmdname'>mqsisetdbparms</span> -w C:\\MyServer -n salesforce::sf1 -u myUserID -p myPassword -c myClientIdentity -s myClientSecret</code><br/>If you are using a node-owned integration server (where TESTNODE is the name of the integration node) then the command will look similar to this:<br><code><span class='cmdname'>mqsisetdbparms</span> TESTNODE -n salesforce::sf1 -u myUserID -p myPassword -c myClientIdentity -s myClientSecret</code>"
              },
              {
                "section":"Restart your integration node (or server) for the mqsisetdbparms command to take effect."
              },
              {
                "section":"Next you will use the Flow exerciser to send HTTP requests to the message flow."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Configuring a secure connection to Salesforce.com",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90640_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with Salesforce",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90600_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Creating or transforming a JSON output message by using a JSON schema",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/sm12036_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Having set-up the required security identity, we will now deploy and test the scenario:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Drag and drop deploy the shared libarary named <span class='application'>Salesforce_Schemas</span> on to your integration server."
                    },
                    {
                      "details":"Open the <span class='msgflow'>Salesforce_Retrieve</span> message flow and click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to deploy the flow and start recording."
                    },
                    {
                      "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> to select a message to send to the flow."
                    },
                    {
                      "details":"Choose <span class='filepath'>Input.json</span>. The JSON message data contains two filter parameters, <span class='parmname'>Limit</span> and <span class='parmname'>Skip</span>. These will be set in the LocalEnvironment section used for the SalesforceRequest node, and control the number of records that are returned. Change the values if you want more than 10 records, or if you want to skip records."
                    },
                    {
                      "details":"Click Send. Your message is sent to the <span class='icon'>HTTP Input</span> node."
                    },
                    {
                      "details":"In the Progress Information dialog, click on <span class='property'>Received HTTP reply message ...</span> to view the output message from the flow. The Account records have been returned as a JSON array."
                    }
                  ]
                }
              },
              {
                "section":"After you close the dialog, the message path is automatically highlighted on the message flow. Click on any connection to see the data that passed through that connection. You can see that:",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"The <span class='icon'>Prepare Filter Map</span> node set the <span class='parmname'>Limit</span> and <span class='parmname'>Skip</span> values in the LocalEnvironment section used for the SalesforceRequest node."
                    },
                    {
                      "details":"The <span class='icon'>Salesforce Request</span> node retrieved up to the number of Account records specified by <span class='parmname'>Limit</span>  and <span class='parmname'>Skip</span>, and propagated them as a JSON array."
                    },
                    {
                      "details":"The <span class='icon'>Select Fields Map</span> node removed unwanted fields from each record in the array, using a map built from the JSON schema for the Account object."
                    }
                  ]
                }
              },
              {
                "section":"Repeat the steps above, but this time choose message <span class='filepath'>InputWithWhere.json</span>. The JSON message data additionally contains a <span class='parmname'>where</span> filter parameter, which is a Salesforce Object Query Language (SOQL) expression. This is also set in the LocalEnvironment, and further limits the returned records to those Accounts created since 1st January 2015. Change the value if you want to use an alternative SOQL expression."
              },
              {
                "section":"If the Flow Exerciser failed to deploy the projects, or the flow failed to retrieve the records from the Salesforce system, follow the <span class='uicontrol'>Resolving problems when you use Salesforce nodes</span> link in the <span class='uicontrol'>Find out more</span> section to diagnose the problem."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Resolving problems when you use Salesforce nodes",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90710_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with Salesforce",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90600_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Sequence node to inject a sequence number into a message":{
    "version":"0.1",
    "pageContent":{
      "_comments":"",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Sequence node to inject a sequence number into a message",
        "shortDescription":"Learn how to use the Sequence node to inject sequence numbers in to message data as it goes through a message flow.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Sequence node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to insert sequence numbers into messages."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives an HTTP message containing a set of employee records in a CSV format. The request body is line feed separated, with one row for each employee. Each row uses commas to separate the fields. The flow uses a Sequence node to insert a sequence number into each row. At the end of the message flow, all the data rows are added to an output file."
            },
            {
              "section":"This tutorial requires an ACE integration node (or standalone server) which is associated with a local queue manager."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for deployed resources such as message flows. This tutorial provides a single application, holding one message flow, and which references a shared library containing a DFDL message model which describes the CSV data format expected by the flow."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one application and one shared library will be created in your workspace:"
              },
              {
                "section":"The application <span class='application'>Sequence</span> contains a message flow also named <span class='application'>Sequence</span>."
              },
              {
                "section":"The shared library <span class='application'>CommaSeparatedValues</span> contains a DFDL model file named <span class='application'>csv.xsd</span>."
              },
              {
                "section":"The message flow receives an HTTP message containing a set of employee records in a CSV format. The request body is line feed separated with one row for each employee. The HTTPInput node parses the input message. The Compute node then loops over the rows and propagates them one after another to the Sequence node, which inserts a sequence number into each row before the FileOutput node writes the records to an output file. To complete the flow, a summary message stating that processing is complete is returned to the requestor by the HTTPReply node."
              },
              {
                "section":"Once you import the tutorial, the provided application is almost ready to be deployed and tested. However, before you do this, read the Prepare tab which describes preparing your deploy environment."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare to deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The message flow in this tutorial uses a sequence node, which uses MQ storage queues to hold information about the state of in-flight messages. The storage queues are owned by the queue manager that is associated with the integration node or integration server. The instructions provided below assume the use of an integration node.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create the output directory:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"The FileOutput node's Basic property tab includes a <span class='varname'>Directory</span> property which specifies where the output file should be written. This has been set to <span class='varname'>C:\\IIB_Sequence_Tutorial_Output</span> but you can change this to a value of your own choice. Create the directory on the file system of the machine where your runtime node resides."
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Drag and drop deploy the shared library named <span class='resource'>CommaSeparatedValues</span> on to your integration server in the Integration Explorer view (by default shown in the bottom left corner of your Toolkit)."
                    },
                    {
                      "details":"Open <span class='resource'>Sequence.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow"
                          },
                          {
                            "details":"Click the Send Message icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Select the saved message which has been provided, named <span class='resource'>InputMessage</span>, and click Send. The message will be sent to the HTTPInput node."
                          },
                          {
                            "details":"The pop-up dialog will show the message has been sent and a response received stating <span class='resource'>Processing complete- each row has been given a sequence number and written to the output file.</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."
                          },
                          {
                            "details":"Finally, locate the output file in the directory which you configured on the earlier Prepare step). You will see that the output file has had sequence numbers inserted at the end of each row of data:<br><span class='resource'>Department01,Smith,Robert,Brandon,1988-03-24,1<br>Department01,Johnson,John,Martin,1986-01-23,2<br>Department01,Jones,Arya,Cat,1986-02-19,3<br>Department01,Bonham,John,Henry,1948-05-31,4<br>Department01,Walters,Amanda,Louise,1966-08-01,5</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Sequence node inserting sequence numbers into messages passing through a message flow."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Sequence node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc28010_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Resequence node to reorder messages going through a flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Resequence node to reorder messages going through a flow",
        "shortDescription":"Learn how to use the Resequence node to control the sequence in which a group of incoming messages are propagated through the message flow.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Resequence node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to resequence messages through a flow"
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a file containing a set of employee records in a CSV format. The input file is line feed separated, with one row for each employee. Each row uses commas to separate the fields. The last field in each row is a sequence number. The flow uses a FileInput node to read the data rows into the flow one by one. The test data provided deliberately has the input records in the wrong order. A resequence node is used to reorder the messages into the correct sequence. At the end of the message flow, all the data rows are added to an output file."
            },
            {
              "section":"This tutorial requires an ACE integration node (or standalone server) which is associated with a local queue manager."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for deployed resources such as message flows. This tutorial provides a single application, holding one message flow, and which references a shared library containing a DFDL message model which describes the CSV data format expected by the flow."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one application and one shared library will be created in your workspace:"
              },
              {
                "section":"The application <span class='application'>Resequence</span> contains a message flow also named <span class='application'>Resequence</span>."
              },
              {
                "section":"The shared library <span class='application'>CommaSeparatedValues</span> contains a DFDL model file named <span class='application'>csv.xsd</span>."
              },
              {
                "section":"The message flow receives an input file containing a set of employee records in a CSV format. The request body is line feed separated with one row for each employee. The FileInput node reads input records from the file one row at a time. The Resequence node reorders the rows according to their sequence number and passes them to a FileOutput node which writes the records to an output file."
              },
              {
                "section":"Once you import the tutorial, the provided application is almost ready to be deployed and tested. However, before you do this, read the Prepare tab which describes preparing your deploy environment."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare to deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The message flow in this tutorial uses a resequence node, which uses MQ storage queues to hold information about the state of in-flight messages. The storage queues are owned by the queue manager that is associated with the integration node or integration server. The instructions provided below assume the use of an integration node.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create the input and output directories:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"The FileInput node's Basic property tab includes an <span class='varname'>Input Directory</span> which has been set to <span class='varname'>C:\\IIB_Resequence_Tutorial_Input</span> and the FileOutput node's Basic property tab includes a <span class='varname'>Directory</span> property which has been set to  <span class='varname'>C:\\IIB_Resequence_Tutorial_Output</span>. These directories specify where the input file should be read from, and where the output file should be written to. If you wish you can change these to a value of your own choice, for example if Windows is not your runtime platform. Create the directory on the file system of the machine where your runtime node resides."
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Drag and drop deploy the shared library named <span class='resource'>CommaSeparatedValues</span> on to your integration server in the Integration Explorer view (by default shown in the bottom left corner of your Toolkit)."
                    },
                    {
                      "details":"Open <span class='resource'>Resequence.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow"
                          },
                          {
                            "details":"A test input file <span class='resource'>input.csv</span> is provided in the Resquence application. Copy this to the input directory which you configured in the Prepare step (by default this is <span class='varname'>C:\\IIB_Resequence_Tutorial_Input</span>)."
                          },
                          {
                            "details":"Navigate to the output directory which you configured in the Prepare step (by default this is <span class='varname'>C:\\IIB_Resequence_Tutorial_Output</span>) and open the output file, <span class='resource'>output.csv</span>. You will see that the output file has the rows rearranged into the correct order based upon their sequence numbers at the end of each row of data:<br><span class='resource'>Department01,Smith,Robert,Brandon,1988-03-24,1<br>Department01,Johnson,John,Martin,1986-01-23,2<br>Department01,Jones,Arya,Cat,1986-02-19,3<br>Department01,Bonham,John,Henry,1948-05-31,4<br>Department01,Walters,Amanda,Louise,1966-08-01,5</span>"
                          },
                          {
                            "details":"Return to <span class='resource'>Resequence.msgflow</span> and click the View Path icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png' alt='' /> to see the path which the file data took through the flow. Click on the flow wires before and after the resequence node to view the message data. You will see that there is a drop down box which enables you to view the messages in the order in which they passed through the flow. Note that the order is different before and after the resequence node."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Resequence node reordering messages passing through a message flow based upon their sequence numbers."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Resequence node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc28000_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Timeout Notification node to automatically start a flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Timeout Notification node to automatically start a flow",
        "shortDescription":"Learn how to use the Timeout Notification node to automatically start a flow after a regular configurable time interval.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Timeout Notification node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to control the execution of a message flow on a timed basis."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a very simple message flow that only contains two message flow nodes. The flow is started using a Timeout Notification node which is configured to fire a flow propagation on an automatic regular basis after a fixed interval of time. The second node in the flow is a trace node which appends text to a trace file to record the time when the trace node was reached, the interval for flow propagation and the message count. After observing the flow in operation, the tutorial reconfigures the flow to use a Policy which defines the configuration of the time period interval between the flow propagations. Policies can be referred to from one or more flows, and redeployed to reconfigure the behavior of the flow."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses the Timeout Notification node which requires your integration node or server to be associated with a local queue manager, so an MQ installation is required. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleTimeoutNotification</span> and a policy project named <span class='application'>myPols</span>."
              },
              {
                "section":"<span class='application'>ExampleTimeoutNotification</span> provides a single message flow named <span class='resource'>TimeoutNotification</span>. The flow is started using a Timeout Notification node which is configured to fire a flow propagation on an automatic regular basis every 20 seconds. The second node in the flow is a trace node which appends text to a trace file which records the time when the trace node was reached, the interval for flow propagation and the message count."
              },
              {
                "section":"<span class='application'>myPols</span> is a policy project holding a single policy named <span class='resource'>T1</span>. The policy won't be used to start with, but is provided ready for the extension to the basic scenario which is described on the Run tab."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExampleTimeoutNotification</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The Trace node uses a trace directory and the Timeout Notification node requires MQ queues to operate, so execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>TimeoutNotification.bar</span> which you will find inside the <span class='application'>ExampleTimeoutNotification</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>TimeoutNotification.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"This flow does not need you to send it a message to drive it. Simply wait for about 20 seconds for a flow propagation to occur. If you are impatient, you can check the trace directory which was configured on the Prepare tab for the presence of the trace file named <code><span class='cmdname'>TraceTimeoutNotification.txt</span></code>. Once the flow has fired, the trace node should contain an entry that looks like this:<br><code>The flow propagation is from the Timeout Notification node with count number 1</code><br><code>The flow propagation has reached the Trace node at 2019-08-04 20:18:56.974640</code><br><code>The flow was started by Timeout Notification node with the identifier 'ID1'</code><br><code>The flow Timeout Notification node currently has its interval set to 20 seconds</code><br>"
                          },
                          {
                            "details":"After you close the dialog, the path taken through the messageflow is highlighted. Using a text editor, open the trace file <span class='resource'>C:\\temp\\TraceTimeoutNotification.txt</span>."
                          },
                          {
                            "details":"Next, reconfigure the TimeoutNotification node. Change the <span class='resource'>Unique Identifier</span> property to the value <span class='resource'>{myPols}:T1</span>. This means that the TimeoutNotification node will take its interval from the policy named <span class='resource'>T1</span> which resides in the policy project named <span class='resource'>myPols</span>. Drag and drop deploy the policy project named <span class='resource'>myPols</span>, and then drag and drop deploy the application <span class='application'>ExampleTimeoutNotification</span> (or do both these actions together by reconfiguring the <span class='application'>TimeoutNotification.bar</span> which you used earlier). The policy has been set up with the shorter interval of 5 seconds. You can experiment with different intervals by simply redeploying the policy project after updating the value of its property named <span class='resource'>Timeout (seconds)</span>."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Timeout Notification node automatically start a flow on a regular timed interval."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Timeout Notification node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac20802_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Timeout Control node to start a flow after an interval":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Timeout Control node to start a flow after an interval",
        "shortDescription":"Learn how to use the Timeout Control node to control timed flow starts using propagations from a Timeout Notification node.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Timeout Notification node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to control the execution of a message flow on a timed basis."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that is made from two distinct sections. The flow is started using a JSON input message over HTTP which is received by an HTTPInput node. The HTTPInput is wired to a Mapping node to construct a reply message which is returned using an HTTPReply. The HTTPInput node also drives a second branch in the message flow which uses a Compute node to configure Timeout request settings in the LocalEnvironment which control the TimeoutControl node. The TimeoutControl node introduces a delay of 30 seconds (this time period is based upon a field in the input message) before the TimeoutNotification node will fire and write some simple trace information to a file. The TimeoutControl node and the TimeoutNotification node (which are linked using an identifier property) work together to generate flow propagation events at particular times or at regular intervals. For simplicity, this scenario places the TimeoutControl and TimeoutNotification nodes in the same message flow, but they could be separated into different flows if the flows are deployed to the same integration server."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses the TimeoutControl node which requires your integration node or server to be associated with a local queue manager, so an MQ installation is required. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, a project will be created in your workspace: An application named <span class='application'>ExampleTimeoutControl</span>."
              },
              {
                "section":"<span class='application'>ExampleTimeoutControl</span> provides a single message flow named <span class='resource'>TimeoutControl</span>. The flow is started using a JSON input message over HTTP which is received by an HTTPInput node. A following Mapping node constructs a reply message which is returned using an HTTPReply. The HTTPInput node also drives a second branch in the message flow which uses a Compute node to configure Timeout request settings in the LocalEnvironment which control the TimeoutControl node. The TimeoutControl node introduces a delay of 30 seconds (this time period is based upon a field in the input message) before the TimeoutNotification node will fire and then invoke a Trace node. The trace node appends text to a trace file which records the time when the trace node was reached, the Timeout interval which was configured and the message data."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExampleTimeoutControl</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The Trace node uses a trace directory and the Timeout Control and Notification nodes require MQ queues to operate, so execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>TimeoutControl.bar</span> which you will find inside the <span class='application'>ExampleTimeoutControl</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>TimeoutControl.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved input message is provided named <span class='resource'>InputMessage_Delay30secs</span> which contains this data:<br><span class='resource'>{\"Message\":{\"Delay\":30,\"Data\":\"Hello World\"}}</span><br>Select the input message and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"You should immediately receive an HTTPReply message which looks like this:<br><span class='resource'>{\"ReplyMessage\":\"The Timeout Control message is acknowledged. The message will be propagated from the Timeout Notification node after a delay of 30 seconds\"}</span><br>When you click close, a green line should be displayed indicating the path taken by the message through the first section of the flow. The flow is designed for there to be a 30 second delay between this initial section of the flow being invoked over HTTP, and the second propagation which fires from the Timeout Notification node. If you are impatient, you can check the trace directory which was configured on the Prepare tab for the presence of the trace file named <span class='resource'>TraceTimeoutControl.txt</span>. After 30 seconds have passed, click the View Path icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/viewPath.png' alt='' /> and you should then see a second green path highlighted between the TimeoutNotification node and the Trace node."
                          },
                          {
                            "details":"Once the second part of the flow has fired, using a text editor open the trace file <span class='resource'>C:\\temp\\TraceTimeoutControl.txt</span>, which should contain an entry that looks like this:<br><code>The flow propagation controlled by the Timeout Control node has reached the Trace node at 2019-08-06 17:16:03.629563</code><br><code>The Timeout StartTime was set to '17:16:03.328807'</code><br><code>The message data was:</code><br><code>( ['json' : 0x230a3a8f270]</code><br><code>  (0x01000000:Object):Message = (</code><br><code>    (0x03000000:NameValue):Delay = 30 (INTEGER)</code><br><code>    (0x03000000:NameValue):Data  = 'Hello World' (CHARACTER)</code><br><code>  )</code><br><code>)</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Timeout Notification node automatically start a flow on a regular timed interval."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Timeout Control node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac20800_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Timeout Notification node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac20802_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Collector node to gather together messages in a flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Collector node to gather together messages in a flow",
        "shortDescription":"Learn how to use the Collector node to gather together two separate HTTP input messages which arrive in to a message flow at different times.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Collector node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to collect together messages which arrive in a message flow at different times."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that is driven from JSON input messages over HTTP which are received by two separate HTTPInput nodes. Each HTTPInput is wired directly to an HTTPReply node which echoes the same message back to the Requestor. Each HTTPInput node also drives an Input terminal of a Collector node whose role is to collect together 1 response from each input and to propagate those messages together downstream to a trace node which records the combined data in a trace file."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses the Collector node which requires your integration node or server to be associated with a local queue manager, so an MQ installation is required. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, a project will be created in your workspace: An application named <span class='application'>ExampleCollector</span>."
              },
              {
                "section":"<span class='application'>ExampleCollector</span> provides a single message flow named <span class='resource'>Collector</span>. Two HTTPInput nodes are configured to receive JSON input messages. Each HTTPInput is wired directly to an HTTPReply node which echoes the same message back to the Requestor. Each HTTPInput node is also wired to an Input terminal of a Collector node whose role is to collect together one response from each input and to then propagate those messages together downstream to a trace node which records the combined data in a trace file."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExampleCollector</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The Trace node uses a trace directory and the Collector node requires MQ queues to operate, so execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>Collector.bar</span> which you will find inside the <span class='application'>ExampleCollector</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>Collector.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved input message is provided named <span class='resource'>Input1</span> which contains this data:<br><span class='resource'>{\"Message1\":\"Hello\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. Close the dialog and a green line is shown plotting the path of the message."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> a second time."
                          },
                          {
                            "details":"A second saved input message is provided named <span class='resource'>Input2</span> which contains this data:<br><span class='resource'>{\"Message2\":\"World\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. Close the dialog and a green line is shown plotting the path of the second message. Note that after the second message, there was also a propagation out of the Collector node to the downstream trace node."
                          },
                          {
                            "details":"Once this second part of the flow has fired, using a text editor open the trace file <span class='resource'>C:\\temp\\TraceCollector_Out.txt</span>, which should contain an entry that starts like this:<br><code>The Out terminal of the Collector node has fired at 2019-08-06 20:15:11.190112</code><br><code>The combined message from the two collected messages is:</code><br><code>Hello World</code><br>... Following this, the trace also contains a listing of the logical tree structure, which includes all of the fields and headers for both input messages which are now collected together."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Collector node gather together two separate HTTP input messages which arrive in to a message flow at different times."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Collector node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac37820_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using a Java User-Defined Node which reads a User-Defined Policy":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using a Java User-Defined Node which reads a User-Defined Policy",
        "shortDescription":"Learn how to deploy user-defined nodes using a provided example which reads values from a user-defined policy (requires v11.0.0.5 or higher).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"User-defined nodes"
          },
          {
            "title":"User-defined policies"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use a Java user-defined node to query values from a user-defined policy."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates user-defined policies and Java user-defined nodes. The source code for the user-defined node (both the Eclipse plugin and the runtime plugin) is provided as well as a built PAR (plugin archive) file. The tutorial describes where to place the runtime package and how to reference it from an integration node owned server. The user-defined node's properties specify the name of a property of a user-defined policy, and the policy project in which it resides. An application is provided which contains a single message flow driven by an HTTP input. The next node in the flow is an instance of the user-defined node which reads the prescribed property from the user-defined policy and reports it back in an HTTP reply."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, which will be created and configured as part of the tutorial's instructions."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, four projects will be created in your workspace: An application named <span class='application'>ExampleAppUsingUDN</span>, a policy project named <span class='application'>ExampleUserDefinedPolicyProject</span>, a User-Defined Node project named <span class='application'>PolicyQuery</span> and a Java project named <span class='application'>PolicyQueryImpl</span>."
              },
              {
                "section":"The User-Defined Node project <span class='application'>PolicyQuery</span> provides the files describing the toolkit part of the user-defined node. Its files provide the icons for the node and describe the names of its properties and terminals. The Java project <span class='application'>PolicyQueryImpl</span> contains code for the implementation of the runtime of the node. The code provides getters and setters for the node properties and the main evaluate method is found inside <span class='application'>PolicyQueryNode.java</span>. The other two projects provide an example message flow (in <span class='application'>ExampleUserDefinedPolicyProject</span>) and policy(in <span class='application'>ExampleUserDefinedPolicyProject</span>) which can be used to test the user-defined node implementation."
              },
              {
                "section":"Once imported using the link on the right, the application named <span class='application'>ExampleAppUsingUDN</span> is ready to be deployed and tested. Before doing so, the instructions on the Prepare tab describe how to set up the runtime with the code for the user-defined node."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node owned server, configure it with the User-defined node and then deploy a flow to test it",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps which assume a Windows platform:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Inside <span class='application'>PolicyQueryImpl</span> you will find the built node as a plugin archive named <span class='application'>PolicyQuery.par</span>. This file needs to be made available to the ACE runtime. Copy the file to a directory named <span class='application'>C:\\temp\\ExampleLilPath</span>. Next, open the runtime integration node's configuration file (node.conf.yaml) which you will find in the ACE workpath. By default this will be at location <span class='application'>C:\\ProgramData\\IBM\\MQSI\\components\\TESTNODE</span>.Edit the node.conf.yaml by uncommenting the line shown below, and specifying the directory where you just copied your par file:<br><code>lilPath: 'C:\\temp\\ExampleLilPath'                 # A list of paths from where User-defined node LIL/JAR files are loaded. (multiple directories are separated by platform path separator)</code><br>Restart the integration node."
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>AppUsingUDN.bar</span> which you will find inside the <span class='application'>ExampleAppUsingUDN</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>ExampleFlowUsingUDN.msgflow</span>",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"You will see red crosses showing problems in the flow because at this stage your Toolkit won't know anything about the user-defined node."
                          },
                          {
                            "details":"Right click the <span class='resource'>PolicyQuery</span> User-defined node project, and select the option <span class='resource'>Start simulation</span> which will cause the Toolkit to load the user-defined node plugin. In the message flow, the instance of the PolicyQuery user-defined node will now be showing with its correct icon and the red crosses will have been resolved."
                          },
                          {
                            "details":"At the top of the message flow, click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to deploy and start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Once the flow has deployed, click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"One saved input message named <span class='resource'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage</span> contains this data:<br><span class='resource'>This can be anything</span>"
                          },
                          {
                            "details":"Click on the reply message and you will see that it contains this data:<br><span class='resource'>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br>&lt;ResponseMessage&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicyProject&gt;ExampleUserDefinedPolicyProject&lt;/UserDefinedPolicyProject&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicy&gt;ExampleUserDefinedPolicy&lt;/UserDefinedPolicy&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicyProperty&gt;Property2&lt;/UserDefinedPolicyProperty&gt;<br>&nbsp;&nbsp;&lt;UserDefinedPolicyPropertyValue&gt;ValueOfTwo&lt;/UserDefinedPolicyPropertyValue&gt;<br>&lt;/ResponseMessage&gt;</span>"
                          },
                          {
                            "details":"After you close the dialog, the path taken through the message flow is highlighted."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to deploy user-defined nodes using a provided example which reads values from a user-defined policy."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"User-defined nodes",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/as37475_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using the KafkaProducer and KafkaConsumer nodes with a Kafka topic":{
    "version":"0.6",
    "pageContent":{
      "_comments":"KAFKA object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using the KafkaProducer and KafkaConsumer nodes with a Kafka topic",
        "shortDescription":"Learn how to use a KafkaProducer and KafkaConsumer node to produce and consume messages using a Kafka topic.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"KafkaProducer and KafkaConsumer nodes etc"
          },
          {
            "title":"Produce a topic message"
          },
          {
            "title":"Consume a topic message"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to produce and consume messages using the KafkaProducer and KafkaConsumer nodes."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that Produces a message using a KafkaProducer node. A seperate flow then consumes the message using a KafkaConsumer node."
            },
            {
              "section":"This tutorial requires an Apache Kafka server.  This could be the Event Streams service available on IBM Cloud (which is a fully managed service built with the open source Apache Kafka project), or your own stand alone Kafka implementation."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. An application can contain IBM App Connect Enterprise resources, such as flows, message definitions, libraries, and JAR files. An application is used to hold the message flow in this tutorial."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDL Schemas",
              "link":"http://github.com/DFDLSchemas",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two applications will be created in your workspace: <span class='application'>KafkaProducerApplication</span> and <span class='application'>KafkaConsumerApplication</span>."
              },
              {
                "section":"<span class='application'>KafkaProducerApplication</span> provides a single message flow with a HTTPInput, KafkaProducer and HTTPReply nodes."
              },
              {
                "section":"<span class='application'>KafkaConsumerApplication</span> provides a single message flow with a KafkaConsumer and FileOutput nodes."
              },
              {
                "section":"In this tutorial, these two applications will run in the same integration server. With additional configuration they can run on different servers or even on different machines."
              },
              {
                "section":"This tutorial can be run against any stand alone Apache Kafka server (https://kafka.apache.org/). The ACEv12 KafkaConsumer and KafkaProducer nodes are built upon a Java Kafka client. ACE v11.0.0.0 to ACEv11.0.0.4 use Kafka client version 0.10.0.1. ACEv11.0.0.5 uses Kafka client version 2.2.0. If you don't have your own Kafka server available, then the IBM Cloud Event Streams service provides an easy to use cloud based Kafka implementation which you can use with this tutorial."
              },
              {
                "section":"Once you import the tutorial, you will see red crosses against the two Kafka applications. This is because a few setup steps (mandatory properties) are required to complete the configuration of the Kafka nodes. These are explained when you move onto the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Imported projects",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Before you can deploy the flows there are some setup steps that need to be completed.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Within your own Apache Kafka server, e.g. IBM Cloud Event Streams Service, record the Bootstrap server name. Create a topic if you don't already have one and remember its name ready for step 3."
                    },
                    {
                      "details":"If you are using Event Streams, the connection from ACE must be secured using SASL_SSL. Open the Event Streams Service Credentials and remember the user and password ready for step 5. "
                    },
                    {
                      "details":"Open message flows <span class='application'>KafkaProducerFlow.msgflow</span> and <span class='application'>KafkaConsumerFlow.msgflow</span>.  Make the following changes to the Kafka nodes.",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Topic name*  set this to the one that you created on your Kafka server."
                          },
                          {
                            "details":"Bootstrap servers*  set this to the one listed in the Credentials above."
                          },
                          {
                            "details":"If using Message Hub, switch to the Security tab and set the Security protocol to be \"SASL_SSL\" and leave the default value for SSL protocol to be \"TLSv1.2\". "
                          }
                        ]
                      }
                    },
                    {
                      "details":"Within the <span class='application'>KafkaConsumerFlow.msgflow</span> you will also need to change the File Output node, Directory and File name."
                    },
                    {
                      "details":"If you are using IBM Cloud Event Streams or if your Kafka Server needs to authenticate the connection from ACE, then you will need to provide credentials using the mqsisetdbparms command from the ACE Command Console.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"If you intend to use a node-owned integration server then issue the following command:"
                          },
                          {
                            "details":"mqsisetdbparms <span class='varname'>integrationNodeName</span> -n kafka::KAFKA::<span class='varname'>integrationServerName</span> -u <span class='varname'>token</span> -p <span class='varname'>password</span>"
                          },
                          {
                            "details":"Restart the Integration Node."
                          },
                          {
                            "details":"If you intend to use a stand-alone integration server then issue the following command:"
                          },
                          {
                            "details":"mqsisetdbparms -w <span class='varname'>work-directory</span> -n kafka::KAFKA -u <span class='varname'>token</span> -p <span class='varname'>password</span>"
                          },
                          {
                            "details":"Restart the Integration Server."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"You are now ready to exercise the flows. To exercise the flows move onto the Run tab."
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Use the Flow Exerciser in the <span class='resource'>KafkaProducerFlow.msgflow</span> and <span class='resource'>KafkaConsumerFlow.msgflow</span> to run this tutorial.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>KafkaConsumerFlow.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Open <span class='resource'>KafkaProducerFlow.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow"
                          },
                          {
                            "details":"Click the Send Message icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Create a new message and click Send. Your message is sent to the HTTP input node."
                          },
                          {
                            "details":"When the list of actions is shown, click on the Received HTTP reply message... item to show the output from the flow. This wil be the same as the message that you sent in."
                          }
                        ]
                      }
                    },
                    {
                      "details":"After you close the dialog, the path taken through the messageflow is highlighted. Click on the message icon on each connection to see how the tree is updated by each node."
                    },
                    {
                      "details":"Return to the <span class='resource'>KafkaConsumerFlow.msgflow</span> and click the View Path icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/viewPath.png' alt='' /> and you should see that the same message has been received back by ACE."
                    },
                    {
                      "details":"Go to the output directory that you specified on the FileOutput node and you should see a file that contains the message that you sent in."
                    }
                  ]
                }
              },
              {
                "section":"This tutorial showed the KafkaConsumer and KafkaProducer nodes running in the same integration server. Remember if you experiment with other topologies you may need to run the mqsisetdbparms command accordingly, as the credentials for the Kafka nodes are scoped to the integration server."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using the MQTTSubscribe node to receive MQTT messages from MQTT topics":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"Back to Overview",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using the MQTTSubscribe node to receive MQTT messages from MQTT topics",
        "shortDescription":"Learn how to use the MQTTSubscribe node to receive messages from an MQTT server.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MQTTSubscribe",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"MQTTSubscribe node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Receive messages from an MQTT server by using IBM App Connect Enterprise."
          },
          {
            "title":"Understand the basic configuration of the MQTTSubscribe node."
          },
          {
            "title":"Understand the information written to the Local Environment when receiving data over MQTT."
          },
          {
            "title":"Gain an introduction to the IBM IoT Foundation."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that connects to the IBM Internet of Things (IoT) Foundation, and receives messages published by a device simulator over the MQ Telemetry Transport (MQTT) protocol. The message flow writes the message data to a file."
            },
            {
              "section":"MQTT is an open protocol for remote communication using a publish and subscribe model. Devices and applications can publish messages on named topics, and other applications or devices can subscribe to receive messages that are published on particular topics."
            },
            {
              "section":"The IBM IoT Foundation hosts an MQTT server on the internet and provides a quickstart demonstration service. This tutorial connects to that service and illustrates how to use a message flow to receive messages over MQTT. To publish the messages, you will use the device simulator provided by the IBM IoT Foundation."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"MQTT.ORG",
              "description":"Information about the MQTT open standard",
              "link":"http://mqtt.org/",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Processing MQTT messages in IBM App Connect Enterprise",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc62000_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"MQTTSubscribe node",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc46000_.htm",
              "type":"web"
            },
            {
              "title":"Website link to ",
              "description":"IBM Internet of Things Foundation",
              "link":"https://internetofthings.ibmcloud.com/#/",
              "type":"web"
            },
            {
              "title":"Website link to ",
              "description":"Connecting applications to IoT Foundation quickstart",
              "link":"https://developer.ibm.com/iot/recipes/application-development-quickstart/",
              "type":"web"
            },
            {
              "title":"Website link to ",
              "description":"Device simulator for IoT Foundation quickstart",
              "link":"https://developer.ibm.com/iot/recipes/simulator/",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Create the message flow and the device",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Create a device that is connected to the IoT Foundation and will publish data on a topic that the message flow can subscribe to.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"On your smartphone/tablet/computer, start the simulator by browsing to <a href='http://quickstart.internetofthings.ibmcloud.com/iotsensor' target='_blank'>http://quickstart.internetofthings.ibmcloud.com/iotsensor</a>. The simulator connects automatically and starts publishing data. Keep your simulator window active and in the foreground."
                    },
                    {
                      "details":"Note the MAC address of the simulated device (displayed in the top right corner of the device screen; for example a9a557601865). You will need this to complete the configuration of the message flow."
                    }
                  ]
                }
              },
              {
                "section":"Import and complete the configuration of the message flow.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Click the <span class='uicontrol'>Import</span> button on the right of this view. The MQTTSubscribe application, which includes a partially complete message flow, will be imported into your workspace."
                    },
                    {
                      "details":"The <span class='uicontrol'>MQTTSubscribe</span> message flow should be open in the Message Flow editor. If it is not, locate the message flow under the Flows section of the <span class='application'>MQTTSubscribe</span> application, and double click it to open for editing."
                    },
                    {
                      "details":"Select the MQTTSubscribe node in the message flow and look at the <span class='uicontrol'>Properties</span> view.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"<b>Tip:</b> To allow you to see the properties view and the tutorial steps at the same time, move this current tutorial steps view to the right side of the message flow editor, by dragging and dropping the <span class='uicontrol'>Tutorial Steps View</span> tab at the top of this view."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Some of the MQTTSubscribe node properties have already been configured with values. The <span class='parmname'>Host name</span> and  <span class='parmname'>Port</span> are configured to connect to the IoT Foundation MQTT server that is hosted on the internet."
                    },
                    {
                      "details":"The <span class='parmname'>Client ID</span> property is blank and must be configured with a valid value. Enter the value <span class='userinput'>a:quickstart:&lt;unique-name&gt;</span> where <span class='userinput'>&lt;unique-name&gt;</span> is a value you choose that is unlikely to be chosen by anyone else. For example, you might choose your name and birth year to avoid clashing with other people, such as <span class='userinput'>a:quickstart:hosie75</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"<b>You might like to know:</b> In the MQTT protocol, the client ID is used to uniquely identify a device or an instance of an application that is connected to an MQTT server. Each device or application must specify a different client ID. In any particular instance of an MQTT server, there might be a defined convention to follow when choosing the client ID. In the case of the IBM IoT Foundation quickstart, the convention is that applications must specify a client ID with the form <span class='code'>a:quickstart:&lt;unique-name&gt;</span> where <span class='code'>&lt;unique-name&gt</span> is a value chosen by the application to be unique across all applications connecting to the quickstart service. This convention must be followed, otherwise the application will fail to connect to the IoT Foundation."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The <span class='parmname'>Topic name</span> property is blank and must be configured with a valid value. Enter the value <span class='userinput'>iot-2/type/+/id/&lt;deviceid&gt;/evt/+/fmt/+</span> where <span class='userinput'>&lt;deviceid&gt;</span> identifies the MAC address of the device that you simulated in the earlier step (in the tutorial example a9a557601865, which is entered into the Topic name as <span class='userinput'>iot-2/type/+/id/a9a557601865/evt/+/fmt/+</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"<b>You might like to know:</b> When message data is published over MQTT, it is published on a particular topic. The topic string is hierarchical, and is normally used to indicate some categorization of the data that is meaningful in the particular domain. Receiving applications subscribe to particular topics and can use wildcards to subscribe to many topics within a single topic string. In the case of the IoT Foundation quickstart, the topic name includes the ID of the device that published the data. Subscribing applications must specify the device ID explicitly, although a wildcard (<span class='code'>+</span>) may be used elsewhere in the topic string, as shown in this tutorial."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Save the message flow."
                    },
                    {
                      "details":"Ensure that there are no errors associated with the message flow."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"MQTT.ORG",
                "description":"Information about the MQTT open standard",
                "link":"http://mqtt.org/",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Processing MQTT messages in IBM App Connect Enterprise",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc62000_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"MQTTSubscribe node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc46000_.htm",
                "type":"web"
              },
              {
                "title":"Website link to ",
                "description":"IBM Internet of Things Foundation",
                "link":"https://internetofthings.ibmcloud.com/#/",
                "type":"web"
              },
              {
                "title":"Website link to ",
                "description":"Connecting applications to IoT Foundation quickstart",
                "link":"https://developer.ibm.com/iot/recipes/application-development-quickstart/",
                "type":"web"
              },
              {
                "title":"Website link to ",
                "description":"Device simulator for IoT Foundation quickstart",
                "link":"https://developer.ibm.com/iot/recipes/simulator/",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Deploy Application",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Before deploying the application, you must ensure that the file system is ready for the data to be written to the output file by the message flow."
              },
              {
                "section":"The FileOutput node is configured to write the data to a file in the output directory <span class='userinput'>C:\\fileout</span>",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"Create the output directory <span class='userinput'>C:\\fileout</span> on your local file system, or change the <span class='parmname'>Directory</span> property of the FileOutput node to a directory that exists and that your current user ID has write access to.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"If you are using Linux, then you will need to change the <span class='parmname'>Directory</span> property."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"Once you have completed these steps, drag the <span class='application'>MQTTSubscribe</span> application from the <span class='uicontroll'>Application Development</span> view and drop it on an integration server in the <span class='uicontroll'>Integration Nodes</span> view. The application will be deployed to the integration server and the message flow will connect to the IoT Foundation, ready to receive the data published by your device.",
                "steps":{
                  "type":"unordered",
                  "details":[
                    {
                      "details":"If you have a firewall on your computer, you might be asked to allow the <span class='code'>DataFlowEngine.exe</span> process to connect to <span class='code'>quickstart.messaging.internetofthings.ibmcloud.com</span>. You must allow this connection in order to complete this tutorial."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55170_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"How to deploy and test message flows",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/aa40160_.htm",
                "type":"web"
              }
            ]
          },
          "actions-remove":{
            "comment":" as the user needs to configure some of the properties on the flow in the create step, we cannot have a pre-built bar file, therefore cannot use the deploy action",
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The message flow will immediately start receiving data that is published by the device simulator that you launched in the <span class='uicontrol'>Create</span> step, and will write that data to a file in the directory that you created in the <span class='uicontrol'>Prepare</span> step."
              },
              {
                "section":"Change some of the metrics (temperature/humidity) on the device simulator and open the output file to see new events with those values appended to the end of the file."
              },
              {
                "section":"In addition to this, you can use the Flow Exerciser to inspect other publication information that is available in the message flow.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open the MQTTSubscribe message flow, and click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start recording the message path through the flow.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"<b>Take care:</b> If you have more than one integration server available, then you will have to choose which integration server to use to record this message flow.  Ensure that you choose the same one that you deployed to in the <span class='uicontrol'>Prepare</span> step, otherwise you will have two separate instances of the message flow trying to connect to the MQTT server with the same client ID, and that will cause errors."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Wait a few seconds to ensure that at least one event is published."
                    },
                    {
                      "details":"In the Flow Exerciser toolbar, click the View Path icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png' alt='View path' /> to highlight the message path through the message flow. Click on the connection to see the message data that passed between the MQTTSubscribe node and the FileOutput node."
                    },
                    {
                      "details":"In the <span class='code'>Message</span> tree of the data, you will see the <span class='code'>Properties</span> folder followed by a <span class='code'>JSON</span> folder, and this shows the same data that was written to the output file.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"NOTE: the data is formatted as XML by the UI for the purpose of rendering it through the Flow Exerciser, but in fact it remains as JSON as it passes from the IoT Foundation, through the message flow, and into the output file."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Expand the <span class='code'>LocalEnvironment</span> folder and you will see extra information about the publication. It is possible to add other nodes to the message flow that could process this information or even copy it to the output file."
                    },
                    {
                      "details":"Click the <span class='uicontrol'>Clean Up</span> button at the top right of this page.  If you do not do this then the message flow will continue to append data to the output file."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Using local environment variables with MQTT nodes",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc62011_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Using the TCP/IP nodes to integrate with TCP/IP sockets":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using the TCP/IP nodes to integrate with TCP/IP sockets",
        "shortDescription":"Learn how to use TCP/IP nodes for integration with external applications by using TCP/IP sockets.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Use of the TCPIPClientInput node."
          },
          {
            "title":"Use of the TCPIPServerOutput node."
          },
          {
            "title":"TCP/IP policies."
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to use the TCPIPClientInput and the TCPIPServerOutput nodes in integration flows."
          },
          {
            "title":"Learn how to configure and manage TCP/IP connections by using policies."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"IBM App Connect Enterprise enables you to integrate with external applications by using TCP/IP sockets. Two sets of TCP/IP message flow nodes exist in IBM App Connect Enterprise: TCPIPServer nodes and TCPIPClient nodes. Both sets have identical function in terms of accessing the data streams; however, one set uses client connections and the other set uses server connections. This tutorial also uses policies as a convenient way to manage the TCP/IP connections."
            },
            {
              "section":"This tutorial includes an application called 'TCPIPServer' that simulates a TCP/IP server that is configured to send the data over TCP/IP sockets. The main message flow in the server application is driven by an XML message arriving on the HTTPInput node. When the message flow with the TCPIPServer node is deployed, the TCP/IP server is started automatically."
            },
            {
              "section":"This tutorial also demonstrates how a message flow can be driven by the TCPIPClient node. By default, this node does not open a client connection. The way to configure it properly is to use a TCPClient policy to enable at least one client connection to be opened when the flow is deployed. The same policy also defines the server host name and port number to connect to."
            },
            {
              "section":"An important part of TCP/IP input node configuration is setting up the proper record detection algorithm. This tutorial demonstrates the use  of 'Parsed Record Sequence' record detection in XML messages."
            },
            {
              "section":"The message flows used in this tutorial also utilise other message flow nodes such as Trace, FileOutput, Mapping, HTTPInput and HTTPReply nodes."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"TCP/IP Data Transfer Overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90050_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"TCP/IP Nodes",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac67370_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"TCP/IP Scenarios in App Connect Enterprise",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac67390_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import Source Code",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> to load the <span class='application'>TCPIPServer</span> and <span class='application'>TCPIPClient</span> applications, the <span class='library'>DataLibrary</span> shared library, and the <span class='application'>TCPIPPolicies</span> policy project into your workspace. These resources are then listed in the Application Development view"
              },
              {
                "section":"Within the <span class='application'>TCPIPServer</span> application, a message flow named <span class='filepath'>TCPIPProvider.msgflow</span> receives the XML message through an HTTPInput node. The message is parsed and passed to the TCPIPServerOutput node to send the data to the client connected on port 7778. The TCPIPServerOutput node is configured by using the policy <span class='filepath'>TCPIPTutorialServer</span>. The policy project must be made available to the flow by being deployed to the same integration server. Trace nodes, embedded in both the message flows which are used in this tutorial, help to track the journey of the data between the flows using a common trace file."
              },
              {
                "section":"The <span class='application'>TCPIPClient</span> application contains a message flow called  <span class='filepath'>TCPIPReceiver.msgflow</span>, which uses the TCPIPClientInput node to receive the data from the server. The TCPIPClientInput node is configured with the policy <span class='filepath'>TCPIPTutorialClient</span> that specifies the host, the port, and the minimum number of client connections that are automatically opened. This message flow also contains a Mapping node that uses nested maps to transform the message data into a different format. Finally, the message is written to a file through the FileOutput node."
              },
              {
                "section":"The shared library <span class='library'>DataLibrary</span> contains a message model for the input and output message formats <span class='filepath'>SaleReport.xsd</span>, <span class='filepath'>SaleMessage.xsd</span>, as well as a test message that will be used to initiate the tutorial flow named <span class='filepath'>TestSaleMessage.xml</span>."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"TCP/IP nodes",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac67370_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Exploring the message flows",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Open the message flow <span class='msgflow'>TCPIPProvider.msgflow</span> in the application <span class='application'>TCPIPServer</span>. The yellow boxed annotations shown in the flow provide some summary details about how the flow is configured. To view details about each node, click on the <span class='view'>Properties</span> view and then select a node on the editor canvas. The <span class='property'>Connection details</span> property of the TCPIPServerOutput node points to a policy <span class='resource'>{TCPIPPolicies}:TCPIPTutorialServer</span>."
              },
              {
                "section":"If you open the message flow <span class='msgflow'>TCPIPReceiver.msgflow</span> in the application <span class='application'>TCPIPClient</span>, you can also view more information about its configuration by reading the yellow boxed annotations on the canvas. The <span class='property'>Connection details'</span> property of the TCPIPClientInput node points to a policy <span class='resource'>{TCPIPPolicies}:TCPIPTutorialClient</span>. The <span class='property'>Records and Elements</span> tab allows you to configure the record detection."
              },
              {
                "section":"<b>Tip 1:</b>If port 7778 cannot be used, you might need to adjust the ports set in the policies for your system."
              },
              {
                "section":"<b>Tip 2:</b>If your operating system is not Windows, you must update the file system paths used by the Trace and FileOutput nodes. The <span class='property'>Directory</span> property of the FileOutput node specifies the directory where the output file is written to. The <span class='property'>File path</span> property of the Trace nodes specify the full path to the trace file. By default all the files are written to 'C:\\temp'."
              },
              {
                "section":"Next, you will deploy and run the tutorial to see how the data travels from the <span class='application'>TCPIPServer</span> node to the <span class='application'>TCPIPClient</span> node and then to the file on the file system. Click <span class='uicontrol'>Run</span> to see those steps."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"TCPIPServerOutput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac67340_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"TCPIPClientInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac67300_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Deploy and run the tutorial message flows:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Deploy the message flows, policies and shared library using the BAR file named <span class='msgflow'>TCP_Deploy.bar</span> which you will find in the <span class='application'>TCPIPServer</span> application project."
                    },
                    {
                      "details":"Open the <span class='msgflow'>TCPIPProvider.msgflow</span> message flow from the application <span class='application'>TCPIPServer</span> by double-clicking on it. Click the <span class='icon'>Flow Exerciser</span> icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/startFlowExerciser.png' alt='' /> to start recording the message path through the flow. "
                    },
                    {
                      "details":"Click the <span class='icon'>Send Message</span> icon <img src='https://ot4i.github.io/iib-tutorials/images/icons/iib/sendMessage.png' alt='' /> to select a message to send to the flow."
                    },
                    {
                      "details":"Choose the provided input message (DataLibrary/TestSaleMessage.xml) and click the <span class='uicontrol'>Send</span> button to invoke the flow."
                    },
                    {
                      "details":"After the request message is processed, you can choose to highlight the path which was followed through the message flow."
                    }
                  ]
                }
              },
              {
                "section":"Verify the flow execution:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Click on any connection to see the data that passed through that connection."
                    },
                    {
                      "details":"You can also open a trace file <span class='filepath'>C:\\temp\\TCPIP_TRACE.txt</span> specified by the Trace nodes to see how the message travels through the message flows."
                    },
                    {
                      "details":"The same output directory contains the output file <span class='filepath'>C:\\temp\\TCPClientTutorialOutput.txt</span> created by the file output node. The file contains the transformed message SalesReport."
                    },
                    {
                      "details":"To stop recording the message path through the flow, click the <span class='icon'>Return flow to edit mode</span> icon <img src='http://ot4i.github.io/iib-tutorials/images/icons/iib/stopFlowExerciser.png' alt='Return flow to edit mode' />."
                    },
                    {
                      "details":"You can click the <span class='uicontrol'>Clean up</span> action to remove the tutorial source code from the workspace."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Processing TCP/IP messages",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bz90050_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"TCP/IP nodes",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac67370_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"TCP/IP scenarios in IBM App Connect Enterprise",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac67390_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Using custom keywords with message flows":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using custom keywords with message flows ",
        "shortDescription":"Learn how to assign custom keywords to message flows and then once deployed, read the keywords using the Java Integration API (requires v11.0.0.5 or higher).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Using custom keywords with message flows"
          },
          {
            "title":"ACEv12 Java IBM Integration API"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use the com.ibm.broker.config.proxy.* classes in a Java application to discover details about a message flow's custom keywords."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates an application which contains a single message flow which has had two custom keywords defined in its Long Description field. The message flow has an HTTPInput node, a JavaCompute node and an HTTPReply node. The Java code which runs inside the JavaCompute node uses the ACEv12 Java Integration API's com.ibm.broker.config.proxy.* classes to query the keywords and their values which are included in the response message from the flow."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a stand-alone integration server. The same message flow and the administration API can be used regardless of the selected deployment target."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleKeywords</span> and a Java project named <span class='application'>ExampleKeywordsJava</span>. In the Integration Development perspective, java projects are shown as dependencies, so to see <span class='application'>ExampleKeywordsJava</span> you should expand the Java section of the <span class='application'>ExampleKeywords</span> application."
              },
              {
                "section":"<span class='application'>ExampleKeywords</span> provides a single message flow named <span class='resource'>Keywords</span>. The message flow provides an HTTPInput node wired to a JavaCompute node, then an HTTPReply. The HTTPInput node is configured to receive any input message as BLOB. The JavaCompute node creates an XML output message. The output message carries basic details about the flow and where it is deployed, including the names and values of some custom keywords which were defined in the Long Description field of the flow."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExampleKeywords</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create an integration node owned server, inspect the message flow and then deploy it",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, open the message flow <span class='application'>Keywords.msfglow</span>. Click on the flow's backdrop (as opposed to having any of the node's selected) and switch to the Properties tab, to display the node's properties. You should see:<br><span class='application'>Short description:</span><br><code>This message flow is designed to demonstrate how the keywords capability works</code><br><span class='application'>Long description:</span><br><code>$MQSIAuthor = Ben ThompsonMQSI$</code><br><code>$MQSIEnvironment = DemoMQSI$</code><br>"
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>Keywords.bar</span> which you will find inside the <span class='application'>ExampleKeywords</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>Keywords.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"One saved input message named <span class='resource'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage</span> contains this data:<br><span class='resource'>The input data can be anything!</span>"
                          },
                          {
                            "details":"Click on the reply message and you will see that it contains this data:<br><span class='resource'>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;<br>&lt;Message&gt;<br>&nbsp;&nbsp;&lt;NodeName&gt;TESTNODE&lt;/NodeName&gt;<br>&nbsp;&nbsp;&lt;ServerName&gt;default&lt;/ServerName&gt;<br>&nbsp;&nbsp;&lt;ApplicationName&gt;ExampleKeywords&lt;/ApplicationName&gt;<br>&nbsp;&nbsp;&lt;FlowName&gt;Keywords&lt;/FlowName&gt;<br>&nbsp;&nbsp;&lt;Keywords&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Author&gt;Ben Thompson&lt;/Author&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;Environment&gt;Demo&lt;/Environment&gt;<br>&nbsp;&nbsp;&lt;/Keywords&gt;<br>&lt;/Message&gt;</span>"
                          },
                          {
                            "details":"After you close the dialog, the path taken through the message flow is highlighted."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to assign custom keywords to message flows and then once deployed, read the keywords using the Java Integration API."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Adding version information and custom keyword values to your development resources",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac26521_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using HTTPS and certificates with the HTTPInput, HTTPReply and HTTPRequest nodes":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using HTTPS and certificates with the HTTPInput, HTTPReply and HTTPRequest nodes",
        "shortDescription":"Learn how to create a Public Key Infrastructure with ACEv12 using self-signed certificates in order to send data securely across HTTPS.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainJava",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"HTTPInput node"
          },
          {
            "title":"HTTPReply node"
          },
          {
            "title":"HTTPRequest node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Generate self-signed certificates, keystores and truststores to secure communication between message flows over HTTPS."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates two simple message flows, which are deployed to two separate stand-alone integration servers. One flow contains an HTTPRequest node which invokes the HTTPInput node in the other flow across HTTPS. The tutorial also provides step-by-step instructions for setting up keystores and truststores using both keytool and the IBM Global Security Kit."
            },
            {
              "section":"The tutorial requires two ACE standalone integration servers which are created as part of the tutorial."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Setting up a Public Key Infrastructure",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ap34020_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"<center><img src='http://ot4i.github.io/https-certificates-tutorial/v12/en/Overview.png' alt='' /></center>"
              },
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleClient</span> and an application named <span class='application'>ExampleServer</span>."
              },
              {
                "section":"<span class='application'>ExampleClient</span> provides a message flow named <span class='resource'>ExampleClient</span> which is driven by an HTTPInput node configured to receive any input message across HTTP. An HTTPRequest node makes an HTTPS mutual authentication connection to the ExampleServer flow."
              },
              {
                "section":"<span class='application'>ExampleServer</span> provides a message flow named <span class='resource'>ExampleServer</span> which receives HTTPS data from the first flow."
              },
              {
                "section":"Once imported using the link on the right, the provided applications are ready to be deployed and tested. Before doing this, the Prepare tab contains instructions for creating the self-signed certificates and keystores which are required to secure the HTTPS communications between the flows."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Setting up a Public Key Infrastructure",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ap34020_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create the keystores, truststores and certificates followed by two stand alone integration servers.",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The following instructions are written assuming a Windows environment. Applying equivalent instructions for other platforms is left to the reader - for assistance in this regard the additional links to the full Knowledge Center product documentation will be helpful. The instructions show how to use two different utilities for the creation of keystores. Keytool is provided in the Java Development Kit (provided as part of your ACE installation) and gsk8capicmd_64 is provided as part of IBM's Global Security Kit (located in your IBM MQ installation).",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create myclient_keystore.jks to contain a self-signed certificate for myclient:<br><code>keytool -genkeypair -keystore myclient_keystore.jks -storepass p4ssword -storetype jks -alias myclientcert -dname \"CN=myclient,O=IBM,OU=DEV,L=Hursley,C=GB\"</code>"
                    },
                    {
                      "details":"Export a public key certificate for myclient:<br><code>keytool -exportcert -keystore myclient_keystore.jks -storepass p4ssword -storetype jks -alias myclientcert -file myclientcert.arm</code>"
                    },
                    {
                      "details":"Create myserver_truststore.jks to contain the public key certificate for myclient:<br><code>keytool -importcert -keystore myserver_truststore.jks -storepass passw0rd -storetype jks -alias myclientcert -file myclientcert.arm</code>"
                    },
                    {
                      "details":"Create myserver_keystore.p12:<br><code>gsk8capicmd_64 -keydb -create -db myserver_keystore.p12 -type p12 -pw passw0rd</code>"
                    },
                    {
                      "details":"Create a self-signed certificate for myserver:<br><code>gsk8capicmd_64 -cert -create -db myserver_keystore.p12 -dn \"CN=myserver,O=IBM,OU=DEV,L=Hursley,C=GB\" -pw passw0rd -label myservercert</code>"
                    },
                    {
                      "details":"Export a public key certificate for myserver:<br><code>gsk8capicmd_64 -cert -extract -db myserver_keystore.p12 -pw passw0rd -label myservercert -target myservercert.arm -format ascii</code>"
                    },
                    {
                      "details":"Create myclient_truststore.jks to contain the public key certificate for myserver:<br><code>keytool -importcert -keystore myclient_truststore.jks -storepass p4ssword -storetype jks -alias myservercert -file myservercert.arm</code>"
                    }
                  ]
                }
              },
              {
                "section":"Create and configure the Integration Server which will play the role of client:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the work directory:<br><code>mqsicreateworkdir C:\\temp\\workdirclient</code>"
                    },
                    {
                      "details":"Set the integration server's credentials for accessing its keystore and truststore:<br><code>mqsisetdbparms -w C:\\temp\\workdirclient -n client::keystorePass -u notused -p p4ssword</code>"
                    },
                    {
                      "details":"Configure the integration server. In the C:\\temp\\workdirclient\\server.conf.yaml file, edit the ResourceManagers / JVM section:<br><code>    keystoreType: 'JKS'</code><br><code>    keystoreFile: 'C:\\temp\\myclient_keystore.jks'</code><br><code>    keystorePass: 'client::keystorePass'</code><br><code>    truststoreType: 'JKS'</code><br><code>    truststoreFile: 'C:\\temp\\myclient_truststore.jks'</code><br><code>    truststorePass: 'client::keystorePass'</code>"
                    },
                    {
                      "details":"Start the integration server:<br><code>IntegrationServer -w C:\\temp\\workdirclient --admin-rest-api 7600 --http-port-number 7900</code>"
                    }
                  ]
                }
              },
              {
                "section":"Create and configure the Integration Server which will play the role of server:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the work directory:<br><code>mqsicreateworkdir C:\\temp\\workdirserver</code>"
                    },
                    {
                      "details":"Set the integration server's credentials for accessing its keystore and truststore:<br><code>mqsisetdbparms -w C:\\temp\\workdirserver -n server::keystorePass -u notused -p passw0rd</code>"
                    },
                    {
                      "details":"Configure the integration server. In the C:\\temp\\workdirserver\\server.conf.yaml file, edit the ResourceManagers / HTTPSConnector section:<br><code>    ListenerPort: 7843</code><br><code>    ReqClientAuth: true</code><br><code>    KeyAlias: 'server1cert'</code><br><code>    KeyPassword: 'server::keystorePass'</code><br><code>    KeystoreFile: 'C:\\temp\\myserver_keystore.p12'</code><br><code>    KeystorePassword: 'server::keystorePass'</code><br><code>    KeystoreType: 'p12'</code><br><code>    TruststoreFile: 'C:\\temp\\myserver_truststore.jks'</code><br><code>    TruststorePassword: 'server::keystorePass'</code><br><code>    TruststoreType: 'JKS'</code>"
                    },
                    {
                      "details":"Start the integration server:<br><code>IntegrationServer -w C:\\temp\\workdirserver --admin-rest-api 7601 --http-port-number 7901</code>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Deploy the message flows and then use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In following these instructions ensure you deploy the correct flow to the correct integration server, as instructed:",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"In the Toolkit, connect to the stand-alone integration server on administration port 7601 (which is based upon the work directory C:\\temp\\workdirserver) and drag and drop deploy the BAR file named <span class='application'>Server.bar</span> which you will find inside the application <span class='resource'>ExampleServer</span>."
                          },
                          {
                            "details":"Open <span class='resource'>ExampleClient.msgflow</span> and click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow, ensuring that you deploy this flow to the stand-alone integration server available on administration port 7600 (which is based upon the work directory C:\\temp\\workdirclient)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"One saved input message named <span class='resource'>InputMessage</span> is provided. Select it and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage</span> contains this data:<br><span class='resource'>This can be anything</span>"
                          },
                          {
                            "details":"This message flow invokes <span class='resource'>ExampleServer.msgflow</span> across HTTPS and then when the reply message is returned back to the test client you will see that it contains this data:<br><span class='resource'>{\"Message\":\"If you see this response your test succeeded!\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the path taken through the message flow is highlighted."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to create a Public Key Infrastructure with ACEv12 using self-signed certificates in order to send data securely across HTTPS."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Setting up a Public Key Infrastructure",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ap34020_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Using Callable Flows to split synchronous flow processing":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Using Callable Flows to split synchronous flow processing",
        "shortDescription":"Learn how to use the CallableFlowInvoke, CallableInput and CallableReply nodes to divide processing between message flows.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"15 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"EventRoutingFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"CallableFlowInvoke node"
          },
          {
            "title":"CallableInput and CallableReply nodes"
          },
          {
            "title":"Testing Callable Flows locally"
          },
          {
            "title":"Dynamically controlling the CallableFlowInvoke node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Understand how to make synchronous remote calls between message flows, on a single server and between integration nodes."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial shows how different parts of an application can be split between different processes using Callable Flow nodes.  The example uses an application which provides a raw HTTP/JSON service, and two separate applications which provide differently formatted timestamps for use in other flows."
            },
            {
              "section":"This example uses a Callable Flow to provide that timestamp service, so it can be invoked from one or more message flows, but is not exposed outside the Integration Bus environment. A Mapping node is used to include the result of invoking the callable flow in the JSON response from the main flow."
            },
            {
              "section":"A further extension to this scenario is that the calling flow can dynamically switch which flow it calls based on input data. You can also deploy updates to the Callable Flows without changing or redeploying the invoking flow."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDL Schemas",
              "link":"http://github.com/DFDLSchemas",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, three applications will be created in your workspace: <span class='application'>CallingParentApplication</span>, <span class='application'>CallableTimestamp</span> and <span class='application'>CallableTimestampAlternate</span>."
              },
              {
                "section":"<span class='application'>CallableTimestamp</span> and <span class='application'>CallableTimestampAlternate</span> each implement a single message flow with a CallableInput and CallableReply node. Both applications are configured with the same Endpoint Name. In this tutorial, these two applications will run in the same integration server as the other flows. With additional configuration they can run on different servers or even on different machines."
              },
              {
                "section":"<span class='application'>CallingParentApplication</span> has a single flow called <span class='msgflow'>TimestampMyJSON</span>. This exposes a raw HTTP service and uses a CallableFlowInvoke node to call one of the possible Timestamp flows. <span class='msgflow'>TimestampMyJSON</span> also allows a value in the input JSON to be specified which allows you to dynamically invoke a callable flow from a different application, overriding the default value specified on the CallableFlowInvoke node."
              },
              {
                "section":"These are explained in more detail when you move on to the Prepare tab, along with setup steps you need to complete before running the flows."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Callable message flows",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/cl23141_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Imported projects",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Look inside application <span class='application'>CallingParentApplication</span>. There is a message flow <span class='msgflow'>TimestampMyJSON</span> which has a CallableFlowInvoke node, with a label starting <span class='resource'>Call Timestamp Flow, updates body</span>. This is configured with two names: the Target Application and the Target Endpoint Name. These are used to resolve which callable flow is used."
              },
              {
                "section":"The mapping node <span class='resource'>Apply any LE overrides</span> will set the value of <span class='varname'>LocalEnvironment/Destination/CallableFlow/Invoke/targetApplication</span> if set in the input JSON message. This allows a differently named application to be called from the <span class='resource'>CallableFlowInvoke</span> node, overriding the node option."
              },
              {
                "section":"The two applications providing callable flows are built into a BAR file <span class='resource'>callable_flows.bar</span>. Deploy this BAR file now. The rest of this tutorial's instructions will assume the use of the default integration server owned by TESTNODE. Move on to the Run tab to exercise the flows and see them working."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using integration services",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Developing callable message flows",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/cl23143_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"Use the <span class='resource'>TimestampMyJSON.msgflow</span> in application <span class='application'>CallingParentApplication</span> to run this tutorial. You should have already deployed the <span class='resource'>callable_flows.bar</span> to the default integration server on your TESTNODE.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>TimestampMyJSON.msgflow</span>, and click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to deploy and start testing the flow. If you are prompted where to deploy, ensure you deploy to the same integration server as the <span class='application'>CallableTimestamp</span> applications."
                    },
                    {
                      "details":"Click the Send Message icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> to select a message to send to the flow."
                    },
                    {
                      "details":"Choose the input message <span class='resource'>JSON message, no overrides</span>, and click Send. Your request message is sent to the HTTP input node."
                    },
                    {
                      "details":"When the list of actions is shown, click on the Received HTTP reply message... item to show the output from the flow. Note that a timestamp has been added into the output message."
                    },
                    {
                      "details":"After you close the dialog, the path taken through the messageflow is highlighted. Click on the message icon on each connection to see how the tree is updated by each node."
                    },
                    {
                      "details":"Once you have tried the first message, click Send Message <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' /> again and select the <span class='resource'>JSON message, override target application</span> message. Note that it contains an additional tag <span class='userinput'>overriddenApplicationName</span> with value <span class='userinput'>CallableTimestampAlternate</span>."
                    },
                    {
                      "details":"Send that through the flow and note the output contains <span class='userinput'>Alternate timestamp</span>. If you look at the message tree before the CallableFlowInvoke node, note that a value is set in LocalEnvironment to override the targetApplication, which makes the flow under test invoke a different Callable Flow."
                    }
                  ]
                }
              },
              {
                "section":"You can further experiment with this scenario by changing the <span class='application'>CallableTimestamp</span> application and redeploying it, and then sending a message through the unchanged <span class='application'>CallingParentApplication</span>. Note that the behaviour changes immediately without needing to change or redeploy the invoking flow."
              },
              {
                "section":"This tutorial shows the invoking and callable flow running in the same integration server, which requires no additional setup. You can also use these applications to experiment with running the invoking flow and the callable flow on different integration servers or different machines, but some additional configuration is required to enable cross-server communication. Look at the Knowledge Center links below for information on topologies in which these flows can run, and how to set them up."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing callable message flows",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/cl23143_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Preparing the environment for callable flows",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/cl23148_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Aggregation nodes using MQ nodes with back-end services":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Aggregation nodes using MQ nodes with back-end services",
        "shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using MQ nodes.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Aggregation nodes"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to fan-out requests over MQ and aggregate their responses."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives an MQ message, and fans-out two separate MQ request messages (after simple transformations using a Mapping node). Two separate example back-end message flows are provided which read these MQ requests and reply to a common response queue. Finally, a separate fan-in message flow aggregates the two response messages."
            },
            {
              "section":"This tutorial requires an ACE integration node (or standalone server) which is associated with a local queue manager."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides three applications - one to hold the fan-out and fan-in aggregation flows, and two other applications for the back-end MQ flows."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, three applications will be created in your workspace: <span class='application'>AggregationMQ</span>, <span class='application'>AggregationMQBackend1</span> and <span class='application'>AggregationMQBackend2</span>."
              },
              {
                "section":"<span class='application'>AggregationMQ</span> provides two message flows AggregationMQ_FanOut and AggregationMQ_FanIn which use MQ nodes to send messages to and receive messages from the back-end message flows."
              },
              {
                "section":"<span class='application'>AggregationMQBackend1</span> provides a single message flow with MQInput, Mapping and MQOutput nodes. The application contains an XML schema describing the input and output formats."
              },
              {
                "section":"<span class='application'>AggregationMQBackend2</span> provides a single message flow with MQInput, Mapping and MQOutput nodes. The application contains an XML schema describing the input and output formats."
              },
              {
                "section":"For simplicity, all three applications can be deployed to the same integration server. If you wish, you could deploy AggregationMQBackEnd1 and AggregationMQBackEnd2 to different integration servers (assuming you take account of this with your MQ queue manager configuration)."
              },
              {
                "section":"Once you import the tutorial, the provided applications are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create queues",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The solution uses IBM MQ queues to route messages between the applications.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create the queues used by the MQ nodes in this tutorial by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, type the following command:<br><code><span class='cmdname'>runmqsc</span> <span class='varname'> qmgr &lt; {WorkspacePath}/AggregationMQ/create_queues.mqsc</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name and <span class='varname'>WorkspacePath</span> is the location of your current Toolkit workspace."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Deploy the back-end MQ applications</h4>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Deploy the <span class='application'>AggregationMQBackend1</span> application, by dragging and dropping it on to the integration server (which we named default earlier in the tutorial)."
                    },
                    {
                      "details":"Deploy the <span class='application'>AggregationMQBackend2</span> application, by dragging and dropping it on to the integration server (which we named default earlier in the tutorial)."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>AggregationMQ_FanIn.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Open <span class='resource'>AggregationMQ_FanOut.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow. <strong>WARNING!</strong> When prompted, be careful not to redeploy the message flow as this would accidentally cause the Flow Exerciser to undo the last step and remove <span class='resource'>AggregationMQ_FanIn.msgflow</span> from test data capturing mode."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Select the saved message which has been provided, named <span class='resource'>InputMessage1</span>, and click Send. Your message is sent to the MQInput node."
                          },
                          {
                            "details":"The pop-up dialog will show the message has been sent and will then be reporting <span class='resource'>Listening for response</span>, but in this example there is no response message, so just click <span class='resource'>Close</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Return to <span class='resource'>AggregationMQ_FanIn.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the View Path icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png' alt='' /> to see the path which the message took through the flow and see the message content on the path."
                          },
                          {
                            "details":"Click on the message icon on the last connection in the flow and you should see the final output message carries return data from both of the back-end message flows which has been changed to upper case. The final output message on the output queue <span class='resource'>AGG.OUT</span> should look similar to this:"
                          },
                          {
                            "details":"<span class='resource'>&lt;NS1:OverallOutputMessage xmlns:NS1=&quot;http://www.ibm.com/Example&quot;&gt;&lt;NS1:ResponseBackend1>DATA FOR BACKEND1&lt;/NS1:ResponseBackend1&gt;&lt;NS1:ResponseBackend2>DATA FOR BACKEND2&lt;/NS1:ResponseBackend2&gt;&lt;/NS1:OverallOutputMessage&gt;</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Aggregation nodes orchestrating a fan-out and an associated fan-in of messages using MQ."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message Flow Aggregation",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac00660_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Aggregation nodes using RESTAsyncRequest nodes with back-end services":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Aggregation nodes using RESTAsyncRequest nodes with back-end services",
        "shortDescription":"Learn how to use the Aggregation nodes to fan-out and fan-in messages using asynchronous REST nodes.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Aggregation nodes"
          },
          {
            "title":"Asynchronous REST nodes"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to fan-out asynchronous REST invocations and aggregate their responses."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple REST API that receives an HTTP GET, and fans-out two separate asynchronous REST invocations. Two separate example back-end ACE REST APIs are provided which receive these requests, do a trivial transformation to upper-case the data, and reply. The fan-in part of the original REST API aggregates values from the two response messages together."
            },
            {
              "section":"This tutorial requires an ACE integration node (or standalone server) which is associated with a local queue manager."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. A REST API is a specialized form of an application which describes a set of resources, and a set of operations that can be called on those resources from any HTTP client. This tutorial provides a REST API which holds the fan-out / fan-in aggregation flow, and two other REST APIs for the back-end flows."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, three REST APIs will be created in your workspace:"
              },
              {
                "section":"The REST API <span class='application'>AggregationRESTAsync</span> provides a single GET operation on a resource named AggregationResponse. The subflow representation of the operation, <span class='application'>getAggregatedResponse.subflow</span>, uses RESTAsyncRequest nodes to fan-out two requests. Two RESTAsyncResponse nodes are used to fan-in reply messages from the back-end message flows."
              },
              {
                "section":"The REST API <span class='application'>AggregationRESTBackend1</span> provides a single GET operation on a resource named Backend1. The subflow representation of the operation, <span class='application'>getBackend1.subflow</span>, contains a Mapping node to uppercase the data."
              },
              {
                "section":"The REST API <span class='application'>AggregationRESTBackend2</span> provides a single GET operation on a resource named Backend2. The subflow representation of the operation, <span class='application'>getBackend2.subflow</span>, contains a Mapping node to uppercase the data."
              },
              {
                "section":"For simplicity, the REST API and two back-end REST APIs can all be deployed to the same integration server. If you wish, you could deploy <span class='application'>AggregationRESTBackend1</span> and <span class='application'>AggregationRESTBackend2</span> to different integration servers (assuming you update the Swagger json files used by the RESTRequest nodes in <span class='application'>AggregationRESTAsync</span>)."
              },
              {
                "section":"Once you import the tutorial, the provided REST APIs are ready to be deployed and tested. Before you do this, you need to create the required MQ queues, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create queues",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Although this solution uses HTTP to route messages between the REST APIs, the aggregation nodes require MQ queues to operate.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create the default App Connect Enterprise queues in IBM MQ by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'> qmgr</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'> qmgr</span></code>"
                          },
                          {
                            "details":"Next create the queues by typing the following command:<br><code>server\\sample\\wmq\\iib_createqueues <span class='varname'>qmgr</span></code><br>where<br><span class='varname'>qmgr</span> is the queue manager name."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>qmgr</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Deploy the back-end REST APIs</h4>",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Deploy the <span class='application'>AggregationRESTBackend1</span> REST API, by dragging and dropping it on to the default integration server."
                    },
                    {
                      "details":"Deploy the <span class='application'>AggregationRESTBackend2</span> REST API, by dragging and dropping it on to the default integration server."
                    }
                  ]
                }
              },
              {
                "section":"<h4>Use any web browser to simply test the REST API",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Look inside the <span class='resource'>AggregationRESTAsync</span> REST API, right-click the <span class='resource'>AggregationRESTAsync.msgflow</span> and select <span class='resource'>Open with > Message Flow Editor</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow. When it appears, the <span class='resource'>Ready to record message</span> dialog can be dismissed by clicking Close."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Open any web browser. We will be using this to send an HTTP GET into the REST API <span class='resource'>AggregationRESTAsync</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"In the address bar of the browser paste in the URL for the HTTP GET operation. If you have used default settings, then this is likely to be:"
                          },
                          {
                            "details":"http://localhost:7080/aggregationrestasync/v1/AggregatedResponse?Field1=value1&Field2=value2"
                          },
                          {
                            "details":"Note that this URL includes query parameters with the values <span class='resource'>value1</span> and <span class='resource'>value2</span>. One of these values will be sent to each back-end REST API. The back end REST APIs will uppercase the values and reply."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Return to <span class='resource'>AggregationRESTAsync.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the View Path icon <img src='https://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png' alt='' /> to see the path which the message took through the flow and see the message content on the path. You can open the subflow <span class='resource'>getAggregatedResponse.subflow</span> and click on the flow connections to see what the message tree looked like as it traversed through the REST API."
                          },
                          {
                            "details":"Back in the web browser, you should see the final output message carries return data from both of the back-end REST APIs which has been changed to upper case. It should look like this:"
                          },
                          {
                            "details":"<span class='resource'>{&quot;ResponseBackend1&quot;:&quot;VALUE1&quot;,&quot;ResponseBackend2&quot;:&quot;VALUE2&quot;}</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Aggregation nodes orchestrating an asynchronous fan-out and an associated fan-in of messages using asynchronous REST nodes."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message Flow Aggregation",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac00660_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Transformation using a Map in a message flow":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Transformation using a Map in a message flow",
        "shortDescription":"Learn how to use a Mapping node to transform data using a Map in an App Connect Enterprise message flow by exploring this simple example.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Mapping node"
          },
          {
            "title":"XML parsing and writing"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using a Map.",
        "outcomeList":[
          {
            "title":"Use App Connect Enterprise to create and drive a message flow which transforms data using a Map."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Mapping node, and sends this back to the HTTP request.",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Mapping node, and sends this back to the HTTP request."
            },
            {
              "section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='uicontrol'>Transformation_Map</span> application will be imported into your workspace."
              },
              {
                "section":"The <span class='uicontrol'>Transformation_Map</span> message flow will be opened for you."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>Transformation_Map.bar</b> inside the <b>Transformation_Map</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Using Message Maps",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br28800_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>Transformation_Map</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_Map -d @.\\Transformation_Map\\input.xml</code>"
                    },
                    {
                      "details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelopeA&gt;<br> &lt;SaleListA&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Sterling\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Euros\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleListA&gt;<br>&lt;/SaleEnvelopeA&gt;</b>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Using Message Maps",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br28800_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Transformation using ESQL in a message flow":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Transformation using ESQL in a message flow",
        "shortDescription":"Learn how to use a Compute node to transform data using ESQL in an App Connect Enterprise message flow by exploring this simple example.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Compute node"
          },
          {
            "title":"XML parsing and writing"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using ESQL.",
        "outcomeList":[
          {
            "title":"Use App Connect Enterprise to create and drive a message flow which transforms data using ESQL."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Compute node (whose behavior is based on ESQL), and sends this back to the HTTP request.",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a Compute node (whose behavior is based on ESQL), and sends this back to the HTTP request."
            },
            {
              "section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='uicontrol'>Transformation_ESQL</span> application will be imported into your workspace."
              },
              {
                "section":"The <span class='uicontrol'>Transformation_ESQL</span> message flow will be opened for you."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>Transformation_ESQL.bar</b> inside the <b>Transformation_ESQL</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Compute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04660_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>Transformation_ESQL</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_ESQL -d @.\\Transformation_ESQL\\input.xml</code>"
                    },
                    {
                      "details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Sterling\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Euros\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Transformation using Java in a message flow":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Transformation using Java in a message flow",
        "shortDescription":"Learn how to use a JavaCompute node to transform data using Java in an App Connect Enterprise message flow by exploring this simple example.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"JavaCompute node"
          },
          {
            "title":"XML parsing and writing"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java.",
        "outcomeList":[
          {
            "title":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java), and sends this back to the HTTP request.",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java), and sends this back to the HTTP request."
            },
            {
              "section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='uicontrol'>Transformation_Java</span> application will be imported into your workspace."
              },
              {
                "section":"The <span class='uicontrol'>Transformation_Java</span> message flow will be opened for you."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>Transformation_Java.bar</b> inside the <b>Transformation_Java</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Transforming a message by using a JavaCompute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac30270_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>Transformation_Java</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_Java -d @.\\Transformation_Java\\input.xml</code>"
                    },
                    {
                      "details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Sterling\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Euros\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Transforming a message by using a JavaCompute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac30270_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Transformation using Java (JAXB) in a message flow":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Transformation using Java (JAXB) in a message flow",
        "shortDescription":"Learn how to use a JavaCompute node to transform data using Java (JAXB) in an App Connect Enterprise message flow by exploring this simple example.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"JavaCompute node using JAXB"
          },
          {
            "title":"XML parsing and writing"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java (JAXB).",
        "outcomeList":[
          {
            "title":"Use App Connect Enterprise to create and drive a message flow which transforms data using Java (JAXB)."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java JAXB), and sends this back to the HTTP request.",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a JavaCompute node (whose behavior is based on Java JAXB), and sends this back to the HTTP request."
            },
            {
              "section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='uicontrol'>Transformation_JavaJAXB</span> application will be imported into your workspace."
              },
              {
                "section":"The <span class='uicontrol'>Transformation_JavaJAXB</span> message flow will be opened for you."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>Transformation_JavaJAXB.bar</b> inside the <b>Transformation_JavaJAXB</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Using JAXB with a JavaCompute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac49010_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>Transformation_JavaJAXB</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_JavaJAXB -d @.\\Transformation_JavaJAXB\\input.xml</code>"
                    },
                    {
                      "details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Sterling\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Euros\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Using JAXB with a JavaCompute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac49010_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Transformation using XSL in a message flow":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Transformation using XSL in a message flow",
        "shortDescription":"Learn how to use an XSL Transform node to transform data using XSL in an App Connect Enterprise message flow by exploring this simple example.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"XSL Transform node"
          },
          {
            "title":"XML parsing and writing"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using XSL.",
        "outcomeList":[
          {
            "title":"Use App Connect Enterprise to create and drive a message flow which transforms data using XSL."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using an XSL Transform node, and sends this back to the HTTP request.",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using an XSL Transform node, and sends this back to the HTTP request."
            },
            {
              "section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='uicontrol'>Transformation_XSL</span> application will be imported into your workspace."
              },
              {
                "section":"The <span class='uicontrol'>Transformation_XSL</span> message flow will be opened for you."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>Transformation_XSL.bar</b> inside the <b>Transformation_XSL</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"XSLTransform node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac12490_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>Transformation_XSL</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_XSL -d @.\\Transformation_XSL\\input.xml</code>"
                    },
                    {
                      "details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Sterling\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Euros\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"XSLTransform node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac12490_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Transformation using .NET in a message flow":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Transformation using .NET in a message flow",
        "shortDescription":"Learn how to use a .NETCompute node to transform data using C# in an App Connect Enterprise message flow by exploring this simple example. (Windows platforms only)",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":".NETCompute node"
          },
          {
            "title":"XML parsing and writing"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"Use App Connect Enterprise to create and drive a message flow which transforms data using .NET.",
        "outcomeList":[
          {
            "title":"Use App Connect Enterprise to create and drive a message flow which transforms data using .NET."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a .NETCompute node, and sends this back to the HTTP request.",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which receives XML data over HTTP. The flow transforms the input XML structure into a different output XML structure using a .NETCompute node, and sends this back to the HTTP request."
            },
            {
              "section":"In App Connect Enterprise, message flows can be used to transform input data structures into output data structures. Several transformation options are provided including a Compute node (which uses ESQL), a Mapping node, a JavaCompute node (which can navigate data using an App Connect Enterprise Java API or JAXB), an XSL Transform node and a .NETCompute node."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import project",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and the <span class='uicontrol'>Transformation_DotNet</span> application will be imported into your workspace."
              },
              {
                "section":"The <span class='uicontrol'>Transformation_DotNet</span> message flow will be opened for you."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an Integration Server",
            "_prepareComment":"Prepare an Integration Server",
            "sections":[
              {
                "section":"Ensure you have the App Connect Enterprise .NET support installed on your system:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open an App Connect Enterprise Command Console with elevated Administrator privileges and issue the following commands:<br><code>cd server\\bin</code><br><code>mqsiassemblyinstall -l IBM.Broker.Plugin.dll</code><br><code>mqsiassemblyinstall -l IBM.Broker.Support.dll</code>"
                    }
                  ]
                }
              },
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>Transformation_DotNet.bar</b> inside the <b>Transformation_DotNet</b> application in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":".NETCompute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc16270_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the message flow to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>Transformation_DotNet</b> message flow by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/Transformation_DotNet -d @.\\Transformation_DotNet\\input.xml</code>"
                    },
                    {
                      "details":"The transformed response message should look like this:<br><b>&lt;SaleEnvelope&gt;<br> &lt;SaleList&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;KA&lt;/Initials&gt;&lt;Name&gt;Braithwaite&lt;/Name&gt;&lt;Balance&gt;00.50&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Twister&lt;/Desc&gt;&lt;Cost&gt;0.48&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Times Newspaper&lt;/Desc&gt;&lt;Cost&gt;0.32&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Sterling\"&gt;0.8&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br>  &lt;Statement Style=\"Full\" Type=\"Monthly\"&gt;<br>   &lt;Customer&gt;<br>    &lt;Initials&gt;TJ&lt;/Initials&gt;&lt;Name&gt;Dunnwin&lt;/Name&gt;&lt;Balance&gt;81.84&lt;/Balance&gt;<br>   &lt;/Customer&gt;<br>   &lt;Purchases&gt;<br>    &lt;Article&gt;&lt;Desc&gt;The Origin of Species&lt;/Desc&gt;&lt;Cost&gt;35.74&lt;/Cost&gt;&lt;Qty&gt;02&lt;/Qty&gt;&lt;/Article&gt;<br>    &lt;Article&gt;&lt;Desc&gt;Microscope&lt;/Desc&gt;&lt;Cost&gt;57.92&lt;/Cost&gt;&lt;Qty&gt;01&lt;/Qty&gt;&lt;/Article&gt;<br>   &lt;/Purchases&gt;<br>   &lt;Amount Currency=\"Euros\"&gt;129.41&lt;/Amount&gt;<br>  &lt;/Statement&gt;<br> &lt;/SaleList&gt;<br>&lt;/SaleEnvelope&gt;</b>"
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":".NETCompute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc16270_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Routing - Using a Route node to route data in a message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Routing - Using a Route node to route data in a message flow",
        "shortDescription":"Learn how to use the Route node to route messages in a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Route node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to route messages using data from a message."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a Route node. The Route node is a message flow node which directs messages that meet certain criteria down different paths of a message flow, based on the evaluation of an XPath expression."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleRoutingRoute</span>."
              },
              {
                "section":"<span class='application'>ExampleRoutingRoute</span> provides a single message flow named <span class='resource'>RoutingRoute</span> which uses an HTTPInput node to receive a JSON input message, a Route node to route the message, several FileOutput nodes which write each input message to a specific file based upon the message content and an HTTPReply node."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileOutput nodes will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>RoutingRoute.bar</span> which you will find inside the <span class='application'>ExampleRoutingRoute</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>RoutingRoute.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class='resource'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessageJoeBloggs</span> contains this data:<br><span class='resource'>{\"FirstName\":\"Joe\",\"LastName\":\"Bloggs\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class='resource'>InputMessageJoeBloggs</span> should be written into <span class='resource'>CountryGB.json</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Route node making message routing decisions."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Route node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac37370_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Routing - Using a RouteToLabel node to route data in a message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Routing - Using a RouteToLabel node to route data in a message flow",
        "shortDescription":"Learn how to use the RouteToLabel node to route messages in a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"RouteToLabel node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to route messages using data from a message."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a RouteToLabel node. A Mapping node configures the LocalEnvironment area of the logical message tree in order to drive a downstream RouteToLabel node to direct messages that meet certain criteria to a Label message flow node, also in the message flow."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleRoutingRouteToLabel</span>."
              },
              {
                "section":"<span class='application'>ExampleRoutingRouteToLabel</span> provides a single message flow named <span class='resource'>RoutingRouteToLabel</span> which uses an HTTPInput node to receive a JSON input message, a Mapping node and RouteToLabel nodes to route the message, several Label nodes each of which feeds a FileOutput node (configured to write to a specific file name) and an HTTPReply node."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileOutput nodes will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>RoutingRouteToLabel.bar</span> which you will find inside the <span class='application'>ExampleRoutingRouteToLabel</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>RoutingRouteToLabel.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class='resource'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessageJoeBloggs</span> contains this data:<br><span class='resource'>{\"FirstName\":\"Joe\",\"LastName\":\"Bloggs\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class='resource'>InputMessageJoeBloggs</span> should be written into <span class='resource'>CountryGB.json</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the combination of a Mapping node and a RouteToLabel node making message routing decisions."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"RouteToLabel node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04820_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Routing - Using a Filter node to route data in a message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Routing - Using a Filter node to route data in a message flow",
        "shortDescription":"Learn how to use the Filter node to route messages in a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Filter node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to route messages using data from a message."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a series of Filter nodes. Filter nodes use ESQL to interact with the logical message tree passing through the message flow, and through a RETURN statement direct the message to either the True output terminal or the False output terminal. The message flow in the tutorial uses several Filter nodes to route input messages into different categories."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleRoutingFilter</span>."
              },
              {
                "section":"<span class='application'>ExampleRoutingFilter</span> provides a single message flow named <span class='resource'>RoutingFilter</span> which uses an HTTPInput node to receive a JSON input message, then a Filter node to route it. Whichever direction is taken, a further Filter node directs the message down one of two alternate paths, each of which feeds a FileOutput node (configured to write to a specific file name). Finally an HTTPReply node replies to the initial HTTP request."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileOutput nodes will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>RoutingFilter.bar</span> which you will find inside the <span class='application'>ExampleRoutingFilter</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>RoutingFilter.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class='resource'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessageJoeBloggs</span> contains this data:<br><span class='resource'>{\"FirstName\":\"Joe\",\"LastName\":\"Bloggs\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class='resource'>InputMessageJoeBloggs</span> should be written into <span class='resource'>CountryGB.json</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Filter node making message routing decisions."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Filter node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04780_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Routing - Using a Compute node to route data in a message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Routing - Using a Compute node to route data in a message flow",
        "shortDescription":"Learn how to use the Compute node to route messages in a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Compute node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to route messages using data from a message."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a Compute node. The Compute node uses ESQL to interact with the logical message tree passing through the message flow. The ESQL PROPAGATE statement can be used to direct messages that meet certain criteria to a Label message flow node, also in the message flow."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleRoutingCompute</span>."
              },
              {
                "section":"<span class='application'>ExampleRoutingCompute</span> provides a single message flow named <span class='resource'>RoutingCompute</span> which uses an HTTPInput node to receive a JSON input message, a Compute node to route the message, several Label nodes each of which feeds a FileOutput node (configured to write to a specific file name) and an HTTPReply node."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileOutput nodes will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>RoutingCompute.bar</span> which you will find inside the <span class='application'>ExampleRoutingCompute</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>RoutingCompute.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Four saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class='resource'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessageJoeBloggs</span> contains this data:<br><span class='resource'>{\"FirstName\":\"Joe\",\"LastName\":\"Bloggs\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class='resource'>InputMessageJoeBloggs</span> should be written into <span class='resource'>CountryGB.json</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Compute node making message routing decisions."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Compute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04660_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Routing - Using a JavaCompute node to route data in a message flow":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Routing - Using a JavaCompute node to route data in a message flow",
        "shortDescription":"Learn how to use the JavaCompute node to route messages in a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"JavaCompute node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to route messages using data from a message."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to route the message using a JavaCompute node. The JavaCompute node uses Java to interact with the logical message tree passing through the message flow, and can be used to direct messages that meet certain criteria either to the Output terminal or to the Alternate terminal."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleRoutingJCN</span>."
              },
              {
                "section":"<span class='application'>ExampleRoutingJCN</span> provides a single message flow named <span class='resource'>RoutingJCN</span> which uses an HTTPInput node to receive a JSON input message, a JavaCompute node to route the message, to one of two alternate FileOutput nodes (each configured to write to a specific file name) and an HTTPReply node."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              },
              {
                "section":"If you have a scenario which requires more than two alternate routing paths, you could use a Route node, or if you prefer to use a JavaCompute node you can achieve this by setting up the LocalEnvironment tree to control a downstream RouteToLabel node. The tutorial also provides commented out example java code for this kind approach as well."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileOutput nodes will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>RoutingJCN.bar</span> which you will find inside the <span class='application'>ExampleRoutingJCN</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>RoutingJCN.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Two saved messages are provided. Each message provides a JSON structure which carries the FirstName, LastName and Country for a fictitious person. Select <span class='resource'>InputMessageJoeBloggs</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessageJoeBloggs</span> contains this data:<br><span class='resource'>{\"FirstName\":\"Joe\",\"LastName\":\"Bloggs\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the Country field, the Route node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class='resource'>InputMessageJoeBloggs</span> should be written into <span class='resource'>CountryGB.json</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the JavaCompute node making message routing decisions."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"JavaCompute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac20805_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Databases - Using a DatabaseRetrieve node to retrieve data from DB2 via JDBC":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Databases - Using a DatabaseRetrieve node to retrieve data from DB2 via JDBC",
        "shortDescription":"Learn how to use the DatabaseRetrieve node to retrieve data from DB2 using a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"DatabaseRetrieve node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to retrieve data from a database."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to help construct the WHERE clause of a SELECT statement which is constructed by the DatabaseRetrieve node. The DatabaseRetrieve node is a message flow node which helps users simply choose which columns they would like to take data from, without needing to know detailed SQL syntax."
            },
            {
              "section":"The DatabaseRetrieve node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the DB2 database which is used by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleDatabaseRetrieve</span>, and the policy project named <span class='application'>MyPolicies</span>."
              },
              {
                "section":"<span class='application'>ExampleDatabaseRetrieve</span> provides a single message flow named <span class='resource'>DatabaseRetrieveFlow</span> which uses an HTTPInput node to receive a JSON input message, a DatabaseRetrieve node to select the data from DB2, and an HTTPReply node."
              },
              {
                "section":"<span class='application'>MyPolicies</span> contains a single policy named <span class='application'>MyJDBCPolicy</span>. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class='cmdname'>Name of the database = USERS</span></code><br><code><span class='cmdname'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class='cmdname'>Database server name = localhost</span></code><br><code><span class='cmdname'>Database server port number = 50000</span></code><br><code><span class='cmdname'>Type 4 driver class JARs URL = C:\\Program Files\\IBM\\SQLLIB\\java</span></code><br><code><span class='cmdname'>Security identity (DSN) = mydbidentity</span></code><br><code><span class='cmdname'>Supports XA coordinated transactions = false</span></code>"
              },
              {
                "section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the database, set up your credentials and deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a DB2 Command Window and execute the command:<br><code><span class='cmdname'>db2 create database USERS</span></code>"
                    },
                    {
                      "details":"Next we will connect to the database which was just created, create a table and then insert some sample data. From the same window, start an interactive command session by typing <code><span class='cmdname'>db2</span></code> and then execute these commands:<br><code><span class='cmdname'>CONNECT TO USERS</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (1, 'Ben', 'Thompson', 'GB')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (2, 'Joe', 'Bloggs', 'GB')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (3, 'Jan', 'Modaal', 'NL')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (4, 'Otto', 'Normalverbraucher', 'DE')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (5, 'John', 'Doe', 'US')</span></code>"
                    },
                    {
                      "details":"You can check the data has been successfully inserted by executing the command:<br><code><span class='cmdname'>SELECT * FROM MYSCHEMA.EMPLOYEES</span></code>"
                    }
                  ]
                }
              },
              {
                "section":"Create an integration node, set up your credentials and deploy by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class='cmdname'>mqsistop TESTNODE</span></code><br><code><span class='cmdname'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>DatabaseRetrieve.bar</span> which you will find inside the <span class='application'>ExampleDatabaseRetrieve</span> application. This BAR file includes the JDBC Provider policy and the application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>DatabaseRetrieve.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Two saved messages are provided, named <span class='resource'>InputMessageGB</span>, and <span class='resource'>InputMessageUS</span>. Each message provides a different value for an element in their JSON named <span class='resource'>Country</span>. Select <span class='resource'>InputMessageGB</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"InputMessageGB should return two matching records, and InputMessageUS should return one matching record. Here is the final output message for InputMessageGB:<br><span class='resource'>{\"Country\":\"GB\",\"Employee\":{\"PKEY\":1, \"FIRSTNAME\":\"Ben\", \"LASTNAME\":\"Thompson\", \"COUNTRY\":\"GB\", \"PKEY\":2, \"FIRSTNAME\":\"Joe\", \"LASTNAME\":\"Bloggs\", \"COUNTRY\":\"GB\"}}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Click on the message icon on each connection to see how the tree has been updated by each node."
                          },
                          {
                            "details":"When you click on the last connection in the flow, you should see the final output message structure carries return data which has been retrieved from the database."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the DatabaseRetrieve node retrieving data from a DB2 database using JDBC."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"DatabaseRetrieve node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac37390_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Databases - Using a DatabaseRoute node to route messages based on data from DB2 via JDBC":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Databases - Using a DatabaseRoute node to route messages based on data from DB2 via JDBC",
        "shortDescription":"Learn how to use the DatabaseRoute node to route messages based on data from DB2 using a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"DatabaseRoute node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to route messages using data from a database."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and uses a data field in the JSON to help construct the WHERE clause of a SELECT statement which is constructed by the DatabaseRoute node. The DatabaseRoute node is a message flow node which helps users route messages based upon data in a database simply by choosing which columns they would like to use, without needing to know detailed SQL syntax."
            },
            {
              "section":"The DatabaseRoute node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the DB2 database which is used by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleDatabaseRoute</span>, and the policy project named <span class='application'>MyPolicies</span>."
              },
              {
                "section":"<span class='application'>ExampleDatabaseRoute</span> provides a single message flow named <span class='resource'>DatabaseRouteFlow</span> which uses an HTTPInput node to receive a JSON input message, a DatabaseRoute node to communicate with DB2, several FileOutput nodes which write each input message to a specific file based upon the data retrieved from the database and an HTTPReply node."
              },
              {
                "section":"<span class='application'>MyPolicies</span> contains a single policy named <span class='application'>MyJDBCPolicy</span>. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class='cmdname'>Name of the database = USERS</span></code><br><code><span class='cmdname'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class='cmdname'>Database server name = localhost</span></code><br><code><span class='cmdname'>Database server port number = 50000</span></code><br><code><span class='cmdname'>Type 4 driver class JARs URL = C:\\Program Files\\IBM\\SQLLIB\\java</span></code><br><code><span class='cmdname'>Security identity (DSN) = mydbidentity</span></code><br><code><span class='cmdname'>Supports XA coordinated transactions = false</span></code>"
              },
              {
                "section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the database, set up your credentials and deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a DB2 Command Window and execute the command:<br><code><span class='cmdname'>db2 create database USERS</span></code>"
                    },
                    {
                      "details":"Next we will connect to the database which was just created, create a table and then insert some sample data. From the same window, start an interactive command session by typing <code><span class='cmdname'>db2</span></code> and then execute these commands:<br><code><span class='cmdname'>CONNECT TO USERS</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (1, 'Ben', 'Thompson', 'GB')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (2, 'Joe', 'Bloggs', 'GB')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (3, 'Jan', 'Modaal', 'NL')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (4, 'Otto', 'Normalverbraucher', 'DE')</span></code><br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (5, 'John', 'Doe', 'US')</span></code>"
                    },
                    {
                      "details":"You can check the data has been successfully inserted by executing the command:<br><code><span class='cmdname'>SELECT * FROM MYSCHEMA.EMPLOYEES</span></code>"
                    },
                    {
                      "details":"This tutorial also uses FileOutput nodes which will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit all the FileOutput nodes in the message flow so that they write to a different directory suitable for your runtime environment."
                    }
                  ]
                }
              },
              {
                "section":"Create an integration node, set up your credentials and deploy by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class='cmdname'>mqsistop TESTNODE</span></code><br><code><span class='cmdname'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>DatabaseRoute.bar</span> which you will find inside the <span class='application'>ExampleDatabaseRoute</span> application. This BAR file includes the JDBC Provider policy and the application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>DatabaseRoute.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Six saved messages are provided. Five of these messages carry data which have corresponding entries in the database you just created. One message deliberately does not match the database content, and is provided so you can experiment with the keyNotFound terminal of the DatabaseRoute node. Each message provides a JSON structure which carries the FirstName and LastName for a row in the database. Select <span class='resource'>InputMessageBenThompson</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessageBenThompson</span> contains this data:<br><span class='resource'>{\"FirstName\":\"Ben\",\"LastName\":\"Thompson\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Depending on the value of the COUNTRY column of the database record, the DatabaseRoute node should route the data to the correct instance of a FileOutput node whose role is to write the data to an output file with the right country name. For example, <span class='resource'>InputMessageBenThompson</span> should be written into <span class='resource'>CountryGB.json</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the DatabaseRoute node communicating with a DB2 database using JDBC in order to make message routing decisions."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"DatabaseRoute node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac37380_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Databases - Using a Mapping node to insert data into a DB2 database via JDBC":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Databases - Using a Mapping node to insert data into a DB2 database via JDBC",
        "shortDescription":"Learn how to use the Mapping node to insert data into DB2 using a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Mapping node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to insert data into a database."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The Mapping node can be used in conjunction with a JDBCProvider policy to establish a JDBC type 4 connection to the database. The Mapping node is a message flow node which helps users graphically choose how to insert data into the database, without needing to know detailed SQL syntax."
            },
            {
              "section":"The Mapping node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the DB2 database which is used by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleDatabaseMapping</span>, and the policy project named <span class='application'>MyPolicies</span>."
              },
              {
                "section":"<span class='application'>ExampleDatabaseMapping</span> provides a single message flow named <span class='resource'>DatabaseMapping</span> which uses an HTTPInput node to receive a JSON input message, a Mapping node to insert the data into DB2 and manipulate the output message which is then sent to an HTTPReply node."
              },
              {
                "section":"<span class='application'>MyPolicies</span> contains a single policy named <span class='application'>USERS</span>. The name of this policy has been chosen to match the name of the physical data model file named USERS.dbm which is used by the Mapping node to describe the structure of the database table where data is being inserted. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class='cmdname'>Name of the database = USERS</span></code><br><code><span class='cmdname'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class='cmdname'>Database server name = localhost</span></code><br><code><span class='cmdname'>Database server port number = 50000</span></code><br><code><span class='cmdname'>Type 4 driver class JARs URL = C:\\Program Files\\IBM\\SQLLIB\\java</span></code><br><code><span class='cmdname'>Security identity (DSN) = mydbidentity</span></code><br><code><span class='cmdname'>Supports XA coordinated transactions = false</span></code>"
              },
              {
                "section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the database, set up your credentials and deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a DB2 Command Window and execute the command:<br><code><span class='cmdname'>db2 create database USERS</span></code>"
                    },
                    {
                      "details":"Next we will connect to the database which was just created, and create a table into which the message flow will insert data. From the same window, start an interactive command session by typing <code><span class='cmdname'>db2</span></code> and then execute these commands:<br><code><span class='cmdname'>CONNECT TO USERS</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"
                    }
                  ]
                }
              },
              {
                "section":"Create an integration node, set up your credentials, define a default policy project and then deploy by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class='cmdname'>mqsistop TESTNODE</span></code><br><code><span class='cmdname'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."
                    },
                    {
                      "details":"When using the mapping node with a database, the JDBCProvider policy is located by App Connect Enterprise runtime based upon the name of the physical data model file (in our example named <span class='resource'>USERS.dbm</span>) which is used by the Mapping node to describe the structure of the database table where data is being inserted. This policy (in our example named <span class='resource'>USERS.policyxml</span>) must be placed into the default policy project, so that it can be found by the runtime. The default policy project which the runtime will use is defined in the server.conf.yaml file. If you are on Windows using the default workpath location, using an integration node called TESTNODE which owns an integration server called server, then you will find this file at the location <span class='resource'>C:\\ProgramData\\IBM\\MQSI\\components\\TESTNODE\\servers\\server\\server.conf.yaml</span>"
                    },
                    {
                      "details":"Search in the file for the text <code>#policyProject: 'DefaultPolicies'</code> and replace this text with <code>policyProject: 'MyPolicies'</code>. <span class='resource'>Remember to remove the hash symbol at the start of this line!</span> Having made this change, the line should look like this:<br><code>  policyProject: 'MyPolicies'   # Name of the Policy project that will be used for unqualified Policy references, default is 'DefaultPolicies'</code>"
                    },
                    {
                      "details":"<span class='resource'>Remember to save</span> the updated server.conf.yaml file and then restart your integration node."
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>DatabaseMapping.bar</span> which you will find inside the <span class='application'>ExampleDatabaseRetrieve</span> application. This BAR file includes the JDBC Provider policy and the application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>DatabaseMapping.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class='resource'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage1</span> contains this data:<br><span class='resource'>{\"PrimaryKey\": 1,\"FirstName\":\"Ben\",\"LastName\":\"Thompson\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Mapping node communicating with a DB2 database using JDBC in order to insert data."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Modifying data in a database using Mapping",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/cm28831_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Databases - Using a JavaCompute node to insert data into a DB2 database via JDBC":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Databases - Using a JavaCompute node to insert data into a DB2 database via JDBC",
        "shortDescription":"Learn how to use the JavaCompute node to insert data into DB2 using a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"/com.ibm.etools.msgbroker.helphome.doc/help_home_msgbroker.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"JavaCompute node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to insert data into a database."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The JavaCompute node can be used in conjunction with a JDBCProvider policy to establish a JDBC type 4 connection to the database by using the getJDBCType4Connection call on the MbNode interface."
            },
            {
              "section":"The JavaCompute node uses the JDBC protocol to communicate with the database. The tutorial provides a policy of the type JDBCProviders which defines all of the connection information which is required. The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow, and a policy project to hold the JDBCProvider policy. The instructions also describe how to create the empty DB2 database which is then used by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Interacting with databases by using the JavaCompute node",
              "link":"com.ibm.etools.mft.doc/ac30494_.htm",
              "type":"help"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleDatabaseJCN</span>, and the policy project named <span class='application'>MyPolicies</span>."
              },
              {
                "section":"<span class='application'>ExampleDatabaseJCN</span> provides a single message flow named <span class='resource'>DatabaseJCN</span> which uses an HTTPInput node to receive a JSON input message, a JavaCompute node to communicate with DB2, and an HTTPReply node."
              },
              {
                "section":"<span class='application'>MyPolicies</span> contains a single policy named <span class='application'>MyJDBCPolicy</span>. The policy supplies configuration information controlling how the JDBC connection to the database will be made by the IBM App Connect Enterprise runtime. The policy has been set up with the standard values below which you should review to ensure they match with your environment:<br><code><span class='cmdname'>Name of the database = USERS</span></code><br><code><span class='cmdname'>Connection URL format = jdbc:db2://[serverName]:[portNumber]/[databaseName]:currentSchema=MYSCHEMA;user=[user];password=[password];</span></code><br><code><span class='cmdname'>Database server name = localhost</span></code><br><code><span class='cmdname'>Database server port number = 50000</span></code><br><code><span class='cmdname'>Type 4 driver class JARs URL = C:\\Program Files\\IBM\\SQLLIB\\java</span></code><br><code><span class='cmdname'>Security identity (DSN) = mydbidentity</span></code><br><code><span class='cmdname'>Supports XA coordinated transactions = false</span></code>"
              },
              {
                "section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. Both of these projects will be deployed to the same integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"com.ibm.etools.mft.doc/bi12002_.htm"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the database, set up your credentials and deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flows will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a DB2 Command Window and execute the command:<br><code><span class='cmdname'>db2 create database USERS</span></code>"
                    },
                    {
                      "details":"Next we will connect to the database which was just created and create a table. From the same window, start an interactive command session by typing <code><span class='cmdname'>db2</span></code> and then execute these commands:<br><code><span class='cmdname'>CONNECT TO USERS</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"
                    }
                  ]
                }
              },
              {
                "section":"Create an integration node, set up your credentials and deploy by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class='cmdname'>mqsistop TESTNODE</span></code><br><code><span class='cmdname'>mqsisetdbparms TESTNODE -n jdbc::mydbidentity -u db2admin -p pass123</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"The above mqsisetdbparms command configures the runtime with the required credentials (which have been abstracted from the JDBC Provider policy using the Security identity setting) for communicating with the database."
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>DatabaseJCN.bar</span> which you will find inside the <span class='application'>ExampleDatabaseJCN</span> application. This BAR file includes the JDBC Provider policy and the application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>DatabaseJCN.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class='resource'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage1</span> contains this data:<br><span class='resource'>{\"PrimaryKey\": 1,\"FirstName\":\"Ben\",\"LastName\":\"Thompson\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the JavaCompute node communicating with a DB2 database using JDBC in order to insert data."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Interacting with databases by using the JavaCompute node",
                "link":"com.ibm.etools.mft.doc/ac30494_.htm"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"com.ibm.etools.mft.doc/rt26110_.htm"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Databases - Using a Compute node to insert data into a DB2 database via ODBC":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Databases - Using a Compute node to insert data into a DB2 database via ODBC",
        "shortDescription":"Learn how to use Compute node ESQL to insert data into DB2 using a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Compute node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to insert data into a database."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The Compute node's ESQL dcommunicates with the database through an ODBC connection which is configured as part of the tutorial."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server. In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. The instructions also describe how to create the empty DB2 database which is then used by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Interaction with databases using ESQL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ak05800_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleDatabaseCompute</span>."
              },
              {
                "section":"<span class='application'>ExampleDatabaseCompute</span> provides a single message flow named <span class='resource'>DatabaseCompute</span> which uses an HTTPInput node to receive a JSON input message, a Compute node to communicate with DB2, and an HTTPReply node."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. The project will be deployed to the integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the database, set up your credentials and deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flow will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a DB2 Command Window and execute the command:<br><code><span class='cmdname'>db2 create database USERS</span></code>"
                    },
                    {
                      "details":"Next we will connect to the database which was just created and create a table. From the same window, start an interactive command session by typing <code><span class='cmdname'>db2</span></code> and then execute these commands:<br><code><span class='cmdname'>CONNECT TO USERS</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"
                    }
                  ]
                }
              },
              {
                "section":"Set up an ODBC connection in the operating system:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"This tutorial assumes you are using Windows, but if this is not the case, full instructions are provided for configuring ODBC in the Knowledge Center links at the base of this section. On Windows, open the <span class='resource'>ODBC Data Source Administrator (64-bit)</span>, switch to the <span class='resource'>System DSN</span> tab, click the Add button, and select a driver for your database."
                    },
                    {
                      "details":"Using DB2 in a default set-up, you should find an entry in the list labelled <span class='resource'>IBM DB2 ODBC Driver - DB2COPY1</span>. Select this entry and click Finish."
                    },
                    {
                      "details":"In the resulting Add dialog, set the <span class='resource'>Data source name = USERS</span>, leave the <span class='resource'>Database alias = USERS</span> and click OK. You will be returned to the <span class='resource'>ODBC Data Source Administrator (64-bit)</span> window and you should clikc OK again to close this window too."
                    }
                  ]
                }
              },
              {
                "section":"Create an integration node, set up your credentials and deploy by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class='cmdname'>mqsistop TESTNODE</span></code><br><code><span class='cmdname'>mqsisetdbparms TESTNODE -n odbc::USERS -u db2admin -p pass123</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"The above mqsisetdbparms command configures the runtime with the required credentials to access the USERS database."
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>DatabaseCompute.bar</span> which you will find inside the <span class='application'>ExampleDatabaseCompute</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Enabling ODBC Connections to the databases",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ah14440_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>DatabaseCompute.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class='resource'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage1</span> contains this data:<br><span class='resource'>{\"PrimaryKey\": 1,\"FirstName\":\"Ben\",\"LastName\":\"Thompson\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Compute node using ESQL to communicate with a DB2 database using ODBC in order to insert data."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Interaction with databases using ESQL",
                "link":"com.ibm.etools.mft.doc/ak05800_.htm"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Databases - Using a Database node to insert data into a DB2 database via ODBC":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Databases - Using a Database node to insert data into a DB2 database via ODBC",
        "shortDescription":"Learn how to use Database node ESQL to insert data into DB2 using a message flow driven by a JSON message over HTTP.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Database node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to insert data into a database."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives a JSON input message over HTTP, and takes data from four fields in the JSON to insert values into four corresponding columns of a DB2 database. The Database node's ESQL communicates with the database through an ODBC connection which is configured as part of the tutorial."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server. In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. The instructions also describe how to create the empty DB2 database which is then used by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Interaction with databases using ESQL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ak05800_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleDatabase</span>."
              },
              {
                "section":"<span class='application'>ExampleDatabase</span> provides a single message flow named <span class='resource'>Database</span> which uses an HTTPInput node to receive a JSON input message, a Database node to communicate with DB2, and an HTTPReply node."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. The project will be deployed to the integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the database, set up your credentials and deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flow will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a DB2 Command Window and execute the command:<br><code><span class='cmdname'>db2 create database USERS</span></code>"
                    },
                    {
                      "details":"Next we will connect to the database which was just created and create a table. From the same window, start an interactive command session by typing <code><span class='cmdname'>db2</span></code> and then execute these commands:<br><code><span class='cmdname'>CONNECT TO USERS</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code>"
                    }
                  ]
                }
              },
              {
                "section":"Set up an ODBC connection in the operating system:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"This tutorial assumes you are using Windows, but if this is not the case, full instructions are provided for configuring ODBC in the Knowledge Center links at the base of this section. On Windows, open the <span class='resource'>ODBC Data Source Administrator (64-bit)</span>, switch to the <span class='resource'>System DSN</span> tab, click the Add button, and select a driver for your database."
                    },
                    {
                      "details":"Using DB2 in a default set-up, you should find an entry in the list labelled <span class='resource'>IBM DB2 ODBC Driver - DB2COPY1</span>. Select this entry and click Finish."
                    },
                    {
                      "details":"In the resulting Add dialog, set the <span class='resource'>Data source name = USERS</span>, leave the <span class='resource'>Database alias = USERS</span> and click OK. You will be returned to the <span class='resource'>ODBC Data Source Administrator (64-bit)</span> window and you should clikc OK again to close this window too."
                    }
                  ]
                }
              },
              {
                "section":"Create an integration node, set up your credentials and deploy by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class='cmdname'>mqsistop TESTNODE</span></code><br><code><span class='cmdname'>mqsisetdbparms TESTNODE -n odbc::USERS -u db2admin -p pass123</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"The above mqsisetdbparms command configures the runtime with the required credentials to access the USERS database."
                    },
                    {
                      "details":"Drag and drop deploy the provided BAR file named <span class='application'>Database.bar</span> which you will find inside the <span class='application'>ExampleDatabase</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Enabling ODBC Connections to the databases",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ah14440_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>Database.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"Five saved messages are provided. Each message will drive the message flow to insert a row into the database table. Each message provides a JSON structure which has an equivalent field for each column in the database table. Select <span class='resource'>InputMessage1</span> and click Send and your message is sent to the HTTPInput node."
                          },
                          {
                            "details":"<span class='resource'>InputMessage1</span> contains this data:<br><span class='resource'>{\"PrimaryKey\": 1,\"FirstName\":\"Ben\",\"LastName\":\"Thompson\",\"Country\":\"GB\"}</span>"
                          },
                          {
                            "details":"The Database node interacts with the database but does not impact the format of the message passing through the flow. For this reason, you will find the same JSON has been returned to the test client from the HTTPReply node."
                          },
                          {
                            "details":"After you close the dialog, the paths taken through the messageflow are highlighted. Repeat the test with the other four input messages, then check the database to see the data has been inserted successfully."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Database node using ESQL to communicate with a DB2 database using ODBC in order to insert data."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Interaction with databases using ESQL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ak05800_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Databases - Using a DatabaseInput node to trigger a flow on insert into DB2 via ODBC":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Databases - Using a DatabaseInput node to trigger a flow on insert into DB2 via ODBC",
        "shortDescription":"Learn how to use a DatabaseInput node to trigger a flow when data is inserted into DB2.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"DatabaseInput node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to trigger flows when data is inserted into a database."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that is driven by a DatabaseInput node which is triggered when a new row is inserted into a DB2 database table. The DatabaseInput node communicates with the database through an ODBC connection which is configured as part of this tutorial."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server. In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. The instructions also describe how to create the DB2 database which is used by the scenario. This includes two database tables (an Application table named EMPLOYEES and an Event table named EVENTS) and a Database Trigger."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Interaction with databases using ESQL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ak05800_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleDatabaseInput</span> and a data design project named <span class='application'>ExampleDataDesign</span>."
              },
              {
                "section":"<span class='application'>ExampleDatabaseInput</span> provides a single message flow named <span class='resource'>DatabaseInput</span> which uses a DatabaseInput node which is triggered when a new row is created in a nominated Event table. The Event table row is created by a DB2 Trigger, whenever a new row is inserted into an Application table. Once the message flow is triggered it will simply propagate data to a FileOutput node which is configured to write a simple JSON message to the file system."
              },
              {
                "section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. The projects will be deployed to the integration server using a provided BAR file. Before you do this, you will need to create the required DB2 database tables and trigger, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the database, set up your credentials, create the output directory and deploy",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"This tutorial uses DB2 to create a database, which the App Connect Enterprise message flow will interact with. It is assumed you have DB2 already installed successfully, and that you have access to a userid which has the required level of DB2 administrative privileges. Create a new example database for this tutorial named USERS:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start a DB2 Command Window and execute the command:<br><code><span class='cmdname'>db2 create database USERS</span></code>"
                    },
                    {
                      "details":"Next we will connect to the database which was just created and create two tables and a trigger. From the same window, start an interactive command session by typing <code><span class='cmdname'>db2</span></code> and then execute these commands:<br><code><span class='cmdname'>CONNECT TO USERS</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EMPLOYEES (PKEY INTEGER NOT NULL, FIRSTNAME VARCHAR(30), LASTNAME VARCHAR(30), COUNTRY VARCHAR(2), PRIMARY KEY(PKEY))</span></code><br><code><span class='cmdname'>CREATE TABLE MYSCHEMA.EVENTS (EVENT_ID INTEGER NOT NULL GENERATED ALWAYS AS IDENTITY (START WITH 1 INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 NO CYCLE NO CACHE), OBJECT_KEY INTEGER NOT NULL, OBJECT_VERB VARCHAR(6), OBJECT_NAME VARCHAR(20), EVENT_PRIORITY INTEGER, EVENT_TIME TIMESTAMP, EVENT_STATUS INTEGER, PRIMARY KEY(EVENT_ID))</span></code><br><code><span class='cmdname'>CREATE TRIGGER MYSCHEMA.EMPLOYEES_TRIGGER AFTER INSERT ON MYSCHEMA.EMPLOYEES REFERENCING NEW AS N FOR EACH ROW INSERT INTO MYSCHEMA.EVENTS (OBJECT_KEY, OBJECT_VERB, OBJECT_NAME, EVENT_PRIORITY, EVENT_TIME, EVENT_STATUS) VALUES (N.PKEY,'CREATE','EMPLOYEE',1,CURRENT_TIMESTAMP,0)</span></code>"
                    }
                  ]
                }
              },
              {
                "section":"Set up an ODBC connection in the operating system:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"This tutorial assumes you are using Windows, but if this is not the case, full instructions are provided for configuring ODBC in the Knowledge Center links at the base of this section. On Windows, open the <span class='resource'>ODBC Data Source Administrator (64-bit)</span>, switch to the <span class='resource'>System DSN</span> tab, click the Add button, and select a driver for your database."
                    },
                    {
                      "details":"Using DB2 in a default set-up, you should find an entry in the list labelled <span class='resource'>IBM DB2 ODBC Driver - DB2COPY1</span>. Select this entry and click Finish."
                    },
                    {
                      "details":"In the resulting Add dialog, set the <span class='resource'>Data source name = USERS</span>, leave the <span class='resource'>Database alias = USERS</span> and click OK. You will be returned to the <span class='resource'>ODBC Data Source Administrator (64-bit)</span> window and you should clikc OK again to close this window too."
                    }
                  ]
                }
              },
              {
                "section":"Create an integration node, and set up your credentials by completing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Start an App Connect Enterprise command console and execute the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code><br><code><span class='cmdname'>mqsistop TESTNODE</span></code><br><code><span class='cmdname'>mqsisetdbparms TESTNODE -n odbc::USERS -u db2admin -p pass123</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code>"
                    },
                    {
                      "details":"The above mqsisetdbparms command configures the runtime with the required credentials to access the USERS database."
                    }
                  ]
                }
              },
              {
                "section":"Create the required output directory on your file system and then deploy:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow assumes a Windows runtime platform will be used and will attempt to write an output file to the directory <code>C:\\temp</code>. If you are using Linux, change the <span class='application'>Directory</span> property on the <span class='application'>Basic</span> tab of the <span class='application'>FileOutput</span> node in the message flow <span class='application'>DatabaseInput</span>"
                    },
                    {
                      "details":"If you have changed the flow to use a different directory then rebuild the provided BAR file named <span class='application'>DatabaseInput.bar</span> which you will find inside the <span class='application'>ExampleDatabaseInput</span> application. Drag and drop deploy the BAR file on to your integration server."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Enabling ODBC Connections to the databases",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ah14440_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>DatabaseInput.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Return to your DB2 Command Window and make an insert into the EMPLOYEES table using this command:<br><code><span class='cmdname'>INSERT INTO MYSCHEMA.EMPLOYEES (PKEY, FIRSTNAME, LASTNAME, COUNTRY) VALUES (1, 'Ben', 'Thompson', 'GB')</span></code>"
                          },
                          {
                            "details":"Click the View Path icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png' alt='' /> to show the path taken through the message flow. This should show a green line highlighting that the DatabaseInput node propagated data to the FileOutput node."
                          },
                          {
                            "details":"Check the output directory <span class='resource'>C:\\temp</span> and you should find an output file named <span class='resource'>Output.xml</span> has been created which contains this data:<br><span class='resource'>&lt;NS1:EMPLOYEES xmlns:NS1=\"http://users/myschema\"&gt;&lt;PKEY&gt;1&lt;/PKEY&gt;&lt;FIRSTNAME&gt;Ben&lt;/FIRSTNAME&gt;&lt;LASTNAME&gt;Thompson&lt;/LASTNAME&gt;&lt;COUNTRY&gt;GB&lt;/COUNTRY&gt;&lt;/NS1:EMPLOYEES&gt;</span>"
                          },
                          {
                            "details":"You may wish to explore the row entry which has been left in the EVENTS table. Once an event record has been processed, its EVENT_STATUS column will be updated from the value 0 to the value 1. "
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the DatabaseInput node which communicates with a DB2 database using ODBC in order to be triggered when data is inserted."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Configuring a DatabaseInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc34042_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "MQ - Using the MQInput, MQGet and MQOutput nodes with messages and queues":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"MQ - Using the MQInput, MQGet and MQOutput nodes with messages and queues",
        "shortDescription":"Learn how to use the MQInput, MQGet and MQOutput nodes to interact with queues defined on a local queue manager.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"MQInput node"
          },
          {
            "title":"MQOutput node"
          },
          {
            "title":"MQGet node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to interact with queues defined on a local queue manager."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates two simple message flows. The first is driven from an input XML file which contains data representing three famous couples (Romeo and Juliet, Lennon and McCartney, Laurel and Hardy). After this data is read by a FileInput node, a Compute node iterates over the data and divides each pair. MQOutput nodes send separate messages with the name of one person to one queue and the name of the other person to a second queue. Both MQ messages are given the same MsgId in their MQMD header. A second message flow is driven by an MQInput node reading one of these messages from its queue. Next an MQGet node uses the MsgId to read in the second message. Finally a downstream Trace node writes out a trace file containing both pieces of data reunited together."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses MQ nodes which are configured to interact with a local queue manager. The flows expect to be deployed to an integration node associated with a local queue manager. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, a project will be created in your workspace: An application named <span class='application'>ExampleMQ</span>."
              },
              {
                "section":"<span class='application'>ExampleMQ</span> provides two message flows named <span class='resource'>MQOutput</span> and <span class='resource'>MQInput_MQGet</span>."
              },
              {
                "section":"The <span class='resource'>MQOutput</span> message flow is driven by a FileInput node configured to receive an XML input message containing three famous couples (Romeo and Juliet, Lennon and McCartney, Laurel and Hardy). The FileInput is wired to a Compute node which loops over the data, dividing each pair. MQOutput nodes send separate messages (but both given the same MsgId) with the name of one person to QUEUE1 and the name of the other person to QUEUE2"
              },
              {
                "section":"The <span class='resource'>MQInput_MQGet</span> message flow uses an MQInput node to read a message from QUEUE1. Next, an MQGet node reads the associated message (using the matching MsgId) from QUEUE2. Finally a Trace node records the re-unified information from the message pair to a local file."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExampleMQ</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flows",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The tutorial includes a Trace node which uses a trace directory. The tutorial also requires MQ definitions for two queues.  Execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment. The tutorial scenario also uses a FileInput node which is configured to read from this directory, so if you choose an alternative you will also need to modify this part of the flow."
                    },
                    {
                      "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Next create the two queues by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(QUEUE1)</code><br><code>define ql(QUEUE2)</code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>ExampleMQ.bar</span> which you will find inside the <span class='application'>ExampleMQ</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>MQOutput.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Copy the input file named <span class='resource'>input.xml</span> to the input directory which is being monitored by the FileInput node deployed as part of message flow <span class='resource'>MQOutput</span>, which by default is <span class='resource'>C:\\temp</span>."
                          },
                          {
                            "details":"Click the View Path icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/viewPath.png' alt='' /> and a green line is plotted showing the path travelled by the message through the flow. You can click on the wires between nodes to view what the message data looked like at different points in the flow."
                          },
                          {
                            "details":"To inspect the result of the second message flow <span class='resource'>MQInput_MQGet.msgflow</span>, using a text editor open the trace file <span class='resource'>C:\\temp\\TraceMQInput_MQGet.txt</span>, which should contain three entries with correctly re-paired data like this:<br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.080488</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  'Romeo' and 'Juliet'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.082225</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  'Lennon' and 'McCartney'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-13 13:20:49.083049</code><br><code>The message from the MQInput node queue is placed in the Root of the logical message tree</code><br><code>The message from the MQGet node queue is placed in the location Environment.ReadByMQGetNodeOffQueue</code><br><code>The pairing is:  'Laurel' and 'Hardy'</code><br><code>================================================================================</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the MQInput, MQGet and MQOutput nodes to interact with queues defined on a local queue manager."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"MQInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04560_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"MQOutput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04570_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"MQGet node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac20806_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "MQ - Using the LocalEnvironment and MQEndpoint Policy to override MQOutput configuration":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"MQ - Using the LocalEnvironment and MQEndpoint Policy to override MQOutput configuration",
        "shortDescription":"Learn how to use the LocalEnvironment tree to dynamically configure the output queue written to by the MQOutput node and how to use an MQEndpoint Policy to override its queue manager connection.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"MQOutput node"
          },
          {
            "title":"MQEndpoint Policy"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to dynamically configure message flow settings when interacting with MQ."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow which is driven from a JSON input over HTTP. After receiving the message using an HTTPInput node, the same message is echoed back using an HTTPReply node. The HTTPInput node also drives an HTTPHeader node which removes the HTTP Input header. Next, a Mapping node sets the name of the output queue into the LocalEnvironment tree to dynamically control the MQOutput node later in the message flow. Before reaching the MQOutput node, an MQHeader node adds an MQMD header on to the message ready for output."
            },
            {
              "section":"The flow is configured to communicate with a local queue manager. The flow itself does not include configuration for the name of the queue manager. This is determined by the queue manager which is associated with the integration node where you deploy the flow (or associated with a standalone integration server if you choose to deploy it to this kind of environment)."
            },
            {
              "section":"The tutorial also provides an MQEndpoint Policy in a Policy Project which is used to specify the connection information to another queue manager. After testing the initial flow, the tutorial redeploys the flow using a BAR file which contains an override setting which associates the flow with the MQEndpoint Policy."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses an MQOutput node which is configured to interact with a local queue manager. The flows expect to be deployed to an integration node associated with a local queue manager. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleMQOutput</span> and a policy project named <span class='application'>MyExamplePolicies</span>."
              },
              {
                "section":"<span class='application'>ExampleMQOutput</span> provides a single message flow named <span class='resource'>MQOutput</span>. The <span class='resource'>MQOutput</span> message flow is driven by an HTTPInput node configured to receive a simple JSON input message. The HTTPInput echoes the message to an HTTPReply, but also drives an HTTPHeader node to remove the HTTP Input header and then invoke a Mapping node. The Mapping node configures the LocalEnvironment tree at <code>LocalEnvironment.Destination.MQ.DestinationData.queueName</code> with the name of a desired output queue. After an MQHeader node, which creates the MQMD header, an MQOutput node is configured to distribute the message based upon the queue name in the LocalEnvironment, courtesy of the setting on the <span class='resource'>Advanced</span> tab which specifies <code>Destination Mode = Destination List</code>. Note that on the <span class='resource'>Basic</span> tab the property <code>Queue name = NOT_USED</code> will be ignored because of the other property settings just discussed."
              },
              {
                "section":"The Policy Project <span class='application'>MyExamplePolicies</span> provides a single policy named <span class='resource'>MyMQPolicy.policyxml</span> which is configured with a different queue manager: <code>Queue manager name = TESTQM2</code>. This policy is used by the second part of the tutorial where the flow settings are overidden using a second BAR file which also carries this policy project."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExampleMQOutput</span> is ready to be deployed and tested. To deploy, two separate BAR files are provided: <span class='resource'>MQOutputDeploy1.bar</span> and <span class='resource'>MQOutputDeploy2.bar</span>. When to use each of these BAR files, is described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare two queue managers and an integration node, and then deploy the message flows",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The tutorial requires two MQ queue managers, each with the definition of a queue named OUTPUT.  Execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Next create a queue by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(OUTPUT)</code>"
                          },
                          {
                            "details":"Create and start a second queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM2</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM2</span></code>"
                          },
                          {
                            "details":"Create a queue of the same name on this second queue manager by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM2</span></code><br><code>define ql(OUTPUT)</code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the first queue manager you created above by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>MQOutputDeploy1.bar</span> which you will find inside the <span class='application'>ExampleMQOutput</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>MQOutput.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>{\"Message\":\"Hello World\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. Close the dialog and a green line is shown plotting the path of the message. You can click on the wires to inspect what the message looked like as it travelled through the flow. When you are finished return the flow to edit mode."
                          },
                          {
                            "details":"The MQOutput node should have written a message to the queue OUTPUT on queue manager TESTQM.  You can check the queue depth using these commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>dis ql(OUTPUT) CURDEPTH</code><br>You can also read the message from the queue like this:<br><code>amqsget OUTPUT TESTQM</code><br><code>Sample AMQSGET0 start</code><br><code>message &lt;{\"Message\":\"Hello World\"}&gt;</code>"
                          },
                          {
                            "details":"Back in the Toolkit, we will now use another method of overriding configuration. Look inside the <span class='application'>ExampleMQOutput</span> application to locate a second provided BAR file named <span class='application'>MQOutputDeploy2.bar</span>. Open the BAR file, and look at the Manage tab. You will see it contains both the <span class='application'>ExampleMQOutput</span> application and also a policy named <span class='application'>MyMQPolicy</span>. Expand the application and message flow:  <span class='application'>ExampleMQOutput / MQOutput.msgflow / MQOutput</span>. With the message flow node named <span class='application'>MQOutput</span> selected, look at the properties and you should see that the Policy property has been overriden."
                          },
                          {
                            "details":"Drag and drop deploy <span class='application'>MQOutputDeploy2.bar</span>. As discussed above, in this BAR file the message flow's MQOutput node has an override property which has been set: <code>Policy = {MyExamplePolicies}:MyMQPolicy</code>  (IMPORTANT WARNING! Be careful not to accidentally remove this override if you choose to rebuild the BAR file!)"
                          },
                          {
                            "details":"Repeat the same test, and you should find that this time, the message is written to the queue OUTPUT on queue manager TESTQM2 instead of queue manager TESTQM."
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the LocalEnvironment tree to dynamically configure the output queue written to by the MQOutput node and also how to use an MQEndpoint Policy to override its queue manager connection."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"MQOutput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04570_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "MQ - Using the Publication node to publish messages on a topic":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"MQ - Using the Publication node to publish messages on a topic",
        "shortDescription":"Learn how to use the Publication node to publish messages on an MQ topic defined on a local queue manager.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Publication node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to publish messages on an MQ topic defined on a local queue manager."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that is driven from a JSON input message over HTTP. An HTTPInput node receives the message and passes it unchanged to an HTTPReply node which echoes the same message back to the Requestor. The HTTPInput node also drives an HTTP Header node which deletes the HTTP input header, before invoking a Mapping node whose role is to set a message topic in the logical tree. Finally, a Publication node publishes to the defined MQ topic. A second message flow is provided which receives messages from three separate input queues, each of which receive messages courtesy of MQ subscriptions to the same topic used by the publication flow."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses the Publication node which requires your integration node or server to be associated with a local queue manager, so an MQ installation is required. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, a project will be created in your workspace: An application named <span class='application'>ExamplePublication</span>."
              },
              {
                "section":"<span class='application'>ExamplePublication</span> provides two message flows named <span class='resource'>Publication</span> and <span class='resource'>Subscription</span>."
              },
              {
                "section":"The <span class='resource'>Publication</span> message flow is driven by an HTTPInput nodes configured to receive a JSON input message. The HTTPInput is wired to an HTTPHeader node which deletes the input HTTP header and then drives a Mapping node to set the Topic name in the logical tree. The last node in the flow is the Publication node which publishes the message on the MQ topic."
              },
              {
                "section":"The <span class='resource'>Subscription</span> message flow contains three separate MQInput nodes which each read from separate queues. Each MQInput is wired to the same Trace node which records information from the message to a local file."
              },
              {
                "section":"Once imported using the link on the right, the application <span class='application'>ExamplePublication</span> is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare a trace directory, create a queue manager and integration node, and then deploy the message flows",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The tutorial includes a Trace node which uses a trace directory. The tutorial also requires MQ definitions for three queues and three subscriptions.  Execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Next create the three queues and three subscriptions by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(SUBQ1)</code><br><code>define ql(SUBQ2)</code><br><code>define ql(SUBQ3)</code><br><code>define sub(SUB1) TOPICSTR(EXAMPLE_TOPIC) DEST(SUBQ1)</code><br><code>define sub(SUB2) TOPICSTR(EXAMPLE_TOPIC) DEST(SUBQ2)</code><br><code>define sub(SUB3) TOPICSTR(EXAMPLE_TOPIC) DEST(SUBQ3)</code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node which is associated with the above queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span> -q <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>PublishSubscribe.bar</span> which you will find inside the <span class='application'>ExamplePublication</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>Publication.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>{\"Message\":\"Hello World\"}</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The same data should be echoed in the response. Close the dialog and a green line is shown plotting the full path of the message through the flow."
                          },
                          {
                            "details":"Using a text editor open the trace file <span class='resource'>C:\\temp\\TracePublication.txt</span>, which should contain three entries, one for each of the paths in the Subscription flow:<br><code>================================================================================</code><br><code>A message arrived at the Trace node at 2019-08-12 21:53:11.597892</code><br><code>The flow propagation arrived through input queue 'SUBQ3'</code><br><code>The received message contained this data: 'Hello World'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>A message arrived at the Trace node at 2019-08-12 21:53:11.597892</code><br><code>The flow propagation arrived through input queue 'SUBQ2'</code><br><code>The received message contained this data: 'Hello World'</code><br><code>================================================================================</code><br><code>================================================================================</code><br><code>A message arrived at the Trace node at 2019-08-12 21:53:11.597892</code><br><code>The flow propagation arrived through input queue 'SUBQ1'</code><br><code>The received message contained this data: 'Hello World'</code><br><code>================================================================================</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the Publication node publishing messages on an MQ topic defined on a local queue manager."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Publication node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac04590_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "JMS - Using the JMSOutput and JMSInput nodes with messages and queues":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"JMS - Using the JMSOutput and JMSInput nodes with messages and queues",
        "shortDescription":"Learn how to use the JMSOutput and JMSInput nodes to interact with queues defined on an IBM MQ queue manager.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"JMSOutput node"
          },
          {
            "title":"JMSInput node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to interact with IBM MQ using JMS configuration."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates two simple message flows. The first is driven using an input message over HTTP which is echoed back to the requestor unchanged, and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node adds a JMS header, and then a Mapping node prepares a fixed string of data in the message body. The message is passed to a JMSOutput node and written to a JMS destination queue. The second message flow starts from a JMSInput message which reads the output message from the JMS destination which was produced by the first message flow. The JMSInput is wired to a trace node which records the output in a trace file."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses JMS nodes which are configured to interact with an IBM MQ queue manager, but which could easily be substituted for another JMS provider if you wish. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleJMSOutput</span> and an application named <span class='application'>ExampleJMSInput</span>."
              },
              {
                "section":"<span class='application'>ExampleJMSOutput</span> provides a message flow named <span class='resource'>JMSOutput</span>."
              },
              {
                "section":"<span class='application'>ExampleJMSInput</span> provides a message flow named <span class='resource'>JMSInput</span>."
              },
              {
                "section":"The <span class='resource'>JMSOutput</span> message flow is driven by an HTTPInput node configured to receive any input message as BLOB. The message is echoed back using an HTTPReply node and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node creates a new JMS header, followed by a Mapping node which creates a new message body which is hardcoded to the value <code>This hardcoded data will be written to and read from the JMS queue</code>. Finally a JMSOutput node puts the message on to a JMS destination queue with the name jmsexample."
              },
              {
                "section":"The <span class='resource'>JMSInput</span> message flow uses a JMSInput node to read a message from the output queue of the first flow - jmsexample. The JMSInput node passes the message to a Trace node which records data to a local file."
              },
              {
                "section":"Once imported using the link on the right, the applications <span class='application'>ExampleJMSOutput</span> and <span class='application'>ExampleJMSInput</span> are ready to be deployed and tested. To deploy, you can use the provided BAR files, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare a trace directory, create a queue manager and integration node, set up the JMS configuration, and then deploy the message flows",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The tutorial includes a Trace node which uses a trace directory. The tutorial also requires MQ and JMS definitions.  Execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's Trace node will attempt to write a trace file to the directory <code><span class='cmdname'>C:\\temp</span></code>. Create this directory if it does not already exist, or edit the Trace node in the message flow to use a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Next create a queue and a listener by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(EXAMPLE)</code><br><code>define listener(LISTENER1) TRPTYPE(TCP) PORT(2414)</code><br><code>start listener(LISTENER1)</code>"
                          },
                          {
                            "details":"The connection to the queue manager will attempt to use the default server connection channel named SYSTEM.DEF.SVRCONN but you shouldn't need to create this as it will have been created when the queue manager was created. You may also need to consider your MQ channel security settings."
                          }
                        ]
                      }
                    },
                    {
                      "details":"When using the IBM App Connect Enterprise JMS nodes in a message flow, the configuration required to locate the JMS provider queues is defined using a JNDI (Java Naming and Directory Interface) bindings file. Your JMS provider is likely to provide an adminstration tool or script to help you generate this bindings file. This tutorial uses IBM MQ as JMS provider, and the instructions below describe how to set up this bindings file. These instructions assume you are running this tutorial on a Windows machine. For help with other platforms, please consult the product documentation. Set up the JMS configuration for the IBM MQ queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"On the filesystem, create the folder <code>C:\\JNDI-Directory</code> (unless you have previously editted your JMSAdmin.config file, this is where the JNDI bindings file will be generated when you complete the following instructions)."
                          },
                          {
                            "details":"IBM MQ provides a JMS Admin Tool Execution Script called <span class='resource'>JMSAdmin.bat</span>. Run this script, passing in a definitions file which is provided in the ExampleJMS application project which you previously imported to your Toolkit workspace. Assuming you used the default location for your MQ installation, and that your Toolkit workspace is defined at C:\\ToolkitWorkspace, open a command console and execute the following commands:<br><code>cd C:\\Program Files\\IBM\\MQ\\Java\\bin</code><br><code>JMSAdmin &lt; \"C:\\ToolkitWorkspace\\ExampleJMSOutput\\jms.defs\"</code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node by completing the following steps. Note that the integration node does not necessarily need to be co-located with the queue manager:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR files named <span class='application'>JMSOutput.bar</span> which you will find inside the <span class='application'>ExampleJMSOutput</span> application and <span class='application'>JMSInput.bar</span> which you will find inside the <span class='application'>ExampleJMSInput</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>JMSOutput.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The same data should be echoed in the response. Close the dialog and a green line is shown plotting the full path of the message through the flow."
                          },
                          {
                            "details":"Using a text editor open the trace file which should have been written by <span class='resource'>JMSInput.msgflow</span>. The trace file is <span class='resource'>C:\\temp\\TraceJMSInput.txt</span>, which should contain text like this:<br><code>================================================================================</code><br><code>The Trace node was reached at 2019-08-14 14:12:10.103358</code><br><code>The message from the JMSInput node queue is placed in the Root of the logical message tree</code><br><code>Casting this message back to a string shows that the data from the queue was:</code><br><code>This hardcoded data will be written to and read from the JMS queue</code><br><code>================================================================================</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the JMSOutput and JMSInput nodes to interact with queues defined on an IBM MQ queue manager."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"JMSInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac24820_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"JMSOutput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac24830_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "JMS - Using the JMSOutput and JMSReceive nodes with messages and queues":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"JMS - Using the JMSOutput and JMSReceive nodes with messages and queues",
        "shortDescription":"Learn how to use the JMSOutput and JMSReceive nodes to interact with queues defined on an IBM MQ queue manager.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"JMSOutput node"
          },
          {
            "title":"JMSReceive node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to interact with IBM MQ using JMS configuration."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates two simple message flows. The first is driven using an input message over HTTP which is echoed back to the requestor unchanged, and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node adds a JMS header, and then a Mapping node prepares a fixed string of data in the message body. The message is passed to a JMSOutput node and written to a JMS destination queue. The second message flow starts from an HTTPInput message which can receive any input. The next node is a JMSReceive node which reads a meesage from the same JMS destination which was written to by the first flow. If a message is read from the queue, then the following JMSHeader node removes the JMS header, and passes the body back to the original requestor using an HTTPReply node.  If no message is read from the queue, a Mapping node constructs a simple HTTP reply instead."
            },
            {
              "section":"The tutorial requires an ACE integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. This scenario uses JMS nodes which are configured to interact with an IBM MQ queue manager, but which could easily be substituted for another JMS provider if you wish. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using applications",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleJMSOutput</span> and an application named <span class='application'>ExampleJMSReceive</span>."
              },
              {
                "section":"<span class='application'>ExampleJMSOutput</span> provides a message flow named <span class='resource'>JMSOutput</span>."
              },
              {
                "section":"<span class='application'>ExampleJMSReceive</span> provides a message flow named <span class='resource'>JMSReceive</span>."
              },
              {
                "section":"The <span class='resource'>JMSOutput</span> message flow is driven by an HTTPInput node configured to receive any input message as BLOB. The message is echoed back using an HTTPReply node and also propagated to an HTTPHeader node which removes the HTTP header. Next, a JMSHeader node creates a new JMS header, followed by a Mapping node which creates a new message body which is hardcoded to the value <code>This hardcoded data will be written to and read from the JMS queue</code>. Finally a JMSOutput node puts the message on to a JMS destination queue with the name jmsexample."
              },
              {
                "section":"The <span class='resource'>JMSReceive</span> message flow is driven by an HTTPInput node and uses a JMSReceive node to read a message from the output queue of the first flow - jmsexample. If a message is read from the queue, then the following JMSHeader node removes the JMS header, and passes the body back to the original requestor using an HTTPReply node.  If no message is read from the queue, a Mapping node constructs a simple HTTP reply instead."
              },
              {
                "section":"Once imported using the link on the right, the applications <span class='application'>ExampleJMSOutput</span> and <span class='application'>ExampleJMSReceive</span> are ready to be deployed and tested. To deploy, you can use the provided BAR files, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using applications",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Create a queue manager and integration node, set up the JMS configuration, and then deploy the message flows",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The tutorial requires MQ and JMS definitions.  Execute the following steps to prepare your environment accordingly:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Create an IBM MQ queue manager and configure it by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Open the IBM App Connect Enterprise Console. If you don't already have one, create and start a queue manager:<br><code><span class='cmdname'>crtmqm</span> <span class='varname'>TESTQM</span></code><br><code><span class='cmdname'>strmqm</span> <span class='varname'>TESTQM</span></code>"
                          },
                          {
                            "details":"Next create a queue and a listener by typing the following commands:<br><code>runmqsc <span class='varname'>TESTQM</span></code><br><code>define ql(EXAMPLE)</code><br><code>define listener(LISTENER1) TRPTYPE(TCP) PORT(2414)</code><br><code>start listener(LISTENER1)</code>"
                          },
                          {
                            "details":"The connection to the queue manager will attempt to use the default server connection channel named SYSTEM.DEF.SVRCONN but you shouldn't need to create this as it will have been created when the queue manager was created. You may also need to consider your MQ channel security settings."
                          }
                        ]
                      }
                    },
                    {
                      "details":"When using the IBM App Connect Enterprise JMS nodes in a message flow, the configuration required to locate the JMS provider queues is defined using a JNDI (Java Naming and Directory Interface) bindings file. Your JMS provider is likely to provide an adminstration tool or script to help you generate this bindings file. This tutorial uses IBM MQ as JMS provider, and the instructions below describe how to set up this bindings file. These instructions assume you are running this tutorial on a Windows machine. For help with other platforms, please consult the product documentation. Set up the JMS configuration for the IBM MQ queue manager by completing the following steps:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"On the filesystem, create the folder <code>C:\\JNDI-Directory</code> (unless you have previously editted your JMSAdmin.config file, this is where the JNDI bindings file will be generated when you complete the following instructions)."
                          },
                          {
                            "details":"IBM MQ provides a JMS Admin Tool Execution Script called <span class='resource'>JMSAdmin.bat</span>. Run this script, passing in a definitions file which is provided in the ExampleJMS application project which you previously imported to your Toolkit workspace. Assuming you used the default location for your MQ installation, and that your Toolkit workspace is defined at C:\\ToolkitWorkspace, open a command console and execute the following commands:<br><code>cd C:\\Program Files\\IBM\\MQ\\Java\\bin</code><br><code>JMSAdmin &lt; \"C:\\ToolkitWorkspace\\ExampleJMSOutput\\jms.defs\"</code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Create an integration node by completing the following steps. Note that the integration node does not necessarily need to be co-located with the queue manager:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"In the console window, create an integration node by typing the following command:<br><code><span class='cmdname'>mqsicreatebroker</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Start the integration node by typing the following command:<br><code><span class='cmdname'>mqsistart</span> <span class='varname'>TESTNODE</span></code>"
                          },
                          {
                            "details":"Create an integration server associated with the integration node by typing the following command:<br><code><span class='cmdname'>mqsicreateexecutiongroup</span> <span class='varname'>TESTNODE</span> -e <span class='varname'>default</span></code>"
                          }
                        ]
                      }
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR files named <span class='application'>JMSOutput.bar</span> which you will find inside the <span class='application'>ExampleJMSOutput</span> application and <span class='application'>JMSReceive.bar</span> which you will find inside the <span class='application'>ExampleJMSReceive</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>JMSOutput.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The same data should be echoed in the response. Close the dialog and a green line is shown plotting the full path of the message through the flow."
                          }
                        ]
                      }
                    },
                    {
                      "details":"Open <span class='resource'>JMSReceive.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Click the Send Message icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/sendMessage.png' alt='' />."
                          },
                          {
                            "details":"A saved input message is provided named <span class='resource'>InputMessage</span> which contains this data:<br><span class='resource'>This can be anything</span><br>Select this input message and click Send and your message is sent to the HTTPInput node. The response message which is returned should match the data which was written to the JMS queue by the first message flow which contains this text:<br><span class='resource'>This hardcoded data will be written to and read from the JMS queue</span>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown how to use the JMSOutput and JMSReceive nodes to interact with queues defined on an IBM MQ queue manager."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"JMSReceive node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bc19200_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"JMSOutput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac24830_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "File - Using the FileInput node with Whole File record detection":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"File - Using the FileInput node with Whole File record detection",
        "shortDescription":"Learn how to use the FileInput node to parse the whole content of a file.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"FileInput node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to read the whole content of an input file."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that parses a whole input XML file using a FileInput node, and propagates all of the data as a single propagation downstream through the flow. A Mapping node transforms the XML format data to a comma separated output format, and writes it to an output file with a specified file name and directory, using a FileOutput node."
            },
            {
              "section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions from scratch",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, two projects will be created in your workspace: An application named <span class='application'>ExampleFileInputWholeFile</span> and a shared library named <span class='application'>FileCSV</span>."
              },
              {
                "section":"<span class='application'>ExampleFileInputWholeFile</span> provides a single message flow named <span class='resource'>FileInputWholeFile</span> which uses a FileInput node to receive an input XML file and propagate the data downstream through the flow. The XML data is transformed into a comma separated output format and written to an output file using a FileOutput node."
              },
              {
                "section":"Once imported using the link on the right, the provided projects are ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileInput node will attempt to read input files from the directory <code><span class='cmdname'>C:\\temp\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"The message flow's FileOutput node will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>FileInputWholeFile.bar</span> which you will find inside the <span class='application'>ExampleFileInputWholeFile</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>FileInputWholeFile.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputWholeFile/WholeFileInput.xml</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."
                          },
                          {
                            "details":"In the Flow Exerciser toolbar, click the View Path icon <img src='http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png' alt='View path' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."
                          },
                          {
                            "details":"<span class='resource'>WholeFileInput.xml</span> contains this data:<br><code>&lt;Message xmlns=&quot;http://www.ibm.com/ace/dev/FileXML&quot;&gt;<br>&lt;Field1&gt;United Kingdom&lt;/Field1&gt;<br>&lt;Field2&gt;USA&lt;/Field2&gt;<br>&lt;Field3&gt;Germany&lt;/Field3&gt;<br>&lt;Field4&gt;France&lt;/Field4&gt;<br>&lt;Field5&gt;India&lt;/Field5&gt;<br>&lt;/Message&gt;</code>"
                          },
                          {
                            "details":"The flow should create an output file named <span class='resource'>C:\\temp\\FileOutput\\WholeFileOutput.txt</span> which contains this data:<br><code>United Kingdom,USA,Germany,France,India</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the FileInput node parsing the whole content of a file."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"FileInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55150_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "File - Using the FileInput node with Fixed Length record detection":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"File - Using the FileInput node with Fixed Length record detection",
        "shortDescription":"Learn how to use the FileInput node to parse fixed length records from a file.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"FileInput node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to read fixed length input data from a file."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives fixed length data from an input file using a FileInput node, and propagates records downstream through the flow one at a time. A Mapping node transforms each data record into an XML format, and adds it to a staging file using a FileOutput node. Once all records have been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."
            },
            {
              "section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions from scratch",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleFileInputFixedLength</span>."
              },
              {
                "section":"<span class='application'>ExampleFileInputFixedLength</span> provides a single message flow named <span class='resource'>FileInputFixedLength</span> which uses a FileInput node to receive fixed length data from an input file and propagate the records downstream through the flow one at a time. Each record is transformed into XML and added to a staging file using a FileOutput node. After the last record has been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileInput node will attempt to read input files from the directory <code><span class='cmdname'>C:\\temp\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"The message flow's FileOutput node will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>FileInputFixedLength.bar</span> which you will find inside the <span class='application'>ExampleFileInputFixedLength</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>FileInputFixedLength.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputFixedLength/FixedLengthInput.txt</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."
                          },
                          {
                            "details":"In the Flow Exerciser toolbar, click the View Path icon <img src='http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png' alt='View path' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."
                          },
                          {
                            "details":"<span class='resource'>FixedLengthInput.txt</span> contains this data:<br><code>UnitedKingdom&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;USA&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Germany&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;France&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;India&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code>"
                          },
                          {
                            "details":"The flow should create an output file named <span class='resource'>C:\\temp\\FileOutput\\FixedLengthOutput.txt</span> which contains this data:<br><code>&lt;Message&gt;&lt;RecordNumber&gt;1&lt;/RecordNumber&gt;&lt;RecordData&gt;UnitedKingdom&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;2&lt;/RecordNumber&gt;&lt;RecordData&gt;USA&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;3&lt;/RecordNumber&gt;&lt;RecordData&gt;Germany&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;4&lt;/RecordNumber&gt;&lt;RecordData&gt;France&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;5&lt;/RecordNumber&gt;&lt;RecordData&gt;India&lt;/RecordData&gt;&lt;/Message&gt;</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the FileInput node parsing fixed length records from a file."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"FileInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55150_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "File - Using the FileInput node with Delimited record detection":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"File - Using the FileInput node with Delimited record detection",
        "shortDescription":"Learn how to use the FileInput node to parse delimited records from a file.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"FileInput node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to read delimited input data from a file."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives comma separated data from an input file using a FileInput node, and propagates records downstream through the flow one at a time. A Mapping node transforms each data record into an XML format, and adds it to a staging file using a FileOutput node. Once all records have been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."
            },
            {
              "section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions from scratch",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleFileInputDelimited</span>."
              },
              {
                "section":"<span class='application'>ExampleFileInputDelimited</span> provides a single message flow named <span class='resource'>FileInputDelimited</span> which uses a FileInput node to receive comma separated data from an input file and propagate the records downstream through the flow one at a time. Each record is transformed into XML and added to a staging file using a FileOutput node. After the last record has been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileInput node will attempt to read input files from the directory <code><span class='cmdname'>C:\\temp\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"The message flow's FileOutput node will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>FileInputDelimited.bar</span> which you will find inside the <span class='application'>ExampleFileInputDelimited</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>FileInputDelimited.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputDelimited/DelimitedInput.txt</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."
                          },
                          {
                            "details":"In the Flow Exerciser toolbar, click the View Path icon <img src='http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png' alt='View path' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."
                          },
                          {
                            "details":"<span class='resource'>DelimitedInput.txt</span> contains this data:<br><code>UnitedKingdom,USA,Germany,France,India</code>"
                          },
                          {
                            "details":"The flow should create an output file named <span class='resource'>C:\\temp\\FileOutput\\DelimitedOutput.txt</span> which contains this data:<br><code>&lt;Message&gt;&lt;RecordNumber&gt;1&lt;/RecordNumber&gt;&lt;RecordData&gt;UnitedKingdom&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;2&lt;/RecordNumber&gt;&lt;RecordData&gt;USA&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;3&lt;/RecordNumber&gt;&lt;RecordData&gt;Germany&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;4&lt;/RecordNumber&gt;&lt;RecordData&gt;France&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordNumber&gt;5&lt;/RecordNumber&gt;&lt;RecordData&gt;India&lt;/RecordData&gt;&lt;/Message&gt;</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the FileInput node parsing delimited records from a file."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"FileInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55150_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "File - Using the FileInput node with Parsed Record Sequence record detection":{
    "version":"0.1",
    "pageContent":{
      "_comments":"object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"File - Using the FileInput node with Parsed Record Sequence record detection",
        "shortDescription":"Learn how to use the FileInput node to parse records from a file using a message model.",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainFlow",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"FileInput node"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"Use IBM App Connect Enterprise to read input data from a file using a message model."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the ACE concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates a simple message flow that receives modeled XML data from an input file using a FileInput node, and propagates records downstream through the flow one at a time. A Mapping node transforms each data record into a string format (propagated using the BLOB domain), and adds it to a staging file using a FileOutput node. Once all records have been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."
            },
            {
              "section":"The tutorial requires an IBM App Connect Enterprise integration node owned server, or a standalone server."
            },
            {
              "section":"In IBM App Connect Enterprise, an application is a container for all the resources that are required to create a solution. This tutorial provides an application to hold the message flow. There are no other pre-requisites needed by the scenario."
            }
          ]
        },
        "helpLinks":{
          "_helpLinksComment":"Helplinks that have a type:web attribute are rendered as web links. Otherwise, links are assumed to be to embedded Help topics in the Knowledge Center.",
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions from scratch",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"When you click Import, one project will be created in your workspace: An application named <span class='application'>ExampleFileInputParsedRecordSequence</span>."
              },
              {
                "section":"<span class='application'>ExampleFileInputParsedRecordSequence</span> provides a single message flow named <span class='resource'>FileInputParsedRecordSequence</span> which uses a FileInput node to receive modeled XML data from an input file and propagate the records downstream through the flow one at a time. Each XML record is transformed into a string format (propagated using the BLOB domain) and added to a staging file using a FileOutput node. After the last record has been taken from the input file, the FileInput node sends a propagation out of the End of Data terminal, which is routed into the Finish File input terminal of the FileOutput node. This causes the staging file to be finished and moved to the specified output file name and directory."
              },
              {
                "section":"Once imported using the link on the right, the provided project is ready to be deployed and tested. To deploy, you can use a provided BAR file, as described on the Prepare tab."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions from scratch",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12002_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare an output directory, create an integration node and deploy the message flow",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"Prepare the scenario by executing the following steps:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"The message flow's FileInput node will attempt to read input files from the directory <code><span class='cmdname'>C:\\temp\\FileInput</span></code>. Create this directory if it does not already exist, or edit the FileInput node in the message flow to read from a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"The message flow's FileOutput node will attempt to write output files to the directory <code><span class='cmdname'>C:\\temp\\FileOutput</span></code>. Create this directory if it does not already exist, or edit the FileOutput node in the message flow to write to a different directory suitable for your runtime environment."
                    },
                    {
                      "details":"Next, create an integration node by starting an App Connect Enterprise command console and executing the following commands:<br><code><span class='cmdname'>mqsicreatebroker TESTNODE</span></code><br><code><span class='cmdname'>mqsistart TESTNODE</span></code><br><code><span class='cmdname'>mqsicreateexecutiongroup TESTNODE -e server</span></code>"
                    },
                    {
                      "details":"Back in the Toolkit, drag and drop deploy the provided BAR file named <span class='application'>FileInputParsedRecordSequence.bar</span> which you will find inside the <span class='application'>ExampleFileInputParsedRecordSequence</span> application."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{

          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"<h4>Use the Flow Exerciser to test the tutorial scenario",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Open <span class='resource'>FileInputParsedRecordSequence.msgflow</span>.",
                      "substeps":{
                        "type":"unordered",
                        "details":[
                          {
                            "details":"Click the Flow Exerciser icon <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/iib/startFlowExerciser.png' alt='' /> to start testing the flow (when challenged you do not need to redeploy the flow again)."
                          },
                          {
                            "details":"Copy the provided input message from <code>&lt;Integration Toolkit workspace&gt;/ExampleFileInputParsedRecordSequence/ParsedRecordSequenceInput.txt</code> to the input directory that you created on your file system. The file will be processed by the message flow and then deleted."
                          },
                          {
                            "details":"In the Flow Exerciser toolbar, click the View Path icon <img src='http://ot4i.github.io/iib-tutorials/images/icons/iib/viewPath.png' alt='View path' /> to highlight the message path through the message flow. You can click on any highlighted connection to see the message data that passed through that connection."
                          },
                          {
                            "details":"<span class='resource'>ParsedRecordSequenceInput.txt</span> contains this data:<br><code>&lt;Message&gt;&lt;RecordData&gt;UnitedKingdom&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;USA&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;Germany&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;France&lt;/RecordData&gt;&lt;/Message&gt;<br>&lt;Message&gt;&lt;RecordData&gt;India&lt;/RecordData&gt;&lt;/Message&gt;</code>"
                          },
                          {
                            "details":"The flow should create an output file named <span class='resource'>C:\\temp\\FileOutput\\ParsedRecordSequenceOutput.txt</span> which contains this data:<br><code>Record Number 1 Data = UnitedKingdom<br>Record Number 2 Data = USA<br>Record Number 3 Data = Germany<br>Record Number 4 Data = France<br>Record Number 5 Data = India</code>"
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "section":"This tutorial has shown the FileInput node parsing records from a file using a message model."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"FileInput node",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ac55150_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Testing your message flow by using the Flow exerciser",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/rt26110_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Integration services (SOAP/HTTP inputs)":{
    "version":"0.6",
    "pageContent":{
      "comments":"Must use underscore for en-us.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Integration services (SOAP/HTTP inputs)",
        "shortDescription":"Learn about integration services that use SOAP/HTTP inputs",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "resourceToOpen":"MainService",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "topicList":[
          {
            "title":"Integration services"
          },
          {
            "title":"SOAP/HTTP web services"
          },
          {
            "title":"Transformation using graphical data mapping"
          }
        ],
        "outcomesName":"Learning outcomes",
        "outcomeList":[
          {
            "title":"Understand how a SOAP/HTTP web service interface is defined via an integration service."
          },
          {
            "title":"Learn how to implement web service operations in an integration service."
          },
          {
            "title":"Learn how a web service request is represented in App Connect Enterprise, for transformation or routing to another system."
          }
        ],
        "summary":{
          "comments":"",
          "overviewName":"OVERVIEW",
          "sections":[
            {
              "section":"App Connect Enterprise provides a specific project type, an integration service, for developing web service implementations. These help you define and implement a web service interface which can be called from other standard clients, and where the interface is defined by WSDL. This tutorial shows a simple example where a web service operation implements a transformation between temperature formats."
            },
            {
              "section":"The integration service editor separates the tasks of defining an interface from implementing that interface. In this example, the interface defines two operations, both of which have numeric inputs and outputs representing temperature in different scales. The interface is stored as a standard WSDL document. An editor is provided to show the interface, and help you build or change it. Each operation is implemented as a subflow, using the built-in Mapping nodes to transform the incoming requests."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Developing integration solutions by using integration services",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12004_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Transforming a SOAP message in a message map",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/br30017_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and an integration service project called <span class='uicontrol'>TemperatureConverter</span> will be added to your workspace, and the integration service editor will be opened to show you its contents. Next, click Prepare for an explanation of the different parts of the integration service editor."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using integration services",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12004_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Prepare the tutorial",
            "_prepareComment":"Prepare the tutorial",
            "sections":[
              {
                "section":"Explore the imported integration service:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"In the main pane you will see the integration service editor, which you can reopen by clicking on the integration service Description inside the <b>TemperatureConverter</b> project. The editor has two tabs, one called <b>Service</b> and another called <b>Interface</b>."
                    },
                    {
                      "details":"If you click on <b>Interface</b>, you will see the two web service operations which have been defined, along with their input and output types. These are called <b>CtoF</b> and <b>FtoC</b>."
                    },
                    {
                      "details":"If you click back on Service, you will see a link for each operation name defined in the Interface tab, along with links for error handling (named Timeout, Failure and Catch). Click on each of <b>CtoF</b> and <b>FtoC</b> to see the subflow which implements that operation. There is a Mapping node in each one which performs a transformation on the input data, to convert between Celsius and Fahrenheit temperatures."
                    },
                    {
                      "details":"Finally, click on the SOAP/HTTP Binding link and look at the Properties pane; this will show you properties which apply to all operations, such as the URL prefix and whether https is enabled."
                    }
                  ]
                }
              },
              {
                "section":"Create an integration server and connect your App Connect Enterprise Toolkit:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Assuming you are using a Windows platform, open an App Connect Enterprise Command Console and start an integration server using the following command:<br><code>IntegrationServer --work-dir C:\\TESTSERVER --name TESTSERVER --admin-rest-api 7600 --http-port-number 7800 --console-log</code> <br>where <b>C:\\TESTSERVER</b> is a folder on your file system that the server will use for its working directory."
                    },
                    {
                      "details":"In the App Connect Enterprise Toolkit Integration Explorer view, right click the folder <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/IntegrationServers.png' alt='' /> and select the menu item  <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/ConnectToAnIntegrationServer.png' alt='' />. In the connection details panel, specify the <b>Host name</b> to be <b>localhost</b>, the <b>Port</b> to be <b>7600</b> and click Finish. This will connect your Toolkit and display the integration server that you started in the last step <img src='http://ot4i.github.io/ot4i.tutorials//dist/images/icons/ace/TESTSERVER.png' alt='' />"
                    },
                    {
                      "details":"Locate <b>TemperatureConverter.bar</b> inside the <b>TemperatureConverter</b> integration service in the Application Development view, and deploy it by dragging and dropping the BAR file on to the integration server in the Integration Explorer view."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using integration services",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12004_.htm",
                "type":"web"
              }
            ]
          },
          "actions-removed":{
            "title":"Prepare Actions",
            "details":[
              {
                "name":"Deploy",
                "method":"deployArtifacts()"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Test the integration service to complete the tutorial",
            "_runComment":"",
            "sections":[
              {
                "section":"Test the <b>TemperatureConverter</b> integration service by sending it data using an HTTP client such as cURL:",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"<code>cd C:\\workspace</code><br> where <b>C:\\workspace</b> is the location of your Toolkit Eclipse workspace directory on the filesystem.<br><code>curl -X POST http://localhost:7800/TemperatureConverter/TemperatureConverter -d @.\\TemperatureConverter\\CtoFrequest.xml</code>"
                    },
                    {
                      "details":"This input message looks like this:<br><b>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\" xmlns:tem=\"http://TemperatureConverter\"&gt;<br>&lt;soapenv:Body&gt;<br>&lt;tem:CtoF&gt;&lt;TemperatureInC&gt;0&lt;/TemperatureInC&gt;&lt;/tem:CtoF&gt;<br>&lt;/soapenv:Body&gt;<br>&lt;/soapenv:Envelope&gt;</b>"
                    },
                    {
                      "details":"The reply message should look like this:<br><b>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;<br>&lt;soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;<br>&lt;soapenv:Body&gt;<br>&lt;io:CtoFResponse xmlns:io=\"http://TemperatureConverter\"&gt;&lt;TemperatureInF&gt;32&lt;/TemperatureInF&gt;&lt;/io:CtoFResponse&gt;<br>&lt;/soapenv:Body&gt;<br>&lt;/soapenv:Envelope&gt;</b>"
                    },
                    {
                      "details":"You can use the provided input file named <b>FtoCrequest.xml</b> to test the integration service's other operation."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Developing integration solutions by using integration services",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bi12004_.htm",
                "type":"web"
              }
            ]
          }
        }
      }
    }
  },
  "Modeling CSV data by using DFDL":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Modeling CSV data by using DFDL",
        "shortDescription":"Learn how to model CSV data by using Data Format Description Language (DFDL).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainDataFile",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Modeling CSV messages"
          },
          {
            "title":"Editing DFDL schema"
          },
          {
            "title":"Testing DFDL schema"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"An understanding of how the DFDL editor can be used to model and parse CSV data."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how to model Comma Separated Value (CSV) data by using DFDL schema."
            },
            {
              "section":"CSV is a data format for storing tabular data in the form of text records. For example, it can be used as an export format for spreadsheets and databases. "
            },
            {
              "section":"A CSV file consists of any number of records, each terminated by a new line of some kind. Each record consists of fields, separated by a literal comma. All records have an identical sequence of fields, and the first record is often a header. Double quotation marks are used as 'escape' characters in fields that contain a literal comma or a new line as part of their value."
            },
            {
              "section":"The DFDL editor provides a wizard to help you create a DFDL schema that models your particular CSV file."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Message modeling overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"How to model data with DFDL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"CSV messaging standard",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad20830_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and a shared library is imported into your workspace."
              },
              {
                "section":"Library <span class='library'>CommaSeparatedValues</span> contains an example CSV file in 'Other resources'. Open the file and look at the records. The first record is a header, and there are five fields in each record: last name, first name, middle name, address, and date of birth. Note that address field has double quotation marks so that the comma in the address is not treated as a delimiter."
              },
              {
                "section":"You will now create a DFDL schema to model the example CSV file, by using the <span class='wintitle'>New Message Model</span> wizard."
              },
              {
                "section":"<b>Tip:</b> Ensure that steps 1 to 6 below are all visible in the <span class='uicontrol'>Tutorial Steps View</span> view before proceeding."
              },
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Click <span class='uicontrol'>New...</span> in the <span class='uicontrol'>Application Development</span> view, and select <span class='uicontrol'>Message Model...</span>. The <span class='wintitle'>New Message Model</span> wizard opens."
                    },
                    {
                      "details":"Select <span class='uicontrol'>CSV text</span> and click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"Select the option <span class='uicontrol'>Create a DFDL schema file using this wizard to guide you</span> and then click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"Click the <span class='uicontrol'>Browse</span> button and select the <span class='library'>CommaSeparatedValues</span> library."
                    },
                    {
                      "details":"In the <span class='uicontrol'>DFDL schema file name</span> field, type <span class='userinput'>CSV</span>, and in the <span class='uicontrol'>Message name</span> field, type <span class='userinput'>CSV_message</span>, then click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"Next, specify the details of the CSV file. In the <span class='uicontrol'>End of record character</span> list, select <span class='uicontrol'>Any newline</span>. Select the check box <span class='uicontrol'>The first record is a header</span>. In the <span class='uicontrol'>Number of fields</span> field, type <span class='userinput'>5</span>. Select <span class='uicontrol'>CSV Escape Scheme</span>, then click <span class='uicontrol'>Finish</span>."
                    }
                  ]
                }
              },
              {
                "section":"Two DFDL schemas are created in the library. The <span class='filepath'>CSV.xsd</span> schema models the overall CSV message. The <span class='filepath'>CommaSeparatedFormat.xsd</span> schema defines suitable default values for DFDL properties."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message modeling overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"How to model data with DFDL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"CSV messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad20830_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Exploring the schemas",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The <span class='library'>CommaSeparatedValues</span> library is shown in the <span class='uicontrol'>Application Development</span> view of your workspace."
              },
              {
                "section":"The <span class='filepath'>CSV.xsd</span> DFDL schema opens in the DFDL editor. If it does not, double-click the DFDL schema to open it in the editor."
              },
              {
                "section":"CSV_message is highlighted and models a CSV file with a header record and an unbounded number of body records. Each record has five fields. The main editor view shows the logical components of the message, such as elements and sequences. You can explore the CSV_message structure by expanding the elements."
              },
              {
                "section":"The physical rendering of each logical component is described by the DFDL properties in the <span class='uicontrol'>Representation Properties</span> tab. DFDL properties can either be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png' alt='' /> shown next to them, and hovering the cursor over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class='filepath'>CommaSeparatedFormat.xsd</span> file."
              },
              {
                "section":"You will be test parsing the example CSV file using CSV_message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial, and no Deploy step. Before test parsing, switch to the <span class='uicontrol'>DFDL Test</span> perspective by clicking the menu item <span class='uicontrol'>Window &gt; Open Perspective</span> and then selecting <span class='uicontrol'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png' alt='' />)."
              },
              {
                "section":"<b>Tip:</b> If this <span class='uicontrol'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class='uicontrol'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class='uicontrol'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The <span class='filepath'>CSV.xsd</span> DFDL schema is open in the DFDL editor. CSV_message should be highlighted in green."
              },
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Test parse the example CSV file:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Parse Model</span> window opens."
                          },
                          {
                            "details":"In the Message section, select <span class='uicontrol'>CSV_message</span>."
                          },
                          {
                            "details":"In the Parser Input section, select <span class='uicontrol'>Content from a data file</span> then click <span class='uicontrol'>Browse</span>."
                          },
                          {
                            "details":"Select the <span class='filepath'>simpleCSV.txt</span> file from <span class='library'>CommaSeparatedValues</span> then click <span class='uicontrol'>OK</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>. If asked to confirm switching to the <span class='uicontrol'>DFDL Test</span> perspective, click <span class='uicontrol'>Yes</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test parse are displayed. You should see the message <span class='systemoutput'>Parsing completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the parsed data file in the <span class='uicontrol'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class='uicontrol'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Test serialize the logical instance that resulted from the parse:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Serialize Model</span> window opens."
                          },
                          {
                            "details":"In the Serializer Input section, select <span class='uicontrol'>Content from 'DFDL Test - Logical Instance' </span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test serialize are displayed. You should see the message <span class='systemoutput'>Serialization completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the serialized data file in the <span class='uicontrol'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"As an alternative to the toolbar buttons, you can also test from the <span class='uicontrol'>DFDL Test - Parse</span> and <span class='uicontrol'>DFDL Test - Serialize</span> views, using the <span class='uicontrol'>Browse</span> button to select a data source and the green play icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png' alt='' /> to run the DFDL parser or serializer."
                    }
                  ]
                }
              },
              {
                "section":"Optional: You can further refine the DFDL schema that you created. "
              },
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Switch back to the <span class='uicontrol'>Integration Development</span> perspective."
                    },
                    {
                      "details":"Give the fields more descriptive names. Expand header and record, then click into each field name and type the new field name."
                    },
                    {
                      "details":"Model the 'date of birth' field as <span class='varname'>xs:date</span>. Expand record, select the 5th field, click on <span class='uicontrol'>string</span> and select <span class='uicontrol'>date</span> from the list of types. Be sure you make this change to the data type of the 5th field in the <span class='uicontrol'>record</span> structure, not in the <span class='uicontrol'>header</span> structure (all the fields in the header should be modelled as string)."
                    },
                    {
                      "details":"Save the updated schema. Check the <span class='uicontrol'>Problems</span> view; there should be no errors."
                    },
                    {
                      "details":"Use the <span class='uicontrol'>Test Parse Model</span> button again to test parse using the updated schema."
                    },
                    {
                      "details":"Check the <span class='uicontrol'>DFDL Test - Logical Instance</span> view. The new field names and data types are displayed."
                    }
                  ]
                }
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing a DFDL schema file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20065_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"CSV messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad20830_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Modeling COBOL data by using DFDL":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Modeling COBOL data by using DFDL",
        "shortDescription":"Learn how to model COBOL data by using Data Format Description Language (DFDL).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainCopybook",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Modeling COBOL messages"
          },
          {
            "title":"Editing DFDL schema"
          },
          {
            "title":"Testing DFDL schema"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"An understanding of how the DFDL editor can be used to model and parse COBOL data."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how to model COBOL data by using DFDL schema."
            },
            {
              "section":"COBOL is a programming language most commonly used on mainframe computers. In-memory COBOL data structures are defined either in COBOL programs or COBOL copybooks. These data structures are commonly written to files or message queues."
            },
            {
              "section":"COBOL data structures can contain fields of several different physical types, including character strings (PIC X), zoned decimals (PIC 9), packed decimals (PIC 9 COMP-3) and two's complement integers (PIC 9 COMP)."
            },
            {
              "section":"The DFDL editor provides a COBOL importer which can read COBOL copybooks and programs and generate the equivalent DFDL schema."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Message modeling overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"How to model data with DFDL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"Working with COBOL data",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd22930_.htm",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects and create schema",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and a shared library is imported into your workspace."
              },
              {
                "section":"Library <span class='library'>COBOL-Purchases</span> contains a COBOL copybook called <span class='filepath'>PurchaseData.cpy</span> in 'Other resources'. It defines a COBOL data structure that records the purchases made by a customer. Open the copybook and look at the COBOL structure which is called PurchaseData. The main points of interest are:"
              },
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"OCCURS DEPENDING ON. The purchases are recorded by an array of Item structures. There can be between 1 and 50 occurrences of Item, with the actual number provided by the ItemCount field at the start of the data."
                    },
                    {
                      "details":"REDEFINES. Structure ItemGrocery is followed by structure ItemNonGrocery which overlays it. This means that either ItemGrocery or ItemNonGrocery will be present, but not both. The preceding ItemType field indicates which is actually present."
                    }
                  ]
                }
              },
              {
                "section":"You will now create a DFDL schema to model the COBOL PurchaseData structure, using the <span class='wintitle'>New Message Model</span> wizard."
              },
              {
                "section":"<b>Tip:</b> Ensure that steps 1 to 7 below are all visible in the <span class='uicontrol'>Tutorial Steps View</span> before proceeding."
              },
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"With <span class='filepath'>PurchaseData.cpy</span> selected, click <span class='uicontrol'>New...</span> in the <span class='uicontrol'>Application Development</span> view, then select <span class='uicontrol'>Message Model...</span>. The <span class='wintitle'>New Message Model</span> wizard opens."
                    },
                    {
                      "details":"Select <span class='uicontrol'>COBOL</span> then click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"Select the option <span class='uicontrol'>Create a DFDL schema file by importing a COBOL copybook or program</span> then click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"<span class='filepath'>PurchaseData.cpy</span> should be highlighted. Click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"The wizard loads and compiles the copybook, and presents all the 01 level structures it finds. Click the <span class='uicontrol'>&gt;&gt;</span> button then click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"Here you can choose settings for DFDL properties such as default values, null values and padding characters. Leave the options to default and click <span class='uicontrol'>Next</span>."
                    },
                    {
                      "details":"Here you can choose platform dependent settings such as encoding and zoned decimal sign representation. Leave the options to default and click <span class='uicontrol'>Finish</span>."
                    }
                  ]
                }
              },
              {
                "section":"Two DFDL schemas are created in the library. The <span class='filepath'>PurchaseData.xsd</span> schema models the overall COBOL data structure. The <span class='filepath'>CobolDataDefinitionFormat.xsd</span> schema defines suitable default values for DFDL properties. The imported copybook is copied into the importFile folder and a report is created in the log folder."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message modeling overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"How to model data with DFDL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with COBOL data",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd22930_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Exploring the schemas",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The <span class='library'>COBOL-Purchases</span> library is shown in the <span class='uicontrol'>Application Development</span> view of your workspace."
              },
              {
                "section":"The <span class='filepath'>PurchaseData.xsd</span> DFDL schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."
              },
              {
                "section":"The PurchaseData message is highlighted and models the COBOL PurchaseData structure from the copybook. The main editor view shows the logical components of the message such as elements and sequences. You can explore the PurchaseData structure by expanding the elements."
              },
              {
                "section":"The physical rendering of each logical component is described by the DFDL properties in the <span class='uicontrol'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png' alt='' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from schema <span class='filepath'>CobolDataDefinitionFormat.xsd</span>."
              },
              {
                "section":"The COBOL REDEFINES within Item has been imported as <span class='varname'>xs:choice</span>. The COBOL OCCURS DEPENDING ON has resulted in the DFDL property <span class='varname'>Occurs Count Kind</span> for Item being set to 'expression', and the DFDL property <span class='varname'>Occurs Count</span> is a DFDL expression that refers to ItemCount."
              },
              {
                "section":"You will be test parsing an example binary data file using the PurchaseData message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class='uicontrol'>DFDL Test</span> perspective by clicking <span class='uicontrol'>Window &gt; Open Perspective</span> and then clicking <span class='uicontrol'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png' alt='' />)."
              },
              {
                "section":"<b>Tip:</b> If this <span class='uicontrol'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class='uicontrol'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class='uicontrol'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The <span class='filepath'>PurchaseData.xsd</span> DFDL schema is open in the DFDL editor. The PurchaseData message should be highlighted in green."
              },
              {
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Test parse an example COBOL file:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Parse Model</span> window opens."
                          },
                          {
                            "details":"In the Message section, select <span class='uicontrol'>PurchaseData</span>."
                          },
                          {
                            "details":"In the Parser Input section, select <span class='uicontrol'>Content from a data file</span> then click <span class='uicontrol'>Browse</span>."
                          },
                          {
                            "details":"Select the <span class='filepath'>PurchaseData1.bin</span> file from <span class='library'>COBOL-Purchases</span> then click <span class='uicontrol'>OK</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>. If asked to confirm switching to the <span class='uicontrol'>DFDL Test</span> perspective, click <span class='uicontrol'>Yes</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test parse are displayed. You should see the message <span class='systemoutput'>Parsing completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the parsed data file in the <span class='uicontrol'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class='uicontrol'>DFDL Test - Logical Instance</span> view, as a tree or as XML. If you expand Invoice and then each Item, you can see that the parser has correctly resolved the <span class='varname'>xs:choice</span> to either ItemGrocery or ItemNonGrocery."
                    },
                    {
                      "details":"When the parser encounters a <span class='varname'>xs:choice</span>, its default strategy is to parse the data by trying the first branch of the choice. If that fails, the parser backtracks and tries the second branch. And so on, until a branch parses successfully. In our example, the parser tries ItemGrocery first, and if that fails it backtracks and tries ItemNonGrocery."
                    },
                    {
                      "details":"Open the <span class='uicontrol'>DFDL Test - Trace</span> view and scroll back through the trace entries. You will see an error message CTDP3053E saying that a zoned number conversion error occurred. At this point the parser was attempting to parse the choice by trying ItemGrocery, but the error occurred. The trace entries after that show the parser backtracking and attempting to parse the choice by trying ItemNonGrocery, which succeeded."
                    },
                    {
                      "details":"Sometimes the default strategy of the parser is not sufficient to resolve a <span class='varname'>xs:choice</span> resulting from a COBOL REDEFINES. If that is the case, DFDL provides two other features to help you - discriminators and direct dispatch. These DFDL features are covered in detail by other IBM Integration Bus tutorials."
                    },
                    {
                      "details":"Test serialize the logical instance that resulted from the parse:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Serialize Model</span> window opens."
                          },
                          {
                            "details":"In the Serializer Input section, select <span class='uicontrol'>Content from a DFDL Test - Logical Instance</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test serialize are displayed. You should see the message <span class='systemoutput'>Serialization completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the serialized data file in the <span class='uicontrol'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"As an alternative to the toolbar buttons, you can also test from the <span class='uicontrol'>DFDL Test - Parse</span> and <span class='uicontrol'>DFDL Test - Serialize</span> views, using the <span class='uicontrol'>Browse</span> button to select a data source and the green play icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png' alt='' /> to run the DFDL parser or serializer."
                    }
                  ]
                }
              },
              {
                "section":"The shared library can be deployed to an integration node for use by message flows."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing a DFDL schema file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20065_.htm",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Modeling EDIFACT data by using DFDL":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Modeling EDIFACT data by using DFDL",
        "shortDescription":"Learn how to model EDIFACT data by using Data Format Description Language (DFDL).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainSchema",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Modeling EDIFACT messages"
          },
          {
            "title":"Editing DFDL schema"
          },
          {
            "title":"Testing DFDL schema"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"An understanding of how the DFDL editor can be used to model and parse EDIFACT data."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how to model UN/EDIFACT data by using DFDL schema."
            },
            {
              "section":"UN/EDIFACT is an international standard for EDI trading in commercial and non-commercial sectors. UN/EDIFACT data streams have a hierarchical structure where the top level is referred to as an interchange, and lower levels contain multiple messages, which consist of segments, which in turn consist of composites. Composites in turn consist of elements. Segments, composites, and elements are delimited by separators. Only segments have initiators."
            },
            {
              "section":"An interchange starts with a UNB segment and ends with a UNZ segment. A message starts with a UNH segment and ends with a UNT segment. An element in the UNH segment identifies the message type. Messages may be grouped into functional groups, which start with a UNG segment and end with a UNE segment. Optionally, the interchange can start with a UNA segment that defines the delimiters used by the interchange; defaults are used if there is no UNA."
            },
            {
              "section":"UN/EDIFACT data streams adopt one of several syntax levels, the most common versions being version 3 or version 4."
            },
            {
              "section":"The DFDL schema editor is used to view the model and parse example EDIFACT data files."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Message modeling overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"How to model data with DFDL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"EDIFACT messaging standard",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09560_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDLSchemas EDIFACT repository",
              "link":"http://dfdlschemas.github.io/EDIFACT/",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and two shared libraries are imported into your workspace."
              },
              {
                "section":"Library <span class='library'>EDIFACT-D03B</span> contains a pair of DFDL schemas that model a UN/EDIFACT Supply Chain interchange for release D.03B. Definitions for message types INVOIC and ORDERS are provided. Test data files are included in the library."
              },
              {
                "section":"Library <span class='library'>EDIFACT-Common</span> contains a DFDL schema to define default values for DFDL properties, and a DFDL schema to model the Uxx service segments and service messages for syntax version 4."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message modeling overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"How to model data with DFDL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"EDIFACT messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09560_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas EDIFACT repository",
                "link":"http://dfdlschemas.github.io/EDIFACT/",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Exploring the schemas",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The <span class='library'>EDIFACT-D03B</span> and <span class='library'>EDIFACT-Common</span> libraries are shown in the <span class='uicontrol'>Application Development</span> view of your workspace."
              },
              {
                "section":"The <span class='filepath'>EDIFACT-SupplyChain-Messages-D.03B.xsd</span> DFDL schema in the <span class='library'>EDIFACT-D03B</span> library opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."
              },
              {
                "section":"The Interchange message is highlighted and it models a whole EDIFACT interchange. The main editor view shows the logical components of the message, such as elements and sequences. You can explore the Interchange message structure by expanding the elements."
              },
              {
                "section":"The physical rendering of each logical component is described by the DFDL properties in the <span class='uicontrol'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png' alt='' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from schema <span class='filepath'>IBM_EDI_Format.xsd</span> in the <span class='library'>EDIFACT-Common</span> library."
              },
              {
                "section":"Because the settings of delimiters in an EDIFACT interchange can vary, the DFDL properties <span class='varname'>Terminator</span>, <span class='varname'>Separator</span>, <span class='varname'>Escape Character</span> and <span class='varname'>Decimal Separator</span> are set dynamically using DFDL expressions that refer to DFDL variables. The variables have default values and are overridden by the settings in a UNA segment if present. You can see this if you expand the UNA element in Interchange, select any of the child elements, and click on the <span class='uicontrol'>Variables</span> tab next to <span class='uicontrol'>Representation Properties</span>."
              },
              {
                "section":"You will be test parsing example EDIFACT data by using the Interchange message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class='uicontrol'>DFDL Test</span> perspective by clicking <span class='uicontrol'>Window &gt; Open Perspective</span> and then clicking <span class='uicontrol'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png' alt='' />)."
              },
              {
                "section":"<b>Tip:</b> If this <span class='uicontrol'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class='uicontrol'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class='uicontrol'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The <span class='filepath'>EDIFACT-SupplyChain-Messages-D.03B.xsd</span> DFDL schema is open in the DFDL editor. The Interchange message should be highlighted in green.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Test parse an example data file:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Parse Model</span> window opens."
                          },
                          {
                            "details":"In the Message section, select <span class='uicontrol'>Interchange</span>."
                          },
                          {
                            "details":"In the Parser Input section, select <span class='uicontrol'>Content from a data file</span> then click <span class='uicontrol'>Browse</span>."
                          },
                          {
                            "details":"Select the <span class='filepath'>ORDERS_D.03B_Interchange.txt</span> file from <span class='library'>EDIFACT-D03B</span> then click <span class='uicontrol'>OK</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>. If asked to confirm switching to the <span class='uicontrol'>DFDL Test</span> perspective, click <span class='uicontrol'>Yes</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test parse are displayed. You should see the message <span class='systemoutput'>Parsing completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the parsed data file in the <span class='uicontrol'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class='uicontrol'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Test serialize the logical instance that resulted from the parse:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Serialize Model</span> window opens."
                          },
                          {
                            "details":"In the Serializer Input section, select <span class='uicontrol'>Content from a DFDL Test - Logical Instance</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test serialize are displayed. You should see the message <span class='systemoutput'>Serialization completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the serialized data file in the <span class='uicontrol'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Repeat steps 1 through 6 for the <span class='filepath'>INVOIC_D.03B_Interchange_with_UNA.txt</span> example data file."
                    },
                    {
                      "details":"As an alternative to the toolbar buttons, you can also test from the <span class='uicontrol'>DFDL Test - Parse</span> and <span class='uicontrol'>DFDL Test - Serialize</span> views, using the <span class='uicontrol'>Browse</span> button to select a data source and the green play icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png' alt='' /> to run the DFDL parser or serializer."
                    }
                  ]
                }
              },
              {
                "section":"The supplied DFDL schemas parse UN/EDIFACT interchanges with or without new lines at the end of each segment, but will serialize interchanges without new lines. If you need to serialize with new lines, you can edit the <span class='filepath'>EDIFACT-Service-Segments-4.1.xsd</span> file in the <span class='library'>EDIFACT-Common</span> library and change the DFDL expression used by setting the <span class='varname'>SegmentTerm</span> DFDL variable to the commented-out value."
              },
              {
                "section":"If you need to support UN/EDIFACT syntax version 3 instead of syntax version 4, you can edit the <span class='filepath'>IBM_EDI_Format.xsd</span> file in the <span class='library'>EDIFACT-Common</span> library. In this file, set the <span class='varname'>RepeatSep</span> DFDL variable to take the default value '+' (plus) instead of '*' (asterisk)."
              },
              {
                "section":"If you need to support ',' (comma) as the default decimal separator instead of '.' (period), you can edit the <span class='filepath'>IBM_EDI_Format.xsd</span> file in the <span class='library'>EDIFACT-Common</span> library. In this file, change the <span class='varname'>DecimalSep</span> DFDL variable to take the default value ',' (comma) instead of '.' (period)."
              },
              {
                "section":"The two shared libraries can be deployed to an integration node for use by message flows."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing a DFDL schema file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20065_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"EDIFACT messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09560_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas EDIFACT repository",
                "link":"http://dfdlschemas.github.io/EDIFACT/",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Modeling HL7 data by using DFDL":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Modeling HL7 data by using DFDL",
        "shortDescription":"Learn how to model HL7 healthcare data by using Data Format Description Language (DFDL).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainSchema",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Modeling HL7 messages"
          },
          {
            "title":"Editing DFDL schema"
          },
          {
            "title":"Testing DFDL schema"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"An understanding of how the DFDL editor can be used to model and parse HL7 data."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how to model HL7 data by using DFDL schema."
            },
            {
              "section":"HL7 Version 2.x defines a series of electronic messages to support clinical, administrative, logistical and financial processes. Since 1987 the standard has been updated regularly, resulting in the latest version 2.7 which is backward compatible with earlier 2.x versions. HL7 Version 2 messages use a non-XML text syntax based on segments (usually separated by carriage-return) and one-character delimiters."
            },
            {
              "section":"Segments contain fields separated by the field delimiter. A field can have components separated by the component delimiter, and a component can have sub-components separated by the sub-component delimiter. The default delimiters are pipe (|) for the field separator, caret (^) for the component separator, and ampersand (&) for the sub-component separator. The tilde (~) is the default repetition separator for fields that repeat. Each segment starts with a 3-character initiator which identifies the segment type. Fields, components and sub-components do not have initiators."
            },
            {
              "section":"Every message starts with a special MSH segment, which includes a field that identifies the message type. The message type determines the expected segment types in the message. The MSH also defines the delimiters that are used by the message. Each segment of the message contains one specific category of information. Healthcare organizations are able to extend the standard by providing their own segments with 3-character initiators starting with 'Z'."
            },
            {
              "section":"The DFDL schema editor is used to view the model and parse example HL7 message files."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Message modeling overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"How to model data with DFDL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"HL7 messaging standard",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09565_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDLSchemas HL7 repository",
              "link":"http://dfdlschemas.github.io/HL7-v2.7/",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and a shared library is imported into your workspace."
              },
              {
                "section":"Library <span class='library'>HL7-2.7</span> contains a set of DFDL schemas that model HL7 Version 2.7 messages."
              },
              {
                "section":"The <span class='filepath'>GenericHL7.xsd</span> schema models the overall HL7 message in a generic manner that allows it to parse all HL7 message types. Segments are defined in <span class='filepath'>segments.xsd</span> comprising fields, components and sub-components defined in <span class='filepath'>fields.xsd</span> and <span class='filepath'>datatypes.xsd</span>. Z segments may be added to <span class='filepath'>Z_Segments.xsd</span>. The <span class='filepath'>HL7Format.xsd</span> schema defines suitable default values for DFDL properties."
              },
              {
                "section":"Test data files are included in the library."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message modeling overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"How to model data with DFDL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"HL7 messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09565_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas HL7 repository",
                "link":"http://dfdlschemas.github.io/HL7-v2.7/",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Exploring the schemas",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The <span class='library'>HL7-2.7</span> library is shown in the <span class='uicontrol'>Application Development</span> view of your workspace."
              },
              {
                "section":"The <span class='filepath'>GenericHL7.xsd</span> schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."
              },
              {
                "section":"The HL7 message is highlighted and it models a HL7 message consisting of the MSH segment followed by any number of other HL7 segments or Z segments. The main editor view shows the logical components of the message, such as elements and sequences. You can explore the HL7 message structure by expanding the elements."
              },
              {
                "section":"The physical rendering of each logical component is described by the DFDL properties in the <span class='uicontrol'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png' alt='' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class='filepath'>HL7Format.xsd</span> schema."
              },
              {
                "section":"Because the settings of delimiters in a HL7 message can vary, the DFDL property <span class='varname'>Separator</span> is set dynamically using DFDL expressions that refer to DFDL variables. The variables have default values and are overridden by the settings in the MSH segment. You can see this if you expand the MSH element in the HL7 message and look at the definition of MSH.1.FieldSeparator. Hover over MSH.1.FieldSeparator, click on the yellow 'Go to' arrow that pops up, and then in the <span class='filepath'>segments.xsd</span> schema that opens click on the <span class='uicontrol'>Variables</span> tab next to <span class='uicontrol'>Representation Properties</span>. When you have finished close <span class='filepath'>segments.xsd</span>."
              },
              {
                "section":"You will be test parsing example HL7 data by using the HL7 message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class='uicontrol'>DFDL Test</span> perspective by clicking <span class='uicontrol'>Window &gt; Open Perspective</span> and then clicking <span class='uicontrol'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png' alt='' />)."
              },
              {
                "section":"<b>Tip:</b> If this <span class='uicontrol'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class='uicontrol'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class='uicontrol'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The <span class='filepath'>GenericHL7.xsd</span> DFDL schema is open in the DFDL editor. The HL7 message should be visible in the Messages section of the editor.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Test parse an example data file:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Parse Model</span> window opens."
                          },
                          {
                            "details":"In the Message section, select <span class='uicontrol'>HL7</span>."
                          },
                          {
                            "details":"In the Parser Input section, select <span class='uicontrol'>Content from a data file</span> then click <span class='uicontrol'>Browse</span>."
                          },
                          {
                            "details":"Select the <span class='filepath'>A01.txt</span> file from <span class='library'>HL7-2.7</span> then click <span class='uicontrol'>OK</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>. If asked to confirm switching to the <span class='uicontrol'>DFDL Test</span> perspective, click <span class='uicontrol'>Yes</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test parse are displayed. You should see the message <span class='systemoutput'>Parsing completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the parsed data file in the <span class='uicontrol'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class='uicontrol'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Test serialize the logical instance that resulted from the parse:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Serialize Model</span> window opens."
                          },
                          {
                            "details":"In the Serializer Input section, select <span class='uicontrol'>Content from 'DFDL Test - Logical Instance'</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test serialize are displayed. You should see the message <span class='systemoutput'>Serialization completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the serialized data file in the <span class='uicontrol'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Repeat steps 1 through 6 for the <span class='filepath'>ORU.txt</span> example data file."
                    },
                    {
                      "details":"As an alternative to the toolbar buttons, you can also test from the <span class='uicontrol'>DFDL Test - Parse</span> and <span class='uicontrol'>DFDL Test - Serialize</span> views, using the <span class='uicontrol'>Browse</span> button to select a data source and the green play icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png' alt='' /> to run the DFDL parser or serializer."
                    }
                  ]
                }
              },
              {
                "section":"The shared library can be deployed to an integration node for use by message flows."
              },
              {
                "section":"IBM App Connect for Healthcare contains a more comprehensive set of DFDL schemas for HL7, including definitions of all HL7 message types. It also contains prebuilt patterns and connections enabling rapid clinical application and device integration for connected healthcare systems."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing a DFDL schema file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20065_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"HL7 messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad09565_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas HL7 repository",
                "link":"http://dfdlschemas.github.io/HL7-v2.7/",
                "type":"web"
              },
              {
                "title":"Product link to ",
                "description":"IBM App Connect for Healthcare",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.healthcare.doc/ha00000.html",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Modeling Toshiba 4690 TLog data by using DFDL":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Modeling Toshiba 4690 TLog data by using DFDL",
        "shortDescription":"Learn how to model Toshiba 4690 Point of Sale Transaction Log data by using Data Format Description Language (DFDL).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"10 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainSchema",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Modeling TLog messages"
          },
          {
            "title":"Editing DFDL schema"
          },
          {
            "title":"Testing DFDL schema"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"An understanding of how the DFDL editor can be used to model and parse TLog data."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates how to model Toshiba 4690 TLog data by using DFDL schema."
            },
            {
              "section":"A Transaction Log (TLog) is a complete, detailed record of everything that occurs at a Point of Sale (PoS) terminal, including events that are not directly related to a sales transaction. The precise TLog record format is unique to a given PoS application. This tutorial considers Toshiba (ex-IBM) 4690 ACE v7r5 TLog, a delimited binary format emitted by 4690 PoS terminals."
            },
            {
              "section":"4690 TLog messages consist of a number of transactions, each of which comprises one or more transaction records (sometimes called 'strings'). Each transaction starts with x'22' and ends with x'220D0A'. Within a transaction, the transaction records are separated by x'222C22'. Within a transaction record, each field is typically separated by x'3A', though some records use x'223A22'. Fields are either ASCII text, hex binary or a BCD variant specific to 4690, and are fixed or variable length."
            },
            {
              "section":"There are many different types of transaction record, and the first field identifies the type. Some of the record types have sub-types which are identified by a subsequent field or fields. In the DFDL model, the record type field is treated as an initiator, for performance, and record sub-types are identified using a discriminator on the appropriate field(s)."
            },
            {
              "section":"4690 Tlogs are invariably customized by each retailer by adding extra transaction records, typically to the 99 range, or by adding extra fields to the end of records."
            },
            {
              "section":"The DFDL schema editor is used to view the model and parse example 4690 TLog message files."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Message modeling overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"How to model data with DFDL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"TLOG messaging standard",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad16940_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDLSchemas TLOG repository",
              "link":"https://dfdlschemas.github.io/IBM4690-TLOG/",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and a shared library is imported into your workspace."
              },
              {
                "section":"Library <span class='library'>TLOG-ACE</span> contains a set of DFDL schemas that model Toshiba 4690 ACE v7r5 (or earlier) messages."
              },
              {
                "section":"The <span class='filepath'>TlogAce.xsd</span> schema models a file of ACE transactions in a flexible way that enables all transaction records to be parsed."
              },
              {
                "section":"The <span class='filepath'>TlogAceCommon.xsd</span> schema provides common definitions for reuse."
              },
              {
                "section":"The <span class='filepath'>TlogAceCustom.xsd</span> schema can be used to support custom transaction records."
              },
              {
                "section":"The <span class='filepath'>TlogAceTypes.xsd</span> schema provides reusable type definitions."
              },
              {
                "section":"The <span class='filepath'>TlogAceFormat.xsd</span> schema defines suitable default values for DFDL properties."
              },
              {
                "section":"Test data files with the extension .dat are also included in the library."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message modeling overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"How to model data with DFDL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"TLOG messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad16940_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas TLOG repository",
                "link":"https://dfdlschemas.github.io/IBM4690-TLOG/",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Exploring the schemas",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The <span class='library'>TLOG-ACE</span> library is shown in the <span class='uicontrol'>Application Development</span> view of your workspace."
              },
              {
                "section":"The <span class='filepath'>TlogAce.xsd</span> schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."
              },
              {
                "section":"The Transactions message is highlighted and it models a file of 4690 ACE transactions. Each Transaction consists of any number of transaction records. The main editor view shows the logical components of the message, such as elements, sequences and choices. You can explore the Transactions message structure by expanding the elements."
              },
              {
                "section":"The physical rendering of each logical component is described by the DFDL properties in the <span class='uicontrol'>Representation Properties</span> tab. DFDL properties can be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png' alt='' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class='filepath'>TlogAceFormat.xsd</span> schema."
              },
              {
                "section":"You will be test parsing example 4690 ACE data by using the Transactions message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class='uicontrol'>DFDL Test</span> perspective by clicking <span class='uicontrol'>Window &gt; Open Perspective</span> and then clicking <span class='uicontrol'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png' alt='' />)."
              },
              {
                "section":"<b>Tip:</b> If this <span class='uicontrol'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class='uicontrol'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class='uicontrol'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The <span class='filepath'>TlogAce.xsd</span> DFDL schema is open in the DFDL editor. The Transactions message should be visible in the Messages section of the editor.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Test parse an example data file:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Parse Model</span> window opens."
                          },
                          {
                            "details":"In the Message section, select <span class='uicontrol'>Transactions</span>."
                          },
                          {
                            "details":"In the Parser Input section, select <span class='uicontrol'>Content from a data file</span> then click <span class='uicontrol'>Browse</span>."
                          },
                          {
                            "details":"Select the <span class='filepath'>ace_00_01.dat</span> file from <span class='library'>TLOG-ACE</span> then click <span class='uicontrol'>OK</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>. If asked to confirm switching to the <span class='uicontrol'>DFDL Test</span> perspective, click <span class='uicontrol'>Yes</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test parse are displayed. You should see the message <span class='systemoutput'>Parsing completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the parsed data file in the <span class='uicontrol'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class='uicontrol'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Test serialize the logical instance that resulted from the parse:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Serialize Model</span> window opens."
                          },
                          {
                            "details":"In the Serializer Input section, select <span class='uicontrol'>Content from 'DFDL Test - Logical Instance'</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test serialize are displayed. You should see the message <span class='systemoutput'>Serialization completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the serialized data file in the <span class='uicontrol'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Repeat steps 1 through 6 for the other example data files <span class='filepath'>ace_02_03_07.dat</span>, <span class='filepath'>ace_05_97-05.dat</span> and <span class='filepath'>ace_80-01_98_13_97-13.dat</span>."
                    },
                    {
                      "details":"As an alternative to the toolbar buttons, you can also test from the <span class='uicontrol'>DFDL Test - Parse</span> and <span class='uicontrol'>DFDL Test - Serialize</span> views, using the <span class='uicontrol'>Browse</span> button to select a data source and the green play icon <img src='https://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png' alt='' /> to run the DFDL parser or serializer."
                    }
                  ]
                }
              },
              {
                "section":"The shared library can be deployed to an integration node for use by message flows."
              },
              {
                "section":"DFDL schemas for Toshiba 4690 Supermarket Application (SA) are available in the DFDLSchemas TLOG repository on GitHub."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing a DFDL schema file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20065_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"TLOG messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/ad16940_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas TLOG repository",
                "link":"https://dfdlschemas.github.io/IBM4690-TLOG/",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  },
  "Modeling ISO 8583 data by using DFDL":{
    "version":"0.6",
    "pageContent":{
      "_comments":"JSON object that contains data for page labels, buttons, etc.",
      "navItems":{
        "_common":{
          "buttonBackToGallery":{
            "name":"Back To Gallery",
            "method":"backToGallery()",
            "idName":"backToGallery"
          },
          "buttonStartTutorial":{
            "name":"Start Tutorial",
            "method":"startTutorialFromDetailsScreen()",
            "idName":"startTutorial"
          },
          "buttonViewDetails":{
            "name":"View Details",
            "method":"viewDetails()",
            "idName":"stepsViewDetails"
          }
        }
      }
    },
    "tutorial":{
      "_common":{
        "name":"Modeling ISO 8583 data by using DFDL",
        "shortDescription":"Learn how to model ISO 8583 data by using Data Format Description Language (DFDL).",
        "durationText":"This tutorial takes approximately",
        "durationTime":"5 minutes",
        "_resourceToOpenComment":"The ID of the first resource to open when the user imports the tutorial. Resource IDs are defined in the repo_metadata.json Tutorials listing on ot4i.",
        "resourceToOpen":"MainSchema",
        "helpLink":{
          "text":"IBM Knowledge Center",
          "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.ace.home.doc/help_home.htm"
        }
      },
      "pageDetails":{
        "topicsName":"Tutorial Topics",
        "_topicListComment":"A short list of product concepts or tasks demonstrated by this tutorial",
        "topicList":[
          {
            "title":"Modeling ISO8583 messages"
          },
          {
            "title":"Editing DFDL schema"
          },
          {
            "title":"Testing DFDL schema"
          }
        ],
        "outcomesName":"Learning outcomes",
        "_outcomesComment":"A description of what the user will have learned or accomplished by running this tutorial.",
        "outcomeList":[
          {
            "title":"An understanding of how the DFDL editor can be used to model and parse ISO 8583 data."
          }
        ],
        "summary":{
          "overviewName":"OVERVIEW",
          "_overviewComment":"A short description of what happens in this tutorial, and an optional short explanation of the IIB concepts used in this tutorial if necessary for context. What background knowledge must the user have for this to make sense?",
          "sections":[
            {
              "section":"This tutorial demonstrates the modeling of ISO 8583 data by using DFDL schema."
            },
            {
              "section":"ISO 8583 is a message format for representing card-based transactions including ATM and credit card transactions. There are three releases of the standard: 1987, 1993 and 2003."
            },
            {
              "section":"ISO 8583 messages consist of a number of optional fixed-length or prefixed-length fields without initiators. The presence of a given field in the message is indicated by the setting of a corresponding bit in a bitmap. The bitmaps occur near the start of the message, and can either be in 'packed' format where each bitmap is encoded as 8 bytes of binary data (8 bits per byte), or in 'unpacked' format where each bitmap is encoded as 16 text characters (4 bits per character)."
            },
            {
              "section":"The DFDL schema editor is used to view the model and parse example ISO 8583 data files."
            }
          ]
        },
        "helpLinks":{
          "title":"Find out more",
          "details":[
            {
              "title":"Knowledge Center link to ",
              "description":"Message modeling overview",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.html",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"How to model data with DFDL",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
              "type":"web"
            },
            {
              "title":"Knowledge Center link to ",
              "description":"ISO8583 messaging standard",
              "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd34064_.htm",
              "type":"web"
            },
            {
              "title":"GitHub link to ",
              "description":"DFDLSchemas ISO8583 repository",
              "link":"http://dfdlschemas.github.io/ISO8583/",
              "type":"web"
            }
          ]
        }
      },
      "pageSteps":{
        "create":{
          "overview":{
            "name":"Create",
            "heading":"Import projects",
            "_createComment":"A description of what will happen when the user clicks Import.",
            "sections":[
              {
                "section":"Click <span class='uicontrol'>Import</span> and a shared library is imported into your workspace."
              },
              {
                "section":"Library <span class='library'>ISO8583</span> contains a set of DFDL schemas that model ISO8583 1987 messages with 'packed' bitmaps."
              },
              {
                "section":"The <span class='filepath'>ISO8583_1987.xsd</span> schema models the overall ISO 8583 message using a set of re-usable types defined in the <span class='filepath'>ISO8583Types.xsd</span>. The <span class='filepath'>ISO8583Format.xsd</span> schema defines suitable default values for DFDL properties."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Message modeling overview",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd40430_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"How to model data with DFDL",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20125_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"ISO8583 messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd34064_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas ISO8583 repository",
                "link":"http://dfdlschemas.github.io/ISO8583/",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          },
          "actions":{
            "title":"Create Actions",
            "details":[
              {
                "name":"Import",
                "method":"importArtifacts()"
              }
            ]
          }
        },
        "prepare":{
          "overview":{
            "name":"Prepare",
            "heading":"Exploring the schemas",
            "_prepareComment":"A description of what just happened when the user clicked Import, and what will happen when the user clicks Deploy.",
            "sections":[
              {
                "section":"The <span class='library'>ISO8583</span> library is shown in the <span class='uicontrol'>Application Development</span> view of your workspace."
              },
              {
                "section":"The <span class='filepath'>ISO8583_1987.xsd</span> schema opens in the DFDL editor. If it does not open, double-click the DFDL schema to open it in the editor."
              },
              {
                "section":"The ISO8583_1987 message is highlighted and models an ISO 8583 message with 'packed' bitmaps. The main editor view shows the logical components of the message such as elements and sequences. You can explore the ISO8583_1987 message structure by expanding the elements."
              },
              {
                "section":"The physical rendering of each logical component is described by the DFDL properties in the <span class='uicontrol'>Representation Properties</span> tab. DFDL properties can either be specified locally on the component, or can be inherited from pre-defined sets of DFDL properties. Inherited properties have an icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlInheritedProperty.png' alt='' /> shown next to them, and hovering over the icon reveals where the property is defined. In this schema, inherited properties are obtained from the <span class='filepath'>ISO8583Format.xsd</span> schema."
              },
              {
                "section":"The presence or absence of each element in the message is given by a corresponding bit in one of the bitmaps. The DFDL <span class='varname'>Occurs Count Kind</span> property for each element is set to 'expression', and the DFDL <span class='varname'>Occurs Count</span> property is a DFDL expression that refers to the corresponding bit in the bitmap. You can see this if you select any of the child elements with a numeric suffix, and scroll down the <span class='uicontrol'>Representation Properties</span> tab until you reach the 'Occurrences' section. The bitmaps themselves can be viewed by expanding the Bitmaps_Group group reference. The secondary bitmap is itself optional and its presence or absence is given by Bit001."
              },
              {
                "section":"You will be test parsing example ISO 8583 data using the ISO8583_1987 message. The test parsing takes place entirely within the DFDL editor, so there is no message flow in this tutorial and no Deploy step. Before test parsing, switch to the <span class='uicontrol'>DFDL Test</span> perspective by clicking <span class='uicontrol'>Window &gt; Open Perspective</span> and then clicking <span class='uicontrol'>DFDL Test</span>. (Alternatively, you can use the toolbar icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/changePerspective.png' alt='' />)."
              },
              {
                "section":"<b>Tip:</b> If this <span class='uicontrol'>Tutorial Steps View</span> tab disappears when you switch perspectives, to add it back, use the <span class='uicontrol'>Window &gt; Show View &gt; Other</span> menu option. In the resulting <span class='uicontrol'>Show View</span> dialog, open the Sample Category folder, choose Tutorial Steps View and click OK."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Working with DFDL schema files",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20061_.htm",
                "type":"web"
              }
            ]
          }
        },
        "run":{
          "overview":{
            "name":"Run",
            "heading":"Follow these steps to complete the tutorial",
            "_runComment":"The full steps for the user to run through the tutorial. Use 'sections' to render paragraphs, 'steps' with a type of 'ordered' or 'unordered' to render HTML lists, and 'substeps' to render nested lists.",
            "sections":[
              {
                "section":"The <span class='filepath'>ISO8583_1987.xsd</span> DFDL schema is open in the DFDL editor. The ISO8583_1987 message should be highlighted in green.",
                "steps":{
                  "type":"ordered",
                  "details":[
                    {
                      "details":"Test parse an example data file:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Parse Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Parse Model</span> window opens."
                          },
                          {
                            "details":"In the Message section, select <span class='uicontrol'>ISO8583_1987</span>."
                          },
                          {
                            "details":"In the Parser Input section, select <span class='uicontrol'>Content from a data file</span> then click <span class='uicontrol'>Browse</span>."
                          },
                          {
                            "details":"Select the <span class='filepath'>ISO8583_1987_Test_Data_1.txt</span> file from <span class='library'>ISO8583_1987</span> then click <span class='uicontrol'>OK</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>. If asked to confirm switching to the <span class='uicontrol'>DFDL Test</span> perspective, click <span class='uicontrol'>Yes</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test parse are displayed. You should see the message <span class='systemoutput'>Parsing completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the parsed data file in the <span class='uicontrol'>DFDL Test - Parse</span> view. The results of the parse can be viewed in the <span class='uicontrol'>DFDL Test - Logical Instance</span> view, as a tree or as XML. You can view a log of the parser actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Test serialize the logical instance that resulted from the parse:",
                      "substeps":{
                        "type":"ordered",
                        "details":[
                          {
                            "details":"Click the <span class='uicontrol'>Test Serialize Model</span> button in the DFDL editor toolbar. The <span class='wintitle'>Test Serialize Model</span> window opens."
                          },
                          {
                            "details":"In the Serializer Input section, select <span class='uicontrol'>Content from a DFDL Test - Logical Instance</span>."
                          },
                          {
                            "details":"Set the Encoding to <span class='uicontrol'>ASCII</span>."
                          },
                          {
                            "details":"Click <span class='uicontrol'>OK</span>."
                          }
                        ]
                      }
                    },
                    {
                      "details":"The results of the test serialize are displayed. You should see the message <span class='systemoutput'>Serialization completed successfully</span>. You can dismiss this message."
                    },
                    {
                      "details":"You can view the serialized data file in the <span class='uicontrol'>DFDL Test - Serialize</span> view. You can view a log of the serializer actions in the <span class='uicontrol'>DFDL Test - Trace</span> view."
                    },
                    {
                      "details":"Repeat steps 1 through 6 for the <span class='filepath'>ISO8583_1987_Test_Data_2.txt</span> example data file. This is an example of message type 0200."
                    },
                    {
                      "details":"As an alternative to the toolbar buttons, you can also test from the <span class='uicontrol'>DFDL Test - Parse</span> and <span class='uicontrol'>DFDL Test - Serialize</span> views, using the <span class='uicontrol'>Browse</span> button to select a data source and the green play icon <img src='http://ot4i.github.io/ot4i.tutorials/dist/images/icons/iib/dfdlTestPlay.png' alt='' /> to run the DFDL parser or serializer."
                    }
                  ]
                }
              },
              {
                "section":"The supplied DFDL schemas will parse ISO 8583 1987 messages with 'packed' bitmaps. If you need to parse 1993 messages, or messages with 'unpacked' bitmaps, there are suitable DFDL schemas in the ISO8583 repository of the DFDLSchemas organization on GitHub."
              },
              {
                "section":"The shared library can be deployed to an integration node for use by message flows."
              }
            ]
          },
          "helpLinks":{
            "title":"Find out more",
            "details":[
              {
                "title":"Knowledge Center link to ",
                "description":"Testing a DFDL schema file",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/df20065_.htm",
                "type":"web"
              },
              {
                "title":"Knowledge Center link to ",
                "description":"ISO8583 messaging standard",
                "link":"https://www.ibm.com/support/knowledgecenter/en/SSTTDS_11.0.0/com.ibm.etools.mft.doc/bd34064_.htm",
                "type":"web"
              },
              {
                "title":"GitHub link to ",
                "description":"DFDLSchemas ISO8583 repository",
                "link":"http://dfdlschemas.github.io/ISO8583/",
                "type":"web"
              }
            ]
          },
          "exits":{
            "title":"Run Exits",
            "details":[
              {
                "name":"Clean Up",
                "description":"Clean up and remove any changes in your workspace made by the tutorial.",
                "method":"cleanUp()"
              }
            ]
          }
        }
      }
    }
  }
}
